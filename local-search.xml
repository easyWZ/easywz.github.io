<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NEXT.JS</title>
    <link href="/2025/08/19/Front-end/JavaScript/NextJs/"/>
    <url>/2025/08/19/Front-end/JavaScript/NextJs/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.nextjs.cn/docs/getting-started">官方文档</a></p><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>Next.js 是目前最流行的 React 全栈框架，它集成了服务器端渲染（SSR）和静态生成（SSG），能够提高性能和 SEO，特别适合构建高效、动态的 Web 应用</p><h1 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h1><p>脚手架启动： 截止目前2025&#x2F;8&#x2F;19日版本需求: node &lt; 20</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">npx</span> <span class="hljs-built_in">create-next-app@latest</span><br><span class="hljs-comment"># or</span><br><span class="hljs-string">yarn</span> <span class="hljs-string">create</span> <span class="hljs-string">next-app</span><br></code></pre></td></tr></table></figure><h1 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h1><p>在 Next.js 中，一个 page（页面） 就是一个从 .js、jsx、.ts 或 .tsx 文件导出（export）的 React 组件 ，这些文件存放在 pages 目录下。每个 page（页面）都使用其文件名作为路由（route）。<br>实际操作：<br>手动创建pages目录，与src同级，如下创建pages&#x2F;about.tsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">about</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> about;<br></code></pre></td></tr></table></figure><p>则可直接通过&#x2F;about访问该页面，注：首次添加pages需重启项目</p><h2 id="具有动态路由的页面"><a href="#具有动态路由的页面" class="headerlink" title="具有动态路由的页面"></a>具有动态路由的页面</h2><p>Next.js 支持具有动态路由的 pages（页面）。例如，如果你创建了一个命名为 pages&#x2F;posts&#x2F;[id].js 的文件，那么就可以通过 posts&#x2F;1、posts&#x2F;2 等类似的路径进行访问。<br>实际操作：<br>pages目录下创建post文件夹内部创建名称为<code>[pid].tsx</code>,编写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next/router&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br>  <span class="hljs-keyword">const</span> &#123; pid &#125; = router.<span class="hljs-property">query</span><br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Post: &#123;pid&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span><br></code></pre></td></tr></table></figure><p>则可通过<code>/post/1</code>访问到该页面</p><h2 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h2><p>默认情况下，Next.js 将 预渲染 每个 page（页面）。这意味着 Next.js 会预先为每个页面生成 HTML 文件，而不是由客户端 JavaScript 来完成。预渲染可以带来更好的性能和 SEO 效果。</p><p>每个生成的 HTML 文件都与该页面所需的最少 JavaScript 代码相关联。当浏览器加载一个 page（页面）时，其 JavaScript 代码将运行并使页面完全具有交互性。（此过程称为 水合（hydration）。）</p><h2 id="两种形式的预渲染"><a href="#两种形式的预渲染" class="headerlink" title="两种形式的预渲染"></a>两种形式的预渲染</h2><p>Next.js 具有两种形式的预渲染： 静态生成（Static Generation） 和 服务器端渲染（Server-side Rendering）。这两种方式的不同之处在于为 page（页面）生成 HTML 页面的 时机 。</p><ul><li><strong>静态生成 （推荐）</strong>：HTML 在 构建时 生成，并在每次页面请求（request）时重用。</li><li><strong>服务器端渲染</strong>：在 每次页面请求（request）时 重新生成 HTML。<br>重要的是，Next.js 允许你为每个页面 选择 预渲染的方式。你可以创建一个 “混合渲染” 的Next.js 应用程序：对大多数页面使用“静态生成”，同时对其它页面使用“服务器端渲染”。</li></ul><p>出于性能考虑，相对服务器端渲染，更推荐使用 静态生成 。 CDN 可以在没有额外配置的情况下缓存静态生成的页面以提高性能。但是，在某些情况下，服务器端渲染可能是唯一的选择。</p><p>你还可以将 客户端渲染 与静态生成或服务器端渲染一起使用。这意味着页面的某些部分可以完全由客户端 JavaScript 呈现。</p><p>如果一个页面使用了 静态生成，在 构建时（build time） 将生成此页面对应的 HTML 文件 。这意味着在生产环境中，运行 next build 时将生成该页面对应的 HTML 文件。然后，此 HTML 文件将在每个页面请求时被重用，还可以被 CDN 缓存。</p><p>在 Next.js 中，你可以静态生成 带有或不带有数据 的页面。接下来分别看看这两种情况：</p><h3 id="静态生成"><a href="#静态生成" class="headerlink" title="静态生成"></a>静态生成</h3><h4 id="生成不带数据的静态页面"><a href="#生成不带数据的静态页面" class="headerlink" title="生成不带数据的静态页面"></a>生成不带数据的静态页面</h4><p>默认情况下，Next.js 使用 “静态生成” 来预渲染页面但不涉及获取数据。如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">About</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">About</span><br></code></pre></td></tr></table></figure><p>请注意，此页面在预渲染时不需要获取任何外部数据。在这种情况下，Next.js 只需在构建时为每个页面生成一个 HTML 文件即可。</p><h4 id="需要获取数据的静态生成"><a href="#需要获取数据的静态生成" class="headerlink" title="需要获取数据的静态生成"></a>需要获取数据的静态生成</h4><p>某些页面需要获取外部数据以进行预渲染。有两种情况，一种或两种都可能适用。在每种情况下，你都可以使用 Next.js 所提供的以下函数：</p><ol><li><strong>您的页面内容取决于外部数据</strong>：使用 getStaticProps。<ol><li>例如： 您的博客页面可能需要从 CMS（内容管理系统）中获取博客文章列表。</li><li>要在预渲染时获取此数据，Next.js 允许你从同一文件 <code>export</code>（导出） 一个名为 <code>getStaticProps</code> 的 <code>async（异步）</code> 函数。该函数在构建时被调用，并允许你在预渲染时将获取的数据作为 <code>props</code> 参数传递给页面。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 需要获取 `posts`（通过调用 API ）</span><br><span class="hljs-comment">//       在此页面被预渲染之前</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Blog</span>(<span class="hljs-params">&#123; posts &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;posts.map((post) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;post.key&#125;</span>&gt;</span>&#123;post.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 此函数在构建时被调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 调用外部 API 获取博文列表</span><br>  <span class="hljs-comment">//   const res = await fetch(&#x27;https://.../posts&#x27;)</span><br>  <span class="hljs-comment">//   const posts = await res.json()</span><br>  <span class="hljs-keyword">const</span> posts = [<br>    &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">key</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-attr">key</span>: <span class="hljs-number">2</span> &#125;,<br>  ];<br><br>  <span class="hljs-comment">// 通过返回 &#123; props: &#123; posts &#125; &#125; 对象，Blog 组件</span><br>  <span class="hljs-comment">// 在构建时将接收到 `posts` 参数</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>      posts,<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Blog</span>;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><strong>你的页面 paths（路径） 取决于外部数据</strong>：使用 getStaticPaths （通常还要同时使用 getStaticProps）。<ol><li>Next.js 允许你创建具有 动态路由 的页面。例如，你可以创建一个名为 pages&#x2F;posts&#x2F;[id].js 的文件用以展示以 id 标识的单篇博客文章。当你访问 posts&#x2F;1 路径时将展示 id: 1 的博客文章。</li><li>但是，在构建 id 所对应的内容时可能需要从外部获取数据。</li><li>例如： 假设你只向数据库添加了一篇博客文章（标记为 id: 1）。这种情况下，你只想在构建时针对 posts&#x2F;1 进行预渲染。稍后，你又添加了第二篇文章，标记为 id: 2。这是，你希望对 posts&#x2F;2 也进行预渲染。因此，预渲染的页面 paths（路径） 取决于外部数据。</li><li>为了解决这个问题，Next.js 允许你从动态页面（在这里是 pages&#x2F;posts&#x2F;[id].js）中 export（导出） 一个名为 getStaticPaths 的 async（异步） 函数。该函数在构建时被调用，并允许你指定要预渲染的路径。</li><li>同样在 pages&#x2F;posts&#x2F;[id].js 中，你还需要export（导出） getStaticProps 以便可以获取 id 所对应的博客文章的数据并进行预渲染：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">&#123; post &#125;</span>) &#123;<br>  <span class="hljs-comment">// Render post...</span><br>&#125;<br><br><span class="hljs-comment">// 此函数在构建时被调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticPaths</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 调用外部 API 获取博文列表</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;https://.../posts&quot;</span>);<br>  <span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br><br>  <span class="hljs-comment">// 据博文列表生成所有需要预渲染的路径</span><br>  <span class="hljs-keyword">const</span> paths = posts.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">post</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: post.<span class="hljs-property">id</span> &#125;,<br>  &#125;));<br><br>  <span class="hljs-comment">// We&#x27;ll pre-render only these paths at build time.</span><br>  <span class="hljs-comment">// &#123; fallback: false &#125; means other routes should 404.</span><br>  <span class="hljs-keyword">return</span> &#123; paths, <span class="hljs-attr">fallback</span>: <span class="hljs-literal">false</span> &#125;;<br>&#125;<br><br><span class="hljs-comment">// 在构建时也会被调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-comment">// params 包含此片博文的 `id` 信息。</span><br>  <span class="hljs-comment">// 如果路由是 /posts/1，那么 params.id 就是 1</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://.../posts/<span class="hljs-subst">$&#123;params.id&#125;</span>`</span>);<br>  <span class="hljs-keyword">const</span> post = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br><br>  <span class="hljs-comment">// 通过 props 参数向页面传递博文的数据</span><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">props</span>: &#123; post &#125; &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;<br><br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="什么时候应该使用静态生成？"><a href="#什么时候应该使用静态生成？" class="headerlink" title="什么时候应该使用静态生成？"></a>什么时候应该使用静态生成？</h4><p>“我可以在用户请求之前预先渲染此页面吗？” 如果答案是肯定的，则应选择“静态生成”。<br>包括：</p><ul><li>营销页面</li><li>博客文章和个人简历</li><li>电商产品列表</li><li>帮助和文档</li></ul><h3 id="服务器端渲染"><a href="#服务器端渲染" class="headerlink" title="服务器端渲染"></a>服务器端渲染</h3><p>也被称为 “SSR” 或 “动态渲染”。<br>如果 page（页面）使用的是 服务器端渲染，则会在 每次页面请求时 重新生成页面的 HTML 。<br>要对 page（页面）使用服务器端渲染，你需要 export 一个名为 getServerSideProps 的 async 函数。服务器将在每次页面请求时调用此函数。</p><p>例如，假设你的某个页面需要预渲染频繁更新的数据（从外部 API 获取）。你就可以编写 getServerSideProps 获取该数据并将其传递给 Page ，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params">&#123; data &#125;</span>) &#123;<br>  <span class="hljs-comment">// Render data...</span><br>&#125;<br><br><span class="hljs-comment">// This gets called on every request</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getServerSideProps</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Fetch data from external API</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://.../data`</span>)<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()<br><br>  <span class="hljs-comment">// Pass data to the page via props</span><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">props</span>: &#123; data &#125; &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Page</span><br></code></pre></td></tr></table></figure><p>如你所见，<code>getServerSideProps</code> 类似于 <code>getStaticProps</code>，但两者的区别在于<code>getServerSideProps</code> 在每次页面请求时都会运行，而在构建时不运行。</p><p>场景：新闻首页、股票行情、天气预报、电商商品详情页（价格&#x2F;库存实时变化）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>静态生成（推荐）： HTML 是在 构建时（build time） 生成的，并重用于每个页面请求。要使页面使用“静态生成”，只需导出（export）页面组件或导出（export） getStaticProps 函数（如果需要还可以导出 getStaticPaths 函数）。对于可以在用户请求之前预先渲染的页面来说，这非常有用。你也可以将其与客户端渲染一起使用以便引入其他数据。</li><li>服务器端渲染： HTML 是在 每个页面请求 时生成的。要设置某个页面使用服务器端渲染，请导出（export） getServerSideProps 函数。由于服务器端渲染会导致性能比“静态生成”慢，因此仅在绝对必要时才使用此功能。</li></ul><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p><a href="https://www.nextjs.cn/docs/basic-features/data-fetching">用于获取预渲染数据的三个独特的 Next.js 函数</a></p><ul><li><code>getStaticProps</code>（静态生成）：在构建时获取数据。</li><li><code>getStaticPaths</code>（静态生成）：指定动态路由，根据数据预渲染页面。</li><li><code>getServerSideProps</code>（服务器端渲染）：每次请求时获取数据。</li></ul><p class="note note-info">欲知后事如何，且听下回分解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>雅思必备词汇 &amp;&amp; 计算机英语</title>
    <link href="/2024/10/28/Resources/IELTSvocabulary/"/>
    <url>/2024/10/28/Resources/IELTSvocabulary/</url>
    
    <content type="html"><![CDATA[<h1 id="词性说明"><a href="#词性说明" class="headerlink" title="词性说明"></a>词性说明</h1><table><thead><tr><th>n</th><th>vi</th><th>vt</th><th>conj</th><th>prep</th><th>pron</th><th>adj</th><th>adv</th></tr></thead><tbody><tr><td>名词</td><td>非及物动词</td><td>及物动词</td><td>连词</td><td>介词</td><td>代词</td><td>形容词</td><td>副词</td></tr></tbody></table><table><thead><tr><th>连词类型</th><th>作用</th><th>常见连词</th></tr></thead><tbody><tr><td>并列连词（Coordinating）</td><td>连接对等的单词、短语或句子</td><td>and, but, or, so, for, yet, nor</td></tr><tr><td>从属连词（Subordinating）</td><td>连接主句和从句，表示时间、因果、条件等</td><td>because, although, if, when, while, until</td></tr><tr><td>关联连词（Correlative）</td><td>成对出现，连接对等成分</td><td>either…or, neither…nor, both…and, not only…but also</td></tr></tbody></table><h1 id="计算机英语单词列表"><a href="#计算机英语单词列表" class="headerlink" title="计算机英语单词列表"></a>计算机英语单词列表</h1><table><thead><tr><th>单词</th><th>词性（多词性）</th><th>含义</th><th>音标</th></tr></thead><tbody><tr><td>file</td><td>n，v</td><td>n.文件 v.保存文件</td><td>[faɪl]</td></tr><tr><td>command</td><td></td><td>命令</td><td></td></tr><tr><td>use</td><td></td><td>使用</td><td></td></tr><tr><td>program</td><td></td><td>程序</td><td></td></tr><tr><td>line</td><td></td><td>线路</td><td></td></tr><tr><td>if</td><td></td><td>如果</td><td></td></tr><tr><td>display</td><td></td><td>显示</td><td></td></tr><tr><td>set</td><td></td><td>设置</td><td></td></tr><tr><td>key</td><td></td><td>关键</td><td></td></tr><tr><td>list</td><td></td><td>列表</td><td></td></tr><tr><td>by</td><td></td><td>通过</td><td></td></tr><tr><td>press</td><td></td><td>按，压</td><td></td></tr><tr><td>with</td><td></td><td>与</td><td></td></tr><tr><td>format</td><td></td><td>n.格式</td><td></td></tr><tr><td>change</td><td></td><td>改变</td><td></td></tr><tr><td>cursor</td><td></td><td>n.光标</td><td>[ˈkɜrsə(r)]</td></tr><tr><td>directory</td><td></td><td>n.目录，索引簿</td><td>[dɪˈrɛktəri, daɪ-]</td></tr><tr><td>from</td><td></td><td>从</td><td></td></tr><tr><td>menu</td><td></td><td>菜单</td><td></td></tr><tr><td>option</td><td></td><td>n.选择，可选项</td><td></td></tr><tr><td>character</td><td></td><td>n.字符</td><td></td></tr><tr><td>current</td><td></td><td>n.当前的，电流</td><td></td></tr><tr><td>type</td><td></td><td>类型</td><td></td></tr><tr><td>screen</td><td></td><td>屏幕</td><td></td></tr><tr><td>specify</td><td></td><td>v.指定，规定，确定</td><td>[ˈspɛsəˌfaɪ]</td></tr><tr><td>move</td><td></td><td>移动</td><td></td></tr><tr><td>disk</td><td></td><td>n.磁盘，盘</td><td></td></tr><tr><td>text</td><td></td><td>文本</td><td></td></tr><tr><td>drive</td><td></td><td>v.驱动 n.驱动器</td><td></td></tr><tr><td>see</td><td></td><td>看</td><td></td></tr><tr><td>name</td><td></td><td>名字</td><td></td></tr><tr><td>record</td><td></td><td>记录</td><td></td></tr><tr><td>box</td><td></td><td>箱</td><td></td></tr><tr><td>database</td><td></td><td>n.数据库</td><td></td></tr><tr><td>help</td><td></td><td>帮助</td><td></td></tr><tr><td>memory</td><td></td><td>记忆</td><td></td></tr><tr><td>which</td><td></td><td>哪个</td><td></td></tr><tr><td>all</td><td></td><td>全部</td><td></td></tr><tr><td>on</td><td></td><td>开</td><td></td></tr><tr><td>copy</td><td></td><td>复制</td><td></td></tr><tr><td>shell</td><td></td><td>n.壳，外壳</td><td></td></tr><tr><td>delete</td><td></td><td>删除</td><td></td></tr><tr><td>enter</td><td></td><td>输入</td><td></td></tr><tr><td>margin</td><td></td><td>边距</td><td></td></tr><tr><td>mark</td><td></td><td>标记</td><td></td></tr><tr><td>also</td><td></td><td>也</td><td></td></tr><tr><td>do</td><td></td><td>做</td><td></td></tr><tr><td>information</td><td></td><td>信息</td><td></td></tr><tr><td>choose</td><td></td><td>选择</td><td></td></tr><tr><td>select</td><td></td><td>选择</td><td></td></tr><tr><td>group</td><td></td><td>组</td><td></td></tr><tr><td>first</td><td></td><td>第一</td><td></td></tr><tr><td>field</td><td></td><td>字段</td><td></td></tr><tr><td>procedure</td><td></td><td>n.过程，程序，工序</td><td>[prəˈsidʒɚ]</td></tr><tr><td>print</td><td></td><td>v.打印</td><td></td></tr><tr><td>return</td><td></td><td>返回</td><td></td></tr><tr><td>number</td><td></td><td>数字</td><td></td></tr><tr><td>selected</td><td></td><td>已选择</td><td></td></tr><tr><td>want</td><td></td><td>想要</td><td></td></tr><tr><td>window</td><td></td><td>窗口</td><td></td></tr><tr><td>message</td><td></td><td>信息</td><td></td></tr><tr><td>dialog</td><td></td><td>对话</td><td></td></tr><tr><td>example</td><td></td><td>例子</td><td></td></tr><tr><td>create</td><td></td><td>创造</td><td></td></tr><tr><td>insert</td><td></td><td>插入</td><td></td></tr><tr><td>related</td><td></td><td>相关的</td><td></td></tr><tr><td>item</td><td></td><td>项目</td><td></td></tr><tr><td>edit</td><td></td><td>编辑</td><td></td></tr><tr><td>marked</td><td></td><td>有记号的</td><td></td></tr><tr><td>area</td><td></td><td>区域</td><td></td></tr><tr><td>parameter</td><td></td><td>n.参数，参变量</td><td></td></tr><tr><td>then</td><td></td><td>然后</td><td></td></tr><tr><td>variable</td><td></td><td>变量</td><td></td></tr><tr><td>tab</td><td></td><td>选项卡</td><td></td></tr><tr><td>up</td><td></td><td>向上</td><td></td></tr><tr><td>string</td><td></td><td>字符串</td><td></td></tr><tr><td>each</td><td></td><td>每个</td><td></td></tr><tr><td>active</td><td></td><td>活动的</td><td></td></tr><tr><td>topic</td><td></td><td>n.题目，论题</td><td>[ˈtɑpɪk]</td></tr><tr><td>start</td><td></td><td>开始</td><td></td></tr><tr><td>mode</td><td></td><td>方式</td><td></td></tr><tr><td>selection</td><td></td><td>n.选择</td><td></td></tr><tr><td>function</td><td></td><td>函数</td><td></td></tr><tr><td>word</td><td></td><td>单词</td><td></td></tr><tr><td>make</td><td></td><td>制造</td><td></td></tr><tr><td>right</td><td></td><td>右边，正确</td><td></td></tr><tr><td>value</td><td></td><td>值</td><td></td></tr><tr><td>button</td><td></td><td>按钮</td><td></td></tr><tr><td>index</td><td></td><td>索引</td><td></td></tr><tr><td>without</td><td></td><td>没有，在。。之外</td><td></td></tr><tr><td>appear</td><td></td><td>显现</td><td></td></tr><tr><td>left</td><td></td><td>左边的</td><td></td></tr><tr><td>save</td><td></td><td>保存</td><td></td></tr><tr><td>next</td><td></td><td>接下来</td><td></td></tr><tr><td>off</td><td></td><td>关闭</td><td></td></tr><tr><td>following</td><td></td><td>以下的</td><td></td></tr><tr><td>control</td><td></td><td>控制</td><td></td></tr><tr><td>only</td><td></td><td>只，仅</td><td></td></tr><tr><td>user</td><td></td><td>用户</td><td></td></tr><tr><td>end</td><td></td><td>结束</td><td></td></tr><tr><td><strong>100</strong></td><td></td><td><strong>下行为第101个单词</strong></td><td></td></tr><tr><td>system</td><td></td><td>系统</td><td></td></tr><tr><td>contain</td><td></td><td>包含</td><td></td></tr><tr><td>time</td><td></td><td>时间</td><td></td></tr><tr><td>letter</td><td></td><td>字母，信</td><td></td></tr><tr><td>data</td><td></td><td>数据</td><td></td></tr><tr><td>setting</td><td></td><td>设置</td><td></td></tr><tr><td>desire</td><td></td><td>期望</td><td></td></tr><tr><td>position</td><td></td><td>定位</td><td></td></tr><tr><td>down</td><td></td><td>下落</td><td></td></tr><tr><td>task</td><td></td><td>任务</td><td></td></tr><tr><td>view</td><td></td><td>视图</td><td></td></tr><tr><td>switch</td><td></td><td>切换</td><td></td></tr><tr><td>include</td><td></td><td>包含</td><td></td></tr><tr><td>get</td><td></td><td>获取</td><td></td></tr><tr><td>default</td><td></td><td>默认</td><td></td></tr><tr><td>structure</td><td></td><td>结构</td><td></td></tr><tr><td>into</td><td></td><td>进入</td><td></td></tr><tr><td>path</td><td></td><td>路径</td><td></td></tr><tr><td>blank</td><td></td><td>空白</td><td></td></tr><tr><td>open</td><td></td><td>打开</td><td></td></tr><tr><td>add</td><td></td><td>添加</td><td></td></tr><tr><td>enable</td><td></td><td>启动，恢复正常操作</td><td></td></tr><tr><td>operation</td><td></td><td>操作</td><td></td></tr><tr><td>erase</td><td></td><td>擦除</td><td></td></tr><tr><td>filename</td><td></td><td>文件名</td><td></td></tr><tr><td>search</td><td></td><td>查找</td><td></td></tr><tr><td>another</td><td></td><td>另一个</td><td></td></tr><tr><td>last</td><td></td><td>最后</td><td></td></tr><tr><td>column</td><td></td><td>列</td><td></td></tr><tr><td>after</td><td></td><td>后面</td><td></td></tr><tr><td>prompt</td><td></td><td>提示</td><td></td></tr><tr><td>two</td><td></td><td>两个</td><td></td></tr><tr><td>execute</td><td></td><td>实行</td><td></td></tr><tr><td>about</td><td></td><td>关于</td><td></td></tr><tr><td>escape</td><td></td><td>逃避</td><td></td></tr><tr><td>error</td><td></td><td>错误</td><td></td></tr><tr><td>currently</td><td></td><td>目前</td><td></td></tr><tr><td>extension</td><td></td><td>扩充</td><td></td></tr><tr><td>same</td><td></td><td>相同的</td><td></td></tr><tr><td>status</td><td></td><td>状态</td><td></td></tr><tr><td>run</td><td></td><td>运行</td><td></td></tr><tr><td>argument</td><td></td><td>自变量，参数</td><td></td></tr><tr><td>statement</td><td></td><td>陈述</td><td></td></tr><tr><td>shift</td><td></td><td>转义</td><td></td></tr><tr><td>store</td><td></td><td>存储</td><td></td></tr><tr><td>scroll</td><td></td><td>滚动</td><td></td></tr><tr><td>substitution</td><td></td><td>替换，置换，代换</td><td></td></tr><tr><td>macro</td><td></td><td>宏</td><td></td></tr><tr><td>page</td><td></td><td>页面</td><td></td></tr><tr><td>quit</td><td></td><td>退出</td><td></td></tr><tr><td><strong>150</strong></td><td></td><td></td><td></td></tr></tbody></table><!-- |    |   |   |  ||    |   |   |  ||    |   |   |  | --><h1 id="vacant"><a href="#vacant" class="headerlink" title="vacant"></a>vacant</h1><p><strong>[ˈveikənt]</strong></p><p><strong>释义</strong>：adj 空的；（职位等）空缺的；茫然的</p><p><strong>例句</strong>：</p><p>The top post in the delegation was still <strong>vacant</strong>.<br>代表团中的最高职位仍是空缺的</p><p>A job fell vacant in ther accounting department<br>财会部出现了一个空缺</p><p><strong>临摹</strong>：<br>vacant</p><h1 id="linen"><a href="#linen" class="headerlink" title="linen"></a>linen</h1><p>[ˈlinin]<br>n 亚麻布；亚麻布制品；家庭日用织品</p><p>I’never seen a company washing dirty linen  in public this way<br>我从未见过一个公司这样揭自己的短</p><p>Flax is used for making linen<br>亚麻用来织亚麻布</p><p>linen </p><h1 id="hectic"><a href="#hectic" class="headerlink" title="hectic"></a>hectic</h1><p>[ˈhektɪk]<br>adj 紧张忙碌的；忙乱的</p><p>I spend a very hectic Sunday<br>我度过了一个忙乱的星期天</p><p>hectic</p><h1 id="fossil"><a href="#fossil" class="headerlink" title="fossil"></a>fossil</h1><p>[ˈfɔsl]<br>n 化石</p><p>At this distance of time  it is difficult to date the fossil<br>时间隔得这么久了，很难确定这化石的年代</p><p>fossil</p><h1 id="modish"><a href="#modish" class="headerlink" title="modish"></a>modish</h1><p>[ˈməʊdɪʃ]</p><p>adj 时髦的</p><p>She is always crazy at modish things<br>她疯狂热爱流行物品</p><p>modish</p><h1 id="distraction"><a href="#distraction" class="headerlink" title="distraction"></a>distraction</h1><p>[dɪˈstrækʃən]<br>n 娱乐；消遣；分心的事物</p><p>Let’s invite her to the disco ,she needs distraction<br>我们请她去迪斯科舞会吧 她需要散散心</p><p>distraction</p><h1 id="inapt"><a href="#inapt" class="headerlink" title="inapt"></a>inapt</h1><p>[ɪnˈæpt]</p><p>adj 不适当的，不合宜的，不恰当的</p><p>He always makes inapt remarks<br>她总是说些不适宜的话</p><p>inapt</p><h1 id="intact"><a href="#intact" class="headerlink" title="intact"></a>intact</h1><p>[inˈtækt]<br>adj 完整无缺的；未受损伤的</p><p>He can scarcely survive this scandal with his reputation intact<br>他经此丑闻名誉很难不受损</p><p>intact</p><h1 id="spotlight"><a href="#spotlight" class="headerlink" title="spotlight"></a>spotlight</h1><p>[ˈspɔtlait]<br>n 聚光灯；众人瞩目的焦点</p><p>This week the spotlight is  on the world of fashion<br>本周引人注目的是时装界</p><p>spotlight</p><h1 id="almond"><a href="#almond" class="headerlink" title="almond"></a>almond</h1><p>[ˈɑ:mənd]<br>n 杏仁</p><p>almond</p><h1 id="swerve"><a href="#swerve" class="headerlink" title="swerve"></a>swerve</h1><p>[swə:v]<br>v 转向，突然改变方向</p><p>Nothing will swerve him from his aims<br>什么也不能使他改变目标</p><p>swerve</p><h1 id="readily"><a href="#readily" class="headerlink" title="readily"></a>readily</h1><p>[ˈredili]<br>adv 容易地；乐意地；很快地；轻松地</p><p>readily</p><h1 id="federal"><a href="#federal" class="headerlink" title="federal"></a>federal</h1><p>[ˈfedərəl]<br>adj 联邦的；与联邦政府有关的</p><p>federal</p><h1 id="rig"><a href="#rig" class="headerlink" title="rig"></a>rig</h1><p>[rɪɡ]<br>v 操纵<br>n 船桅的装置</p><h1 id="stimulate"><a href="#stimulate" class="headerlink" title="stimulate"></a>stimulate</h1><p>vt 刺激；激励；促使</p><p>stimulate</p><h1 id="chronology"><a href="#chronology" class="headerlink" title="chronology"></a>chronology</h1><p>[krəˈnɔlədʒi:]<br>n 年代顺序</p><p>chron 时间 ology 学科</p><p>chronology</p><h1 id="crease"><a href="#crease" class="headerlink" title="crease"></a>crease</h1><p>[kri:s]<br>n 褶痕，皱痕</p><p>crease</p><h1 id="voucher"><a href="#voucher" class="headerlink" title="voucher"></a>voucher</h1><p>[ˈvaʊtʃə]</p><p>n 证人；保证人；<strong>代金券</strong>，票券</p><p>voucher</p><h1 id="perscription"><a href="#perscription" class="headerlink" title="perscription"></a>perscription</h1><p>[prisˈkripʃən]<br>n 处方；药方；指示，规定</p><p>prescription</p><h1 id="counsel"><a href="#counsel" class="headerlink" title="counsel"></a>counsel</h1><p>[ˈkaunsəl]<br>vt 建议 劝告</p><p>counsel</p><h1 id="indigenous"><a href="#indigenous" class="headerlink" title="indigenous"></a>indigenous</h1><p>[ɪnˈdɪdʒənəs]<br>adj 土产的 本地的</p><p>每个国家都有其自身的文化传统<br>Each country has its own indigenous cultural tradition</p><h1 id="applaud"><a href="#applaud" class="headerlink" title="applaud"></a>applaud</h1><p>[əˈplɔ:d]<br>v 鼓掌； 赞赏</p><p>applaud</p><h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><p>[fail]<br>n 文件夹 ；文档<br>v 把…归档</p><h1 id="precarious"><a href="#precarious" class="headerlink" title="precarious"></a>precarious</h1><p>[priˈkɛəriəs]</p><p>adj 危险的<br>precarious</p><h1 id="gracious"><a href="#gracious" class="headerlink" title="gracious"></a>gracious</h1><p>[ˈɡreiʃəs]<br>adj 和蔼的 慈祥的<br>gracious</p><h1 id="ambition"><a href="#ambition" class="headerlink" title="ambition"></a>ambition</h1><p>[æmˈbiʃən]<br>n 野心，抱负</p><h1 id="denote"><a href="#denote" class="headerlink" title="denote"></a>denote</h1><p>[diˈnəut]<br>vt 预示 表示</p><h1 id="deceive"><a href="#deceive" class="headerlink" title="deceive"></a>deceive</h1><p>[diˈsi:v]<br>v 欺骗</p><h1 id="versed"><a href="#versed" class="headerlink" title="versed"></a>versed</h1><p>[vɜ:st]<br>adj 熟练的</p><h1 id="outfit"><a href="#outfit" class="headerlink" title="outfit"></a>outfit</h1><p>[ˈautfit]<br>n 全套服装</p><h1 id="amphibian"><a href="#amphibian" class="headerlink" title="amphibian"></a>amphibian</h1><p>[æmˈfɪbi:ən]<br>n 两栖动物 水陆两用车<br>amphibian</p><h1 id="unconditional"><a href="#unconditional" class="headerlink" title="unconditional"></a>unconditional</h1><p>[ˌʌnkənˈdɪʃənəl]<br>adj 无条件的</p><h1 id="refine"><a href="#refine" class="headerlink" title="refine"></a>refine</h1><p>[riˈfain]<br>v 精炼 提纯 改进</p><h1 id="clamor"><a href="#clamor" class="headerlink" title="clamor"></a>clamor</h1><p>[ˈklæmə]<br>n 喧闹</p><h1 id="intermittent"><a href="#intermittent" class="headerlink" title="intermittent"></a>intermittent</h1><p>[ˌɪntəˈmitənt]<br>adj 断断续续的</p><h1 id="veto"><a href="#veto" class="headerlink" title="veto"></a>veto</h1><p>[ˈvi:təu]<br>v 否决 禁止</p><h1 id="decree"><a href="#decree" class="headerlink" title="decree"></a>decree</h1><p>[diˈkri:]<br>v 命令 规定</p><h1 id="diversify"><a href="#diversify" class="headerlink" title="diversify"></a>diversify</h1><p>[daiˈvə:sifai]<br>v 使多样化</p><h1 id="constrict"><a href="#constrict" class="headerlink" title="constrict"></a>constrict</h1><p>[kənˈstrikt]<br>vt 限制</p><h1 id="concrete"><a href="#concrete" class="headerlink" title="concrete"></a>concrete</h1><p>[ˈkɔnkri:t]<br>adj 混凝土的 具体的</p><h1 id="womb"><a href="#womb" class="headerlink" title="womb"></a>womb</h1><p>&#x2F;wuːm&#x2F;<br>n 子宫<br>from the womb to the tomb<br>从生到死</p><h1 id="impact"><a href="#impact" class="headerlink" title="impact"></a>impact</h1><p>&#x2F;‘ɪmpækt&#x2F;<br>n 影响，作用，冲击<br>v 对···产生影响</p><h1 id="blame"><a href="#blame" class="headerlink" title="blame"></a>blame</h1><p>&#x2F;bleɪm&#x2F;<br>v 责备<br>n 责任</p><p>blame sb for sth 因某事责备某人<br>blame sth to sb 把某事怪到某人头上</p><h1 id="affect"><a href="#affect" class="headerlink" title="affect"></a>affect</h1><p>&#x2F;ə’fekt&#x2F;<br>v 影响</p><p>affect动词 effect名词</p><h1 id="acid"><a href="#acid" class="headerlink" title="acid"></a>acid</h1><p>&#x2F;‘æsɪd&#x2F;<br>n 酸<br>adj 酸的；尖刻的 刻薄的</p><p>acid fruit 酸水果</p><h1 id="determine"><a href="#determine" class="headerlink" title="determine"></a>determine</h1><p>&#x2F;dɪ’tɜːmɪn&#x2F;</p><p>v 下决心 确定 查明</p><h1 id="evolution"><a href="#evolution" class="headerlink" title="evolution"></a>evolution</h1><p>&#x2F;ˌevəˈluːʃn&#x2F;</p><p>n 进化 发展 演变</p><p>evolution 和revolution 前者是慢慢的进化和发展 后者是较快的变化和改革 革命</p><h1 id="preference"><a href="#preference" class="headerlink" title="preference"></a>preference</h1><p>&#x2F;‘prefrəns&#x2F;<br>n 喜好 偏爱 </p><p>have a preference for 对。。偏爱</p><h1 id="flavour"><a href="#flavour" class="headerlink" title="flavour"></a>flavour</h1><p>&#x2F;‘fleɪvər&#x2F;<br>n 味道<br>v 调味</p><p>the flavour of     …的味道</p><h1 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h1><p>&#x2F;‘siːkwəns&#x2F;</p><p>n 一系列 一连串 顺序<br>v 安排。。的顺序</p><p>Yesterday I was clever, so I wanted to change the world. Today I am wise, so I am changing myself.<br>昨天的我聪明，所以我想改变世界；今天的我明智，所以我选择改变自己。</p><h1 id="indicate"><a href="#indicate" class="headerlink" title="indicate"></a>indicate</h1><p>&#x2F;‘ɪndɪkeɪt&#x2F;<br>v 显示，表明 ；象征</p><h1 id="disrupt"><a href="#disrupt" class="headerlink" title="disrupt"></a>disrupt</h1><p>&#x2F;dɪs’rʌpt&#x2F;<br>v 使中断；扰乱</p><h1 id="cue"><a href="#cue" class="headerlink" title="cue"></a>cue</h1><p>&#x2F;kjuː&#x2F;<br>n 暗示 提示</p><h1 id="event"><a href="#event" class="headerlink" title="event"></a>event</h1><p>&#x2F;ɪ’vent&#x2F;<br>n 事件</p><h1 id="occur"><a href="#occur" class="headerlink" title="occur"></a>occur</h1><p>&#x2F;ə’kɜːr&#x2F;<br>v 发生</p><p>occur指“想到”时，后面跟介词to。<br>It occurred to me to visit my teacher.<br>我想到要去拜访我的老师。</p><h1 id="vision"><a href="#vision" class="headerlink" title="vision"></a>vision</h1><p>&#x2F;‘vɪʒn&#x2F;<br>n 视觉 远见</p><h1 id="approximate"><a href="#approximate" class="headerlink" title="approximate"></a>approximate</h1><p>&#x2F;ə’prɑːksɪmət&#x2F;<br>adj 大约的 近似</p><p>The approximate cost was 100 dollars.<br>花费大概是100美元。</p><h1 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h1><p>&#x2F;kəm’baɪn&#x2F;<br>v 结合</p><h1 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h1><p>&#x2F;‘sɪɡnəl&#x2F;</p><p>n 信号 暗号<br>v 发信号<br>adj 显著的</p><h1 id="illuminate"><a href="#illuminate" class="headerlink" title="illuminate"></a>illuminate</h1><p>&#x2F;ɪ’luːmɪneɪt&#x2F;</p><p>v 照明；阐述 说明</p><h1 id="behave"><a href="#behave" class="headerlink" title="behave"></a>behave</h1><p>&#x2F;bɪ’heɪv&#x2F;</p><p>v 表现；守规矩 举止得体<br>behavior 举止 行为 态度 反应</p><h1 id="massive"><a href="#massive" class="headerlink" title="massive"></a>massive</h1><p>&#x2F;‘mæsɪv&#x2F;<br>adj 巨大的 大量的</p><h1 id="formulate"><a href="#formulate" class="headerlink" title="formulate"></a>formulate</h1><p>&#x2F;‘fɔːrmjuleɪt&#x2F;</p><p>n 制定 规划 构想</p><h1 id="bid"><a href="#bid" class="headerlink" title="bid"></a>bid</h1><p>&#x2F;bɪd&#x2F;<br>n 出价 投标<br>v 出价 投标</p><p>bid for 为xx投标</p><h1 id="disapprove"><a href="#disapprove" class="headerlink" title="disapprove"></a>disapprove</h1><p>&#x2F;ˌdɪsə’pruːv&#x2F;</p><p>v 反对</p><p>disapprove of sth</p><h1 id="pulley"><a href="#pulley" class="headerlink" title="pulley"></a>pulley</h1><p>&#x2F;‘pʊli&#x2F;</p><p>n 滑轮 ；滑车<br>adj 捏磨成粉的</p><h1 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h1><p>&#x2F;flʌʃ&#x2F;<br>v 冲洗<br>n 脸红<br>adj 完全齐平的</p><p>be flushed with 因xx脸红<br>be flush with 与xx平齐</p><h1 id="county"><a href="#county" class="headerlink" title="county"></a>county</h1><p>&#x2F;‘kaʊnti&#x2F;<br>n 县</p><p>country 国家</p><h1 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h1><p>&#x2F;‘praɪmeri&#x2F;</p><p>adj 首要的 最初的 初级的<br>n 原色 初选者</p><h1 id="blade"><a href="#blade" class="headerlink" title="blade"></a>blade</h1><p>&#x2F;bleɪd&#x2F;<br>n 刀片；桨叶；草叶<br>shoulder blade 肩胛骨</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法基础题库</title>
    <link href="/2024/10/21/Front-end/JavaScript/TheoreticalKnowledge/"/>
    <url>/2024/10/21/Front-end/JavaScript/TheoreticalKnowledge/</url>
    
    <content type="html"><![CDATA[<h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>时间复杂度是对算法执行过程中基本操作（例如比较、赋值等）执行次数的量度。它衡量了输入数据规模（通常以 n 表示）增加时，算法运行时间增长的趋势。</p><h3 id="常见的表示"><a href="#常见的表示" class="headerlink" title="常见的表示"></a>常见的表示</h3><ol><li><h4 id="常数时间复杂度O-1"><a href="#常数时间复杂度O-1" class="headerlink" title="常数时间复杂度O(1)"></a>常数时间复杂度O(1)</h4><ol><li>无论输入规模多大，算法的运行时间都是恒定的。</li><li>示例：访问数组中的某个元素。 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">// O(1)</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="线性时间复杂度-O-n"><a href="#线性时间复杂度-O-n" class="headerlink" title="线性时间复杂度 O(n)"></a>线性时间复杂度 O(n)</h4><ol><li>算法的运行时间随着输入规模的线性增长。</li><li>示例：遍历一个长度为 n 的数组。 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(item)); <span class="hljs-comment">// O(n)</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="平方时间复杂度-O-n-2"><a href="#平方时间复杂度-O-n-2" class="headerlink" title="平方时间复杂度 O(n^2)"></a>平方时间复杂度 O(n^2)</h4><ol><li>运行时间随着输入规模的平方成比例增长，通常出现在嵌套循环中。</li><li>示例：双重循环遍历二维数组。 <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">let arr = <span class="hljs-comment">[<span class="hljs-comment">[1, 2]</span>, <span class="hljs-comment">[3, 4]</span>]</span>;<br>for (let i = 0; i &lt; arr.length; i++) &#123;<br>  for (let j = 0; j &lt; arr<span class="hljs-comment">[i]</span>.length; j++) &#123;<br>    console.log(arr<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>); // O(n^2)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="对数时间复杂度-O-log-n"><a href="#对数时间复杂度-O-log-n" class="headerlink" title="对数时间复杂度 O(log n)"></a>对数时间复杂度 O(log n)</h4><ol><li>运行时间随着输入规模的对数增加，通常出现在分治算法中，如二分查找。</li><li>示例：二分查找。 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">binarySearch</span>(<span class="hljs-params">arr, target</span>) &#123;<br>  let low = <span class="hljs-number">0</span>;<br>  let high = arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>    let <span class="hljs-built_in">mid</span> = Math.<span class="hljs-built_in">floor</span>((low + high) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (arr[<span class="hljs-built_in">mid</span>] === target) <span class="hljs-keyword">return</span> <span class="hljs-built_in">mid</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[<span class="hljs-built_in">mid</span>] &lt; target) low = <span class="hljs-built_in">mid</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> high = <span class="hljs-built_in">mid</span> - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// O(log n)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="线性对数时间复杂度-O-n-log-n"><a href="#线性对数时间复杂度-O-n-log-n" class="headerlink" title="线性对数时间复杂度 O(n log n)"></a>线性对数时间复杂度 O(n log n)</h4><ol><li>运行时间是输入规模和对数的乘积，通常出现在高效排序算法中，如归并排序、快速排序</li><li>示例：归并排序。</li></ol></li><li><h4 id="指数时间复杂度-O-2-n"><a href="#指数时间复杂度-O-2-n" class="headerlink" title="指数时间复杂度 O(2^n)"></a>指数时间复杂度 O(2^n)</h4><ol><li>运行时间随着输入规模的指数倍增长，通常出现在递归算法中，如解决子集问题或斐波那契数列的递归计算。</li><li>示例：斐波那契数列递归计算。</li></ol></li><li><h4 id="常见时间复杂度的增长速度比较（从小到大）"><a href="#常见时间复杂度的增长速度比较（从小到大）" class="headerlink" title="常见时间复杂度的增长速度比较（从小到大）"></a>常见时间复杂度的增长速度比较（从小到大）</h4><ol><li>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(2^n)</li></ol></li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>空间复杂度是算法在运行过程中占用的内存空间的量度。它衡量了输入数据规模增加时，算法所需的额外存储空间的增长情况。</p><h3 id="常见的空间复杂度表示"><a href="#常见的空间复杂度表示" class="headerlink" title="常见的空间复杂度表示"></a>常见的空间复杂度表示</h3><ol><li>O(1)：算法所需的额外空间是常量，与输入规模无关。<ol><li>示例：只使用常量个变量进行操作的算法。 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(a, b) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">a</span> + b; // O(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>O(n)：算法所需的额外空间与输入规模成线性关系。<ol><li>示例：创建一个新数组来存储与输入规模相同的元素。 <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-keyword">map</span>(<span class="hljs-type">item</span> =&gt; <span class="hljs-type">item</span> * <span class="hljs-number">2</span>); // O(n)<br></code></pre></td></tr></table></figure></li></ol></li><li>O(n^2)：算法所需的空间随着输入规模的平方增长，通常出现在涉及二维数组等数据结构时。</li></ol><h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h3 id="解析示例"><a href="#解析示例" class="headerlink" title="解析示例"></a>解析示例</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br><br>输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br><br>输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 双循环暴力拆解</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">twoSumByFor</span>(<span class="hljs-params">nums, target</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.<span class="hljs-property">length</span>; j++) &#123;<br>            <span class="hljs-comment">// 不包括自己</span><br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] === target &amp;&amp; i !== j) &#123;<br>              <span class="hljs-keyword">return</span> [i, j];<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> [];<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  利用new map 存储健值对</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">twoSumByMap</span>(<span class="hljs-params">nums, target</span>) &#123;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (map.<span class="hljs-title function_">has</span>(target - nums[i])) &#123;<br>      <span class="hljs-keyword">return</span> [map.<span class="hljs-title function_">get</span>(target - nums[i]), i];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map.<span class="hljs-title function_">set</span>(nums[i], i);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h3 id="解析示例-1"><a href="#解析示例-1" class="headerlink" title="解析示例"></a>解析示例</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[2,4,3]</span>, l2 = <span class="hljs-comment">[5,6,4]</span><br>输出：<span class="hljs-comment">[7,0,8]</span><br>解释：342 + 465 = 807.<br><br>输入：l1 = <span class="hljs-comment">[0]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br><br>输入：l1 = <span class="hljs-comment">[9,9,9,9,9,9,9]</span>, l2 = <span class="hljs-comment">[9,9,9,9]</span><br>输出：<span class="hljs-comment">[8,9,9,9,0,0,0,1]</span><br></code></pre></td></tr></table></figure><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p class="note note-info">欲知后事如何，且听下回分解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tailwindcss</title>
    <link href="/2024/09/25/Front-end/CSS/tailwindcss/"/>
    <url>/2024/09/25/Front-end/CSS/tailwindcss/</url>
    
    <content type="html"><![CDATA[<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>Tailwind CSS 的工作原理是扫描所有 HTML 文件、JavaScript 组件以及模板中的 CSS 类（class）名，然后生成相应的样式代码并写入到一个静态 CSS 文件中。</p><p><a href="https://www.tailwindcss.cn/docs/installation">官网</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h4><ol><li>npm安装 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -D tailwindcss<br>npx tailwindcss init<br></code></pre></td></tr></table></figure></li><li>配置模板文件的路径,创建 <code>tailwind.config.js</code> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br>module.<span class="hljs-attr">exports</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  content:</span> [<span class="hljs-string">&quot;./src/**/*.&#123;html,js&#125;&quot;</span>],<br><span class="hljs-symbol">  theme:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    extend:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>,<br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-symbol">  plugins:</span> [],<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>在你的主 CSS 文件中通过 @tailwind 指令添加每一个 Tailwind 功能模块,创建src&#x2F;input.css  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@tailwind</span> base;<br><span class="hljs-variable">@tailwind</span> components;<br><span class="hljs-variable">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure></li><li>运行cli <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npx tailwindcss -<span class="hljs-selector-tag">i</span> ./<span class="hljs-attribute">src</span>/<span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.css</span> -o ./<span class="hljs-attribute">src</span>/output<span class="hljs-selector-class">.css</span> <span class="hljs-attr">--watch</span><br></code></pre></td></tr></table></figure></li><li>html 实例 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./output.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-3xl font-bold underline&quot;</span>&gt;</span><br>    Hello world!<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ol><li>script 引入 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-3xl font-bold underline&quot;</span>&gt;</span><br>    Hello world!<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>自定义配置 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    tailwind.<span class="hljs-property">config</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">theme</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">extend</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">colors</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">clifford</span>: <span class="hljs-string">&#x27;#da373d&#x27;</span>,</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-3xl font-bold underline text-clifford&quot;</span>&gt;</span><br>    Hello world!<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>自定义css <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/tailwindcss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@layer</span> utilities &#123;</span><br><span class="language-css">      <span class="hljs-selector-class">.content-auto</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">content-visibility</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lg:content-auto&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>    customCSS<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用插件 (表单,排版) <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prose&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="编辑器设置"><a href="#编辑器设置" class="headerlink" title="编辑器设置"></a>编辑器设置</h3><p>Visual Studio Code 安装官方 <strong>Tailwind CSS IntelliSense</strong> 扩展</p><p class="note note-info">欲知后事如何，且听下回分解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Three.js</title>
    <link href="/2024/09/10/Front-end/JavaScript/threeJs/"/>
    <url>/2024/09/10/Front-end/JavaScript/threeJs/</url>
    
    <content type="html"><![CDATA[<p><a href="https://threejs.org/">three.js官网</a></p><h3 id="启动three-js"><a href="#启动three-js" class="headerlink" title="启动three.js"></a>启动three.js</h3><ol><li>打开 <a href="https://github.com/mrdoob/three.js">https://github.com/mrdoob/three.js</a></li><li>选择clone 或者 下载压缩包</li><li>安装： 使用npm &#x2F; cnpm &#x2F; pnpm &#x2F; yarn + install 安装<ol><li>puppeteer可能安装缓慢 建议单独安装 <code>cnpm install puppeteer</code></li></ol></li><li>启动： <code>npm run start</code></li><li>启动后在本地浏览器访问会出现文件目录<ol><li>docs&#x2F; 打开为文档介绍，可调整语言，默认为en</li><li>editor&#x2F; 编译器，可进行项目的可视化编辑</li></ol></li></ol><h3 id="脚手架创建项目"><a href="#脚手架创建项目" class="headerlink" title="脚手架创建项目"></a>脚手架创建项目</h3><ol><li>使用vite<ol><li><code>npm init vite@latest</code></li><li>输入项目名称</li><li>选择 Vanilla 即不指定框架 使用原生方式开发</li><li>选择JS&#x2F;TS 开始选择JS简单化处理</li><li><code>cnpm install</code>安装</li><li>安装three.js <code>cnpm install three</code></li><li><code>yarn dev</code> 启动项目</li></ol></li><li>three.js创建第一个3d页面<br>css<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">canvas</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br></code></pre></td></tr></table></figure>JS<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span><br><br><span class="hljs-comment">// 创建场景</span><br><span class="hljs-keyword">const</span> secene = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>();<br><br><span class="hljs-comment">// 创建相机</span><br><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(<br>  <span class="hljs-number">45</span>, <span class="hljs-comment">// 视角 越大视野越大看到的越多</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-comment">// 宽高比</span><br>  <span class="hljs-number">0.1</span>, <span class="hljs-comment">// 近平面</span><br>  <span class="hljs-number">1000</span> <span class="hljs-comment">// 远平面</span><br>);<br><br><span class="hljs-comment">// 创建渲染器</span><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>();<br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br><br><span class="hljs-comment">// 创建几何体</span><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 创建材质</span><br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span><br>&#125;);<br><span class="hljs-comment">// 创建网格</span><br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(geometry, material);<br><br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-title function_">add</span>(cube);<br><br><span class="hljs-comment">// 设置相机位置</span><br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 默认看向圆点</span><br>camera.<span class="hljs-title function_">lookAt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 渲染函数 </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>  <span class="hljs-comment">// 旋转</span><br>  cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.01</span>;<br>  cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.01</span>;<br>  <span class="hljs-comment">// 渲染</span><br>  renderer.<span class="hljs-title function_">render</span>(secene, camera);<br>&#125;<br><span class="hljs-title function_">animate</span>();<br></code></pre></td></tr></table></figure></li></ol><h3 id="浏览器是否兼容WebGL"><a href="#浏览器是否兼容WebGL" class="headerlink" title="浏览器是否兼容WebGL"></a>浏览器是否兼容WebGL</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> WebGL from <span class="hljs-string">&#x27;three/addons/capabilities/WebGL.js&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (WebGL.isWebGL2Available()) &#123;<br>  <span class="hljs-comment">// Initiate function or other initializations here</span><br>  animate();<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">warning</span> = WebGL.getWebGL2ErrorMessage();<br>  document.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>).appendChild(<span class="hljs-keyword">warning</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="坐标辅助器与轨道控制器"><a href="#坐标辅助器与轨道控制器" class="headerlink" title="坐标辅助器与轨道控制器"></a>坐标辅助器与轨道控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span><br><span class="hljs-comment">// 导入轨道控制器</span><br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">OrbitControls</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;three/examples/jsm/controls/OrbitControls.js&quot;</span><br><br><span class="hljs-comment">// 创建场景</span><br><span class="hljs-keyword">const</span> secene = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>();<br><br><span class="hljs-comment">// 创建相机</span><br><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(<br>  <span class="hljs-number">45</span>, <span class="hljs-comment">// 视角 越大视野越大看到的越多</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-comment">// 宽高比</span><br>  <span class="hljs-number">0.1</span>, <span class="hljs-comment">// 近平面</span><br>  <span class="hljs-number">1000</span> <span class="hljs-comment">// 远平面</span><br>);<br><br><span class="hljs-comment">// 创建渲染器</span><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>();<br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br><br><span class="hljs-comment">// 创建几何体</span><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 创建材质</span><br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span><br>&#125;);<br><span class="hljs-comment">// 创建网格</span><br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(geometry, material);<br><br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-title function_">add</span>(cube);<br><br><span class="hljs-comment">// 设置相机位置</span><br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;<br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">2</span>;<br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 默认看向圆点</span><br>camera.<span class="hljs-title function_">lookAt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 添加世界坐标辅助器</span><br><span class="hljs-keyword">const</span> axesHelper = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">AxesHelper</span>(<span class="hljs-number">5</span>);<br>secene.<span class="hljs-title function_">add</span>(axesHelper);<br><br><span class="hljs-comment">// 添加轨道控制器</span><br><span class="hljs-comment">// const controls = new OrbitControls(camera, renderer.domElement);</span><br><span class="hljs-comment">// 换绑定对象为body 注意body需设置宽高</span><br><span class="hljs-keyword">const</span> controls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrbitControls</span>(camera, <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br><br><span class="hljs-comment">// 设置带阻尼的惯性</span><br>controls.<span class="hljs-property">enableDamping</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 设置阻尼系数</span><br>controls.<span class="hljs-property">dampingFactor</span> = <span class="hljs-number">0.05</span>;<br><span class="hljs-comment">// 设置自动旋转</span><br>controls.<span class="hljs-property">autoRotate</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 渲染函数 </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params"></span>) &#123;<br>  controls.<span class="hljs-title function_">update</span>();<br>  <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>  <span class="hljs-comment">// 旋转</span><br>  <span class="hljs-comment">// cube.rotation.x += 0.01;</span><br>  <span class="hljs-comment">// cube.rotation.y += 0.01;</span><br>  <span class="hljs-comment">// 渲染</span><br>  renderer.<span class="hljs-title function_">render</span>(secene, camera);<br>&#125;<br><span class="hljs-title function_">animate</span>();<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h3><ol><li>三维向量（Vector3）<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">// x轴位移<br>// <span class="hljs-built_in">cube</span>.<span class="hljs-built_in">position</span>.x = <span class="hljs-number">2</span>; 等同于下列表达式<br><span class="hljs-built_in">cube</span>.<span class="hljs-built_in">position</span>.set(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><img src="/img/js/threeJs/threeJs-weiyi.jpg"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 父元素材质-红色</span><br><span class="hljs-keyword">const</span> parentMaterial = <span class="hljs-keyword">new</span> THREE.MeshBasicMaterial(&#123;<br>  color: <span class="hljs-number">0xff0000</span><br>&#125;);<br><span class="hljs-comment">// 将父元素添加到场景中</span><br><span class="hljs-keyword">let</span> parentCube = <span class="hljs-keyword">new</span> THREE.Mesh(geometry, parentMaterial);<br><span class="hljs-comment">// 父元素里添加cube</span><br>parentCube.<span class="hljs-keyword">add</span>(cube);<br><span class="hljs-comment">// 父元素位置</span><br>parentCube.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">-3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// x轴位移</span><br><span class="hljs-comment">// cube.position.x = 2; 等同于下列表达式</span><br>cube.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-keyword">add</span>(parentCube);<br></code></pre></td></tr></table></figure></li></ol><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><ol><li>scale （官方文档对应位置&#x2F;docs&#x2F;#api&#x2F;zh&#x2F;core&#x2F;Object3D）<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-comment">// 放大立方体, 都放大两倍</span><br><span class="hljs-built_in">cube</span>.<span class="hljs-built_in">scale</span>.set(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 单独放大父元素 子元素也会放大</span><br>parentCube.<span class="hljs-built_in">scale</span>.set(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><img src="/img/js/threeJs/threeJs-suofang.jpg"></li></ol><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><ol><li>rotation 使用 欧拉角（Euler）参数形式<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-comment">// 子元素绕着x轴旋转</span><br><span class="hljs-built_in">cube</span>.rotation.x = Math.<span class="hljs-literal">PI</span> / <span class="hljs-number">4</span>;<br><span class="hljs-comment">//  父元素旋转后 子元素也会叠加</span><br>parentCube.rotation.x = Math.<span class="hljs-literal">PI</span> / <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><img src="/img/js/threeJs/threeJs-xuanzhuan.jpg"></li></ol><h3 id="画布自适应窗口的变化与全屏控制"><a href="#画布自适应窗口的变化与全屏控制" class="headerlink" title="画布自适应窗口的变化与全屏控制"></a>画布自适应窗口的变化与全屏控制</h3><ol><li>自适应<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// 监听窗口变化</span><br><span class="hljs-keyword">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>,()=&gt;&#123;<br>  <span class="hljs-comment">// 重置渲染器宽高比</span><br>  <span class="hljs-keyword">renderer</span>.setSize(<span class="hljs-keyword">window</span>.innerWidth, <span class="hljs-keyword">window</span>.innerHeight);<br>  <span class="hljs-comment">// 重置相机宽高比</span><br>  <span class="hljs-keyword">camera</span>.aspect = <span class="hljs-keyword">window</span>.innerWidth / <span class="hljs-keyword">window</span>.innerHeight;<br>  <span class="hljs-comment">// 更新相机投影矩阵</span><br>  <span class="hljs-keyword">camera</span>.updateProjectionMatrix();<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>点击全屏<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全屏需要注意这里不能是document.body</span><br><span class="hljs-keyword">const</span> controls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrbitControls</span>(camera, renderer.<span class="hljs-property">domElement</span>);<br><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);<br>btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;点击全屏&quot;</span>;<br>btn.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>btn.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">&quot;10px&quot;</span>;<br>btn.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;10px&quot;</span><br>btn.<span class="hljs-property">style</span>.<span class="hljs-property">zIndex</span> = <span class="hljs-string">&quot;999&quot;</span><br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 全屏</span><br>  renderer.<span class="hljs-property">domElement</span>.<span class="hljs-title function_">requestFullscreen</span>();<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(btn);<br></code></pre></td></tr></table></figure></li></ol><h3 id="GUI调试开发3D效果"><a href="#GUI调试开发3D效果" class="headerlink" title="GUI调试开发3D效果"></a>GUI调试开发3D效果</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 导入lil.gui<br><span class="hljs-keyword">import</span> &#123;<br>  GUI<br>&#125; <span class="hljs-keyword">from</span> &quot;three/examples/jsm/libs/lil-gui.module.min.js&quot;<br><br>let eventObj = &#123;<br>  Fullscreen: <span class="hljs-keyword">function</span> () &#123;<br>    renderer.domElement.requestFullscreen();<br>  &#125;<br>&#125;<br>// 创建GUI<br>const gui = <span class="hljs-built_in">new</span> GUI();<br>// 添加按钮<br>gui.<span class="hljs-keyword">add</span>(eventObj, <span class="hljs-string">&#x27;Fullscreen&#x27;</span>).name(<span class="hljs-string">&#x27;全屏&#x27;</span>);<br><br>// 控制立方体的位置<br>gui.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-number">-5</span>, <span class="hljs-number">5</span>).name(<span class="hljs-string">&#x27;立方体x轴位置&#x27;</span>);<br><br>// 链式<br>gui.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;x&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体x轴位置&#x27;</span>);<br>gui.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;y&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体y轴位置&#x27;</span>);<br>gui.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;z&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体z轴位置&#x27;</span>);<br><br>// 类似文件夹<br>let folder = gui.addFolder(<span class="hljs-string">&#x27;立方体位置&#x27;</span>);<br>// 改变事件<br>folder.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;x&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体x轴位置&#x27;</span>).onChange((val) =&gt; &#123;<br>  console.log(`output-&gt;x val`, val)<br>&#125;);<br>// 结束后才打印<br>folder.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;y&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体y轴位置&#x27;</span>).onFinishChange((val) =&gt; &#123;<br>  console.log(`output-&gt;y val`, val)<br>&#125;);<br>folder.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">cube</span>.position, <span class="hljs-string">&#x27;z&#x27;</span>).min(<span class="hljs-number">-10</span>).max(<span class="hljs-number">10</span>).step(<span class="hljs-number">1</span>).name(<span class="hljs-string">&#x27;立方体z轴位置&#x27;</span>);<br><br>// 设置父元素材质为线框模式(注：正式代码环境下需放置至渲染之前)<br>parentMaterial.wireframe = <span class="hljs-keyword">true</span>;<br><br>// 改变<span class="hljs-type">boolean</span><br>gui.<span class="hljs-keyword">add</span>(parentMaterial, <span class="hljs-string">&#x27;wireframe&#x27;</span>).name(<span class="hljs-string">&#x27;父元素线框模式&#x27;</span>);<br><br>// 调试颜色<br>let colorParams = &#123;<br>  cubeColor: <span class="hljs-string">&#x27;#00ff00&#x27;</span><br>&#125;;<br>gui.addColor(colorParams, <span class="hljs-string">&#x27;cubeColor&#x27;</span>).name(<span class="hljs-string">&#x27;立方体颜色&#x27;</span>).onChange((val) =&gt; &#123;<br>  <span class="hljs-keyword">cube</span>.material.color.<span class="hljs-keyword">set</span>(val);<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/img/js/threeJs/threeJs-gui.jpg"></p><h3 id="几何体-顶点-索引-面-BufferGeometry"><a href="#几何体-顶点-索引-面-BufferGeometry" class="headerlink" title="几何体(顶点,索引,面)BufferGeometry"></a>几何体(顶点,索引,面)BufferGeometry</h3><ol><li>在threejs中 所有的几何体都是由三角形构成</li><li>继承geome类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 创建几何体</span><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> THREE.BufferGeometry();<br><span class="hljs-comment">// 创建三角形顶点数据 顶点是有顺序的 逆时针为正面</span><br><span class="hljs-keyword">const</span> vertices = <span class="hljs-keyword">new</span> Float32Array([<br>  <span class="hljs-number">-1.0</span>, <span class="hljs-number">-1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, <span class="hljs-number">-1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-comment">// 另外一个面</span><br>  <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>,<br>  <span class="hljs-number">-1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>,<br>  <span class="hljs-number">-1.0</span>, <span class="hljs-number">-1.0</span>, <span class="hljs-number">0</span><br>])<br><span class="hljs-comment">// 创建顶点属性</span><br>geometry.setAttribute(<span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-keyword">new</span> THREE.BufferAttribute(vertices, <span class="hljs-number">3</span>))<br><span class="hljs-comment">// 创建材质</span><br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> THREE.MeshBasicMaterial(&#123;<br>  color: <span class="hljs-number">0x00ff00</span>,<br>  <span class="hljs-comment">// 设置两个面都能看到</span><br>  <span class="hljs-comment">// side: THREE.DoubleSide,</span><br>  <span class="hljs-comment">// 设置线框</span><br>  wireframe: <span class="hljs-literal">true</span><br>&#125;);<br><span class="hljs-comment">// 创建网格</span><br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> THREE.Mesh(geometry, material);<br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-keyword">add</span>(cube);<br></code></pre></td></tr></table></figure>共用顶点设置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建几何体</span><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BufferGeometry</span>();<br><span class="hljs-comment">// 使用索引绘制</span><br><span class="hljs-keyword">const</span> vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>  -<span class="hljs-number">1.0</span>, -<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, -<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  -<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>])<br><span class="hljs-comment">// 创建顶点属性</span><br>geometry.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BufferAttribute</span>(vertices, <span class="hljs-number">3</span>));<br><span class="hljs-comment">// 创建索引</span><br><span class="hljs-keyword">const</span> indices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint16Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 创建索引属性</span><br>geometry.<span class="hljs-title function_">setIndex</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BufferAttribute</span>(indices, <span class="hljs-number">1</span>));<br><span class="hljs-comment">// 创建材质</span><br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span>,<br>  <span class="hljs-comment">// 设置两个面都能看到</span><br>  <span class="hljs-comment">// side: THREE.DoubleSide,</span><br>  <span class="hljs-comment">// 设置线框</span><br>  <span class="hljs-attr">wireframe</span>: <span class="hljs-literal">true</span><br>&#125;);<br><span class="hljs-comment">// 创建网格</span><br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(geometry, material);<br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-title function_">add</span>(cube);<br></code></pre></td></tr></table></figure><img src="/img/js/threeJs/threeJs-jiheti.jpg"></li></ol><h3 id="几何体划分顶点组设置不同材质"><a href="#几何体划分顶点组设置不同材质" class="headerlink" title="几何体划分顶点组设置不同材质"></a>几何体划分顶点组设置不同材质</h3><p>addGroup</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建几何体</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">geometry</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">BufferGeometry</span>();<br><span class="hljs-comment">// 使用索引绘制</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">vertices</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>  -<span class="hljs-number">1.0</span>, -<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, -<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>  -<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>,<br>])<br><span class="hljs-comment">// 创建顶点属性</span><br>geometry.<span class="hljs-title function_ invoke__">setAttribute</span>(<span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">BufferAttribute</span>(vertices, <span class="hljs-number">3</span>));<br><span class="hljs-comment">// 创建索引</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">indices</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint16Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 创建索引属性</span><br>geometry.<span class="hljs-title function_ invoke__">setIndex</span>(<span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">BufferAttribute</span>(indices, <span class="hljs-number">1</span>));<br><br><span class="hljs-comment">// 设置两个顶点组，形成2个材质</span><br>geometry.<span class="hljs-title function_ invoke__">addGroup</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>);<br>geometry.<span class="hljs-title function_ invoke__">addGroup</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 创建材质</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">material</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span>,<br>  // 设置两个面都能看到<br>  <span class="hljs-attr">side</span>: THREE.DoubleSide,<br>  // 设置线框<br>  // <span class="hljs-attr">wireframe</span>: <span class="hljs-literal">true</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">material1</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0xff0000</span>,<br>  // 设置两个面都能看到<br>  <span class="hljs-attr">side</span>: THREE.DoubleSide,<br>&#125;);<br><span class="hljs-comment">// 创建一个立方体</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubeGeometry</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial0</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial1</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0xff0000</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial2</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0x0000ff</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial3</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0xffff00</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial4</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0xff0000</span><br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cubmaterial5</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">MeshBasicMaterial</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-number">0xff00ff</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cube</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">Mesh</span>(cubeGeometry, [cubmaterial0, cubmaterial1, cubmaterial2, cubmaterial3, cubmaterial4, cubmaterial5]);<br><br>cube.position.x = <span class="hljs-number">2</span>;<br>secene.<span class="hljs-title function_ invoke__">add</span>(cube);<br><br><span class="hljs-comment">// 创建网格</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">plane</span> = <span class="hljs-keyword">new</span> THREE.<span class="hljs-title function_ invoke__">Mesh</span>(geometry, [material, material1]);<br><span class="hljs-comment">// 将网格添加到场景中</span><br>secene.<span class="hljs-title function_ invoke__">add</span>(plane);<br></code></pre></td></tr></table></figure><p><img src="/img/js/threeJs/threeJs-caizhi.jpg"></p><h3 id="常见几何体"><a href="#常见几何体" class="headerlink" title="常见几何体"></a>常见几何体</h3><ol><li><a href="https://threejs.org/docs/index.html?q=geometry#api/zh/geometries/BoxGeometry">文档搜索 geometry</a><ol><li>立方缓冲几何体（BoxGeometry）</li><li>胶囊图形类 CapsuleGeometry</li><li>圆形缓冲几何体（CircleGeometry）</li><li>圆锥缓冲几何体（ConeGeometry）</li><li>圆柱缓冲几何体（CylinderGeometry）</li><li>十二面缓冲几何体（DodecahedronGeometry）</li><li>边缘几何体（EdgesGeometry）</li><li>挤压缓冲几何体（ExtrudeGeometry）</li><li>二十面缓冲几何体（IcosahedronGeometry）</li><li>车削缓冲几何体（LatheGeometry）</li><li>八面缓冲几何体（OctahedronGeometry）</li><li>平面缓冲几何体（PlaneGeometry）</li><li>多面缓冲几何体（PolyhedronGeometry）</li><li>圆环缓冲几何体（RingGeometry）</li><li>形状缓冲几何体（ShapeGeometry）</li><li>球缓冲几何体（SphereGeometry）</li><li>四面缓冲几何体（TetrahedronGeometry）</li><li>圆环缓冲几何体（TorusGeometry）</li><li>圆环缓冲扭结几何体（TorusKnotGeometry）</li><li>管道缓冲几何体（TubeGeometry）</li><li>网格几何体（WireframeGeometry）</li></ol></li></ol><h3 id="基础材质"><a href="#基础材质" class="headerlink" title="基础材质"></a>基础材质</h3><p class="note note-info">欲知后事如何，且听下回分解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS3动画 @keyframes</title>
    <link href="/2024/08/30/Front-end/CSS/CSS3transform/"/>
    <url>/2024/08/30/Front-end/CSS/CSS3transform/</url>
    
    <content type="html"><![CDATA[<h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><!-- |  关键字   | 函数值  ||  ----  | ----  ||   | transform: none; ||   | transform: matrix(1, 2, 3, 4, 5, 6); ||   | transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); ||   | perspective(17px); ||   | rotate(0.5turn); ||   | rotate3d(1, 2, 3, 10deg); ||   | rotateX(10deg); ||   | rotateY(10deg); ||   | rotateZ(10deg); ||   | transform: translate(12px, 50%); ||   | transform: translate3d(12px, 50%, 3em); ||   | transform: translateX(2em); ||   | transform: translateY(3in); ||   | transform: translateZ(2px); ||   | transform: scale(2, 0.5); ||   | transform: scale3d(2.5, 1.2, 0.3); ||   | transform: scaleX(2); ||   | transform: scaleY(0.5); ||   | transform: scaleZ(0.3); ||   | transform: skew(30deg, 20deg); ||   | transform: skewX(30deg); ||   | transform: skewY(1.07rad); ||   | 多个函数值 ||   | transform: translateX(10px) rotate(10deg) translateY(5px); ||   | transform: perspective(500px) translate(10px, 0, 20px) rotateY(3deg); ||   | 全局值 ||   | transform: inherit; ||   | transform: initial; ||   | transform: revert; ||   | transform: revert-layer; ||   | transform: unset; | --><h3 id="（平移）translate"><a href="#（平移）translate" class="headerlink" title="（平移）translate"></a>（平移）translate</h3><p>平移<br>参考自己的位置来平移</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">div &#123;<br>    <span class="hljs-comment">&lt;!--args(水平方向位移量，垂直方向位移量)--&gt;</span><br>    transform: translate(10px,10px);<br>    <span class="hljs-comment">&lt;!--也可使用百分比 --&gt;</span><br>    transform: translate(50%, 50%);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（旋转）rotate"><a href="#（旋转）rotate" class="headerlink" title="（旋转）rotate"></a>（旋转）rotate</h3><p>旋转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">div &#123;<br>    <span class="hljs-comment">&lt;!--参数传入角度 正数顺时针旋转 负数逆时针旋转--&gt;</span><br>    transform: rotate(30deg);<br>&#125;<br></code></pre></td></tr></table></figure><p>默认以元素自身中心为旋转圆点，可由transform-origin属性修改圆点<br>设置为top left 即以左上角为圆点旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>);<br>    <span class="hljs-attribute">transform-origin</span>: top left;<br>&#125;<br><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">transform-origin</span>: center;<br>    <span class="hljs-attribute">transform-origin</span>: top left;<br>    <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50px</span> <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">transform-origin</span>: bottom right <span class="hljs-number">60px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（缩放）scale"><a href="#（缩放）scale" class="headerlink" title="（缩放）scale"></a>（缩放）scale</h3><p>只传入一个参数，则宽高都缩放到指定的倍数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.6</span>);<br></code></pre></td></tr></table></figure><p>两个参数，则分别对应宽高指定倍数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">0</span>.<span class="hljs-number">6</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>同旋转一致，默认已元素中心作为基点实现缩放，可由transform-origin修改基点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>);<br><span class="hljs-attribute">transform-origin</span>: top left;<br></code></pre></td></tr></table></figure><h3 id="（倾斜）skew"><a href="#（倾斜）skew" class="headerlink" title="（倾斜）skew"></a>（倾斜）skew</h3><p>同缩放属性 可传参数个数指定水平方向 垂直方向的倾斜角度<br>同样以transform-origin修改基点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>);<br><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>, <span class="hljs-number">10deg</span>);<br><br><span class="hljs-attribute">transform-origin</span>: top left;<br></code></pre></td></tr></table></figure><h3 id="（矩阵）matrix"><a href="#（矩阵）matrix" class="headerlink" title="（矩阵）matrix"></a>（矩阵）matrix</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> d 控制元素缩放<br><span class="hljs-selector-tag">b</span> c 控制元素倾斜或斜切<br>e f 控制元素的平移<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">matrix</span>(a, b, c, d, e, f);<br></code></pre></td></tr></table></figure><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>添加过渡效果<br>下述实例中demo2的放大更自然些</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.demo1</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-class">.demo2</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);<br>&#125;<br><br><span class="hljs-selector-class">.demo2</span> &#123;<br>    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.5s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数格式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attribute">transition</span>:<br>(<br><span class="hljs-attribute">transition-property</span>,<br><span class="hljs-attribute">transition-duration</span>,<br><span class="hljs-attribute">transition-timing-function</span>,<br><span class="hljs-attribute">transition-delay</span><br>)<br></code></pre></td></tr></table></figure><ol><li>transition-property: 指定要过渡的 CSS 属性的名称。例如，color、background-color 等。 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.demo1</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-class">.demo2</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.demo2</span> &#123;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">2s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>transition-duration: 指定过渡效果持续的时间，以秒或毫秒为单位。</li><li><strong>transition-timing-function</strong>: 指定过渡效果的速度曲线。它可以是 linear（线性）、ease（渐入渐出）、ease-in（渐入）、ease-out（渐出）、ease-in-out（先渐入后渐出）等等。<ol><li>贝塞尔缓动函数 <code>cubic-bezier(&lt;x1&gt;，&lt;y1&gt;，&lt;x2&gt;，&lt;y2&gt;)</code><ol><li><strong>ease</strong>     <ol><li><strong>缓慢开始，陡然加速，再逐渐减速至结束</strong> 实际函数是 cubic-bezier(0.25,0.1,0.25,1.0)</li></ol></li><li><strong>ease-in</strong>  <ol><li><strong>缓慢开始，再逐渐加速至结束，最终突然停止</strong> 实际函数是 cubic-bezier(0.42,0.0,1.0,1.0)</li></ol></li><li><strong>ease-out</strong> <ol><li><strong>突然开始，再逐渐减速至结束</strong> 实际函数是 cubic-bezier(0.0,0.0,0.58,1.0)</li></ol></li><li><strong>ease-in-out</strong><ol><li><strong>缓慢开始，然后加速，再减速至结束</strong> 实际函数是 cubic-bezier(0.42,0.0,0.58,1.0)</li></ol></li></ol></li><li>线性缓动函数 <code>linear(&lt;point-list&gt;)</code><ol><li><strong>linear</strong> <strong>从开始到结束都是固定的速度</strong>，实际函数是linear(0,1)</li><li><strong>linear(0，0.25，1)</strong> <strong>开始较慢的速度匀速变化，后面速度突然变快</strong></li></ol></li><li>阶跃缓动函数<code>steps(&lt;number-of-steps&gt;，&lt;direction&gt;)</code><ol><li>根据传入的步骤和策略，分步完成过渡 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">.demo2 &#123;<br>        transition: width 2s ease;<br>        transition: width 2s linear;<br>        transition: width 2s steps(5, end);<br>        <span class="hljs-comment">&lt;!--多个属性同时设置--&gt;</span><br>        transition: width 2s ease, background-color 2s ease;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li>transition-delay: 指定过渡效果开始之前的延迟时间，以秒或毫秒为单位。</li></ol><h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel">name               关键帧列表的名字，全局唯一<br><span class="hljs-keyword">keyframe</span>-selector  关键帧选择器 百分比指定<br>css-styles         关键帧的样式 css样式<br><br>@keyframes name &#123;<br>    <span class="hljs-keyword">keyframe</span>-selector &#123;<br>        css-styles;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> addWidth &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    &#125;<br>&#125;<br><br>&lt;!--也可使用 <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">to</span>--&gt;<br><span class="hljs-keyword">@keyframes</span> addWidth &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-class">.demo3</span> &#123;<br>    <span class="hljs-attribute">animation-name</span>: addWidth;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">2s</span>;<br>    <span class="hljs-attribute">animation-timing-function</span>: linear;<br>    <span class="hljs-attribute">animation-iteration-count</span>: infinite;<br>    <span class="hljs-comment">/* 简写 */</span><br>    <span class="hljs-attribute">animation</span>: addWidth <span class="hljs-number">2s</span> linear infinite;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>animation-name</strong></td><td>规定 @keyframes 动画的名称。</td></tr><tr><td><strong>animation-duration</strong></td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td><strong>animation-timing-function</strong></td><td>规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td><strong>animation-iteration-count</strong></td><td>规定动画被播放的次数。默认是 1。0.5代表播放一半动画</td></tr><tr><td>animation-fill-mode</td><td>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</td></tr><tr><td><strong>animation-delay</strong></td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”。</td></tr></tbody></table><h3 id="animation-direction-配置属性"><a href="#animation-direction-配置属性" class="headerlink" title="animation-direction 配置属性"></a>animation-direction 配置属性</h3><pre><code class="hljs">示例： `animation-direction: normal;`</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>动画在每个循环中正向播放。换句话说，每次动画循环时，动画将重置为起始状态并重新开始。这是默认值。</td></tr><tr><td>reverse</td><td>动画在每个循环中反向播放。换句话说，每次动画循环时，动画将重置为结束状态并重新开始。动画步骤将反向执行，并且时间函数也将被反转。例如，ease-in 时间函数变为 ease-out。</td></tr><tr><td><strong>alternate</strong></td><td>动画在每个循环中正反交替播放，第一次迭代是正向播放。确定循环是奇数还是偶数的计数从 1 开始。</td></tr><tr><td>alternate-reverse</td><td>动画在每个循环中正反交替播放，第一次迭代是反向播放。确定循环是奇数还是偶数的计数从 1 开始。</td></tr></tbody></table><h3 id="animation-fill-mode-保留最后状态"><a href="#animation-fill-mode-保留最后状态" class="headerlink" title="animation-fill-mode 保留最后状态"></a>animation-fill-mode 保留最后状态</h3><pre><code class="hljs">示例： `animation-fill-mode: normal;`</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>当动画未执行时，动画将不会将任何样式应用于目标，而是已经赋予给该元素的 CSS 规则来显示该元素。这是默认值。</td></tr><tr><td><strong>forwards</strong></td><td>目标将保留由执行期间遇到的最后一个关键帧计算值。最后一个关键帧取决于animation-direction和animation-iteration-count的值</td></tr><tr><td>backwards</td><td>动画将在应用于目标时立即应用第一个关键帧中定义的值，并在animation-delay期间保留此值。第一个关键帧取决于animation-direction的值</td></tr><tr><td>both</td><td>动画将遵循forwards和backwards的规则，从而在两个方向上扩展动画属性</td></tr></tbody></table><h3 id="animation-play-state-暂停"><a href="#animation-play-state-暂停" class="headerlink" title="animation-play-state 暂停"></a>animation-play-state 暂停</h3><p>恢复暂停的动画将从暂停时停止的位置开始播放，而不是从动画序列的开头重新开始播放。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation-play-state</span>: paused;<br><br><span class="hljs-attribute">animation-play-state</span>: running;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PS 初窥门径</title>
    <link href="/2024/08/19/UI-design/PhotoShop/PSBasicUnderstanding/"/>
    <url>/2024/08/19/UI-design/PhotoShop/PSBasicUnderstanding/</url>
    
    <content type="html"><![CDATA[<h1 id="初步认知"><a href="#初步认知" class="headerlink" title="初步认知"></a>初步认知</h1><h3 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h3><ol><li>打开ps - 主页 - 新建</li><li>整个ps分区域显示<ol><li>最顶层-菜单栏</li><li>左侧-工具栏</li><li>顶部第二层-属性栏（父级工具栏）</li><li>右侧-浮动面板（可以长按拖动 随意改变位置）<ol><li>打开：菜单 - 窗口 - xx</li><li>重置：菜单 - 窗口 - 工作区 - 复位基本功能</li></ol></li></ol></li><li>画布分层<ol><li>顶部 - 标题栏</li><li>中间 - 画布</li><li>左下 - 状态栏 更改% 像素</li></ol></li><li>预设（快捷键）<ol><li>ctl+ K （mac为 command + k）打开首选项</li><li>首选项 - 文件处理 - 自动存储恢复信息的间隔 - 5分钟</li><li>界面 - 颜色方案 - 黑色</li></ol></li></ol><h3 id="基础操作（图片基本操作）"><a href="#基础操作（图片基本操作）" class="headerlink" title="基础操作（图片基本操作）"></a>基础操作（图片基本操作）</h3><ol><li><h4 id="置入图片"><a href="#置入图片" class="headerlink" title="置入图片"></a>置入图片</h4><ol><li>单独处理： 文件 - 打开 - 选择本地图片</li><li>添加至已创建文件：<ol><li>拖动图片至操作区域</li><li>文件 - 置入嵌入对象 （嵌入源文件）</li><li>文件 - 置入链接的智能对象 （只插入源文件的链接地址，省内存，但发送别人依据地址就会丢失）</li><li>图片进入后会显示一个叉号 说明是一个智能对象文件，可放大缩小，按回车即可确认最终尺寸，叉号消失</li></ol></li></ol></li><li><h4 id="删除-选中点击-delete键"><a href="#删除-选中点击-delete键" class="headerlink" title="删除 - 选中点击 delete键"></a>删除 - 选中点击 delete键</h4></li><li><h4 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h4><ol><li>右上方 有个回滚箭头标识 点击 展开历史记录 点击对应步骤删除即可</li><li>菜单栏 - 编辑 - 还原删除状态 （快捷键ctl+z）</li></ol></li><li><h4 id="放大和缩小"><a href="#放大和缩小" class="headerlink" title="放大和缩小"></a>放大和缩小</h4><ol><li>放大&#x2F;缩小 option + 上&#x2F;下滑</li><li>ctl + 加号&#x2F;减号</li></ol></li><li><h4 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h4><ol><li>添加图层<br> 1. 点击右下角 + 号标识</li><li>改变位置<ol><li>单个：选中任意单个图层 + 工具栏选中 - 移动工具 + ctl + t 鼠标拖动即可</li><li>整体：shift选中所有图层拖动 + ctl + t 鼠标拖动即可</li></ol></li><li>删除图层<br> 1. 拖动至右下角垃圾桶标识<br> 2. 选中 - delete键</li></ol></li><li><h4 id="存储-导出"><a href="#存储-导出" class="headerlink" title="存储&#x2F;导出"></a>存储&#x2F;导出</h4><ol><li>文件 - 存储</li><li>文件 - 存储为</li><li>文件 - 导出</li><li>可点击图层处背景前眼睛 关闭背景 导出为透明图</li></ol></li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>从对话框新建一个图层 【Ctrl】+【Shift】+【N】<br>以默认选项建立一个新的图层 【Ctrl】+【Alt】+【Shift】+【N】<br>通过拷贝建立一个图层 【Ctrl】+【J】<br>通过剪切建立一个图层 【Ctrl】+【Shift】+【J】<br>与前一图层编组 【Ctrl】+【G】<br>取消编组 【Ctrl】+【Shift】+【G】<br>向下合并或合并联接图层 【Ctrl】+【E】<br>合并可见图层 【Ctrl】+【Shift】+【E】<br>盖印或盖印联接图层 【Ctrl】+【Alt】+【E】<br>盖印可见图层【Ctrl】+【Alt】+【Shift】+【E】<br>将当前层下移一层 【Ctrl】+【【】<br>将当前层上移一层 【Ctrl】+【】】<br>将当前层移到最下面 【Ctrl】+【Shift】+【【】<br>将当前层移到最上面 【Ctrl】+【Shift】+【】】<br>激活下一个图层 【Alt】+【【】<br>激活上一个图层 【Alt】+【】】<br>激活底部图层 【Shift】+【Alt】+【【】<br>激活顶部图层 【Shift】+【Alt】+【】】<br>调整当前图层的透明度(当前工具为无数字参数的,如移动工具) 【0】至【9】<br>保留当前图层的透明区域(开关) 【&#x2F;】<br>投影效果(在”效果”对话框中) 【Ctrl】+【1】<br>内阴影效果(在”效果”对话框中) 【Ctrl】+【2】<br>F1 -帮助<br>F2 -剪切<br>F3 -拷贝<br>F4-粘贴<br>F5-隐藏&#x2F;显示画笔面板<br>F6-隐藏&#x2F;显示颜色面板<br>F7-隐藏&#x2F;显示图层面板<br>F8-隐藏&#x2F;显示信息面板<br>F9-隐藏&#x2F;显示动作面板<br>F12-恢复<br>Shift+f5-填充<br>Shift+f6-羽化<br>Shift+f7-选择→反选<br>ctrl+h-隐藏选定区域<br>ctrl+d-取消选定区域<br>ctrl+w-关闭文件<br>ctrl+Q-退出PHOTOSHOP</p><h1 id="图层认知"><a href="#图层认知" class="headerlink" title="图层认知"></a>图层认知</h1><h3 id="图层-1"><a href="#图层-1" class="headerlink" title="图层"></a>图层</h3><ol><li><h4 id="图层过滤器"><a href="#图层过滤器" class="headerlink" title="图层过滤器"></a>图层过滤器</h4><ol><li>图层下第一列 搜索 默认为类型<ol><li>类型 右边展开5个选项<ol><li>分别为 像素 调整 文字 形状 智能对象</li><li>视为筛选条件 反选即取消 可多选</li></ol></li></ol></li></ol></li><li><h4 id="不透明度和填充"><a href="#不透明度和填充" class="headerlink" title="不透明度和填充"></a>不透明度和填充</h4><ol><li>图层下第二列 默认为正常 不透明度100%<ol><li>设置对应图层的不透明度</li></ol></li><li>填充 不改变边框，只生效内容</li></ol></li><li><h4 id="图层混合模式"><a href="#图层混合模式" class="headerlink" title="图层混合模式"></a>图层混合模式</h4><ol><li>位置：位于 不透明度 左侧选择框</li><li>例如正片叠底 变亮 滤色可将带有背景色图片融入至区域图片中</li><li>作用：提取单个图层一个像素融入其他像素中</li><li>锁定按钮：位于填充左侧<ol><li>锁定透明像素</li><li>禁用画笔</li><li>锁定位置</li><li>锁定画板，不能拖拽至其余画板</li><li>锁定全部（以上四种都生效）</li></ol></li></ol></li><li><h4 id="观察图层面板"><a href="#观察图层面板" class="headerlink" title="观察图层面板"></a>观察图层面板</h4><ol><li>实用： 左侧切换移动工具选项，双击文字，右上方可改变颜色</li><li>命名：双击图层</li><li>合并图层<ol><li>合并<ol><li>shift选中合并多个图层 + ctl + e </li><li>注意：会丢失原图层</li></ol></li><li>盖印<ol><li>shift选中多个 command+option+e</li><li>不会丢失原图层，出现一个合并图层，内容相当于复制一份在原位置</li></ol></li></ol></li></ol></li><li><h4 id="图层指令按钮"><a href="#图层指令按钮" class="headerlink" title="图层指令按钮"></a>图层指令按钮</h4><ol><li>链接图层</li><li>添加图层样式</li><li>添加图层蒙层</li><li>创建新的填充或者调整图层</li><li>创建新组<ol><li>相当于创建分类 将多个图层放入</li></ol></li><li>创建图层</li><li>删除图层</li></ol></li></ol><h1 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h1><h3 id="移动工具"><a href="#移动工具" class="headerlink" title="移动工具"></a>移动工具</h3><ol><li>左侧工具栏第一个选项下第一个选项<ol><li>属性栏<ol><li>都不勾选状态下（默认选中- 自动选择 ）<ol><li>点击对应图层 拖动鼠标 即可改变图层位置</li></ol></li><li>勾选自动选择 选项默认为图层 切换组即可实现改组下全体图层拖动</li><li>显示变换控件 command + t 显示图层占用大小边框</li><li>右侧对齐方式 需多选图层</li></ol></li></ol></li></ol><h3 id="画板工具"><a href="#画板工具" class="headerlink" title="画板工具"></a>画板工具</h3><ol><li>左侧工具栏第一个选项下第二个选项</li><li>拉伸鼠标 新建多个画板 右侧类似于组的展现方式</li></ol><h3 id="矩形选框工具"><a href="#矩形选框工具" class="headerlink" title="矩形选框工具"></a>矩形选框工具</h3><ol><li>矩形选框工具 ：左侧工具栏第二个选项下第一个选项<ol><li>鼠标拖动绘制 快捷键 c+d 取消</li><li>c+j 复制</li><li>左上角有选择类型：新选区&#x2F;添加到选区&#x2F;… 作用：可以指定选择区域</li></ol></li><li>椭圆选框</li><li>单行选框<ol><li>一行1像素选中</li></ol></li><li>单列选框<ol><li>一列1像素选中</li></ol></li></ol><h3 id="套索工具"><a href="#套索工具" class="headerlink" title="套索工具"></a>套索工具</h3><ol><li>套索工具</li><li>多边形套索工具</li><li>磁性套索工具</li></ol><h3 id="对象选择工具"><a href="#对象选择工具" class="headerlink" title="对象选择工具"></a>对象选择工具</h3><ol><li>对象选择工具<ol><li>选择后右下角 创建新的填充或调整图层 可修改饱和度&#x2F;颜色</li></ol></li><li>快速选择工具</li><li>魔棒选择工具</li></ol><h3 id="裁剪工具"><a href="#裁剪工具" class="headerlink" title="裁剪工具"></a>裁剪工具</h3><ol><li>裁剪工具</li><li>透视裁剪工具</li><li>切片工具<ol><li>标尺 c+r &#x2F; 视图 - 标尺</li></ol></li><li>切片选择工具</li></ol><h3 id="图框工具"><a href="#图框工具" class="headerlink" title="图框工具"></a>图框工具</h3><ol><li>剪贴蒙版工具</li><li>图框工具</li></ol><h3 id="吸管工具"><a href="#吸管工具" class="headerlink" title="吸管工具"></a>吸管工具</h3><ol><li>吸管工具</li><li>3D材质吸管工具</li><li>颜色取样器</li><li>标尺</li><li>注释</li><li>计数工具</li></ol><h3 id="污点修复工具"><a href="#污点修复工具" class="headerlink" title="污点修复工具"></a>污点修复工具</h3><ol><li>污点修复画笔工具</li><li>修复画笔工具</li><li>修补工具</li><li>内容感知移动工具</li><li>红眼工具</li></ol><h3 id="画笔工具"><a href="#画笔工具" class="headerlink" title="画笔工具"></a>画笔工具</h3><ol><li>画笔</li><li>铅笔</li><li>颜色替换<ol><li>椭圆选择工具 + option+delete 颜色填充 c+d取消选区</li></ol></li><li>混合器画笔</li></ol><h3 id="仿制图章工具"><a href="#仿制图章工具" class="headerlink" title="仿制图章工具"></a>仿制图章工具</h3><ol><li>仿制图章工具</li><li>图案图章工具</li></ol><h3 id="历史记录画笔工具"><a href="#历史记录画笔工具" class="headerlink" title="历史记录画笔工具"></a>历史记录画笔工具</h3><ol><li>历史记录画笔工具</li><li>历史记录艺术画笔工具</li></ol><h3 id="橡皮擦工具"><a href="#橡皮擦工具" class="headerlink" title="橡皮擦工具"></a>橡皮擦工具</h3><ol><li>橡皮擦</li><li>背景橡皮擦</li><li>魔术橡皮擦</li></ol><h3 id="渐变工具"><a href="#渐变工具" class="headerlink" title="渐变工具"></a>渐变工具</h3><ol><li>渐变</li><li>油漆桶</li><li>3D材质拖放</li></ol>]]></content>
    
    
    <categories>
      
      <category>photoShop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端 知识 整理</title>
    <link href="/2024/04/20/Interview/EveryDayStudy/"/>
    <url>/2024/04/20/Interview/EveryDayStudy/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="/2024/03/15/Interview/FrontEndBaGuWen/">前端八股文</a> </li><li><a href="/2024/04/08/Interview/JS-1/">JS-数据类型;Promise;延迟加载;null和undefined;&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;;微任务和宏任务;作用域</a></li><li><a href="/2025/07/14/Interview/vue-0/">vue2&#x2F;3-vue-interview 50题</a></li><li><a href="/2024/04/20/Interview/Vue-1/">vue2&#x2F;3运行原理和区别;事件循环机制</a></li><li><a href="/2024/02/28/Interview/Vue-2/">vue</a></li><li><a href="/2025/07/21/Interview/uniapp/">uniapp</a></li><li><a href="/2025/07/21/Interview/wxMini/">微信小程序</a></li><li><a href="/2025/07/15/Interview/react-0/">React</a></li><li><a href="/2025/07/25/Interview/echarts/">echarts</a></li><li><a href="/2024/04/10/Interview/React-1/">React-1</a></li><li><a href="/2024/02/28/Interview/React-2/">React-2</a></li><li><a href="/2024/04/13/Interview/React-3/">React-3</a></li><li><a href="/2024/03/13/Interview/React-4/">React-4</a></li><li><a href="/2024/04/10/Interview/DayStudy-3/">微信小程序</a></li><li><a href="/2024/03/04/Interview/httpInterviewQuestion/">HTTP</a></li><li><a href="/2024/03/01/Interview/GitInterviewQuestion/">Git</a></li><li><a href="/2024/02/29/Interview/WebpackInterviewQuestion/">webpack</a></li><li><a href="/2025/03/25/Interview/OftenMeetTest/">常见问题合集</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JsEventLoop（JavaScript 事件循环）</title>
    <link href="/2024/03/07/Front-end/JavaScript/JsEventLoop/"/>
    <url>/2024/03/07/Front-end/JavaScript/JsEventLoop/</url>
    
    <content type="html"><![CDATA[<ol><li>经典面试题<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>setTimeout(<span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><br><span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    resolve()<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>);<br>&#125;)<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>上述最终执行结果为<code>1 3 5 4 2</code> Promise函数是同步执行，.then方法为异步执行</li><li>JavaScript是单线程<ol><li>JavaScript是一种单线程的编程语言，意思就是同一时间段只能做一件事，所有任务都需要排队依次完成；</li><li>为什么JavaScript不能有多个线程呢？<ol><li>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准；</li></ol></li></ol></li><li>同步任务和异步任务<ol><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>JavaScript开发人员意识到，为了不影响主线程正常运行，就把那些耗时的时间（比如定时器，Ajax操作从网络读取数据等）任务挂起来，依次的放进一个任务队列中，等主线程的任务执行完毕后，再回过来去继续执行队列中的任务；</li><li>于是，任务就可以分成两种：<ol><li>同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</li><li>异步任务：不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</li></ol></li></ol></li><li>event loop（事件循环）<ol><li>event loop（事件循环）机制 过程<ol><li>所有同步任务都在主线程上执行，形成一个执行栈（调用栈）；</li><li>主线程之外，还存在一个‘任务队列’（task queue），浏览器中的各种 Web API 为异步的代码提供了一个单独的运行空间，当异步的代码运行完毕以后，会将代码中的回调送入到 任务队列中（队列遵循先进先出得原则）</li><li>一旦主线程的栈中的所有同步任务执行完毕后，调用栈为空时系统就会将队列中的回调函数依次压入调用栈中执行，当调用栈为空时，仍然会不断循环检测任务队列中是否有代码需要执行；</li></ol></li></ol></li><li>宏任务和微任务<ol><li>macrotask（宏任务） 和 microtask（微任务）</li><li>浏览器中常用的宏任务和微任务：<table><thead><tr><th>名称</th><th>事件</th></tr></thead><tbody><tr><td>宏任务</td><td>setTimeout 、setInterval 、UI rendering</td></tr><tr><td>微任务</td><td>promise 、requestAnimationFrame</td></tr></tbody></table></li><li>异步任务既然分为宏任务和微任务，则队列肯定也分为宏任务队列和微任务队列；</li><li>当宏任务和微任务都处于 任务队列（Task Queue） 中时，微任务的优先级大于宏任务，即先将微任务执行完，再执行宏任务；</li><li>执行机制过程如下：<ol><li>第一步： 主线程执行同步任务的同时，把一些异步任务放入‘任务队列’（task queue）中，等待主线程的调用栈为空时，再依次从队列出去任务去执行；</li><li>第二步：检测任务队列中的微队列是否为空，若不为空，则取出一个微任务入栈执行；然后继续执行第2步；如果微队列为空，则开始取出宏队列中的一个宏任务执行；</li><li>第三步：执行完宏队列中的一个宏任务后，会继续检测微队列是否为空，如果有新插入的任务，这继续执行第二步；如果微队列为空，则继续执行宏队列中的下一个任务，然后再继续循环执行第三步；</li></ol></li></ol></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade">setTimeout( <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>  Promise.resole().then( <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>  &#125;)<br>&#125;,<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    resolve()<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>);<br>&#125;)<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结果为 35412    </p>]]></content>
    
    
    <categories>
      
      <category>javaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue nextTick 原理</title>
    <link href="/2024/03/06/Front-end/Vue/VueNextTick/"/>
    <url>/2024/03/06/Front-end/Vue/VueNextTick/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7226210789376065594">资料一</a></p><ol><li>作用<ol><li>无论是在 Vue2 还是 Vue3 中，nextTick 都是用来处理 DOM 更新完毕后执行回调函数的方法。</li></ol></li><li>原理<ol><li><strong>Vue2 中的 nextTick</strong><ol><li>在 Vue2 中，nextTick 的实现基于浏览器的异步任务队列和微任务队列。</li><li><strong>异步任务队列</strong><ol><li>在浏览器中，每个宏任务结束后会检查微任务队列，如果有任务则依次执行。当所有微任务执行完成后，才会执行下一个宏任务。因此可以通过将任务作为微任务添加到微任务队列中，来确保任务在所有宏任务执行完毕后立即执行。</li><li>而使用 setTimeout 可以将任务添加到异步任务队列中，在下一轮事件循环中执行。</li><li>在 Vue2 中，如果没有指定执行环境，则会优先使用 Promise.then &#x2F; MutationObserver，否则使用 setTimeout。</li></ol></li><li><strong>宏任务和微任务</strong><ol><li>在 Vue2 中，可以通过设置 useMacroTask 来使 nextTick 方法使用宏任务或者微任务。</li><li>Vue2 中默认使用微任务，在没有原生 Promise 和 MutationObserver 的情况下，才会改用 setTimeout。</li></ol></li><li>总结<ol><li>在 Vue2 中，nextTick 的实现原理基于浏览器的异步任务队列和微任务队列。Vue2 默认使用微任务，在没有原生 Promise 和 MutationObserver 的情况下才会改用 setTimeout。</li></ol></li></ol></li><li><strong>Vue3 中的 nextTick</strong><ol><li>在 Vue3 中，nextTick 的实现有了较大变化，主要是为了解决浏览器对 Promise 的缺陷和问题。</li><li><strong>Promise 在浏览器中的问题</strong><ol><li>在浏览器中，Promise 有一个缺陷：如果 Promise 在当前事件循环中被解决，那么在 then 回调函数之前添加的任务将不能在同一个任务中执行。</li><li>这是因为 Promise 虽然是微任务，但是需要等到当前宏任务结束才能执行。</li></ol></li><li><strong>Vue3 中解决 Promise 缺陷的方法</strong><ol><li>在 Vue3 中，通过使用 MutationObserver 和 Promise.resolve().then() 来解决 Promise 在浏览器中的缺陷。</li><li>在 Vue3 中，nextTick 的实现原理基于MutationObserver 和 Promise.resolve().then()，通过 MutationObserver 监测 DOM 变化，在下一个微任务中执行回调函数。</li><li>如果当前浏览器不支持原生 Promise，则使用 setTimeout 来模拟 Promise 的行为，并在回调函数执行前添加一个空的定时器来强制推迟执行（解决 iOS 中 setTimeout 在非激活标签页中的问题）。</li><li>如果需要等待所有回调函数执行完成，则可以通过返回一个 Promise 对象来实现。</li></ol></li><li>总结<ol><li>在 Vue3 中，nextTick 的实现原理基于 MutationObserver 和 Promise.resolve().then()。如果浏览器不支持原生 Promise，则使用 setTimeout 来模拟 Promise 的行为，并在回调函数执行前添加一个空的定时器来强制推迟执行。</li></ol></li></ol></li></ol></li><li>结论<ol><li>无论是在 Vue2 还是 Vue3 中，nextTick 都是用来处理 DOM 更新完毕后执行回调函数的方法。</li><li><strong>在 Vue2 中，nextTick 的实现基于浏览器的异步任务队列和微任务队列</strong></li><li><strong>Vue3 中，为了解决浏览器对 Promise 的缺陷和问题，使用 MutationObserver 和 Promise.resolve().then() 来实现</strong></li><li><strong>Vue3 中的 nextTick 方法也支持返回 Promise 对象，方便等待所有回调函数执行完成后再进行下一步操作。</strong></li><li>注意<ol><li>尽管 Vue3 中使用了 MutationObserver 和 Promise.resolve().then() 来解决 Promise 在浏览器中的缺陷，但在某些情况下（例如非激活标签页中），仍然可能会出现问题。因此，在实际使用中，还需要根据具体情况选择合适的方案。</li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件通讯</title>
    <link href="/2024/03/06/Front-end/Vue/VueComponmentCommmunication/"/>
    <url>/2024/03/06/Front-end/Vue/VueComponmentCommmunication/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zjjcchina/article/details/122357661">资料一</a></p><ol><li>vue3组件通信方式<ol><li><a href="#props"><strong>props</strong></a>  父传子</li><li><a href="#emit"><strong>$emit</strong></a>   子传父</li><li><a href="#expose/ref"><strong>expose&#x2F;ref</strong></a>       父用子</li><li><a href="#attrs"><strong>attrs</strong></a>  父传子</li><li><a href="#v-model"><strong>v-model</strong></a> 父传子</li><li><a href="#provide/inject"><strong>provide&#x2F;inject</strong></a>  父传子的子</li><li><a href="#Vuex"><strong>Vuex</strong></a> 跨组件</li><li><a href="#mitt"><strong>mitt</strong></a> 跨组件</li></ol></li><li>Vue2组件通信方式<ol><li><strong>props</strong> 父传子</li><li><strong>.sync</strong> 父传子<ol><li>子组件接收到数据后可以直接修改，并且会同时修改父组件的数据</li></ol></li><li><strong>v-model</strong>  父传子<ol><li>和 .sync 类似，可以实现将父组件传给子组件的数据为双向绑定，子组件通过 $emit 修改父组件的数据</li></ol></li><li><strong>ref</strong> 父用子<ol><li>ref 如果在普通的DOM元素上，引用指向的就是该DOM元素;</li><li>如果在子组件上，引用的指向就是子组件实例，然后父组件就可以通过 ref 主动获取子组件的属性或者调用子组件的方法</li></ol></li><li><strong>$emit&#x2F;v-on</strong> 子传父</li><li><strong>$attrs&#x2F;$listeners</strong> 父传孙<ol><li>$attrs：包含父作用域里除 class 和 style 除外的非 props 属性集合。通过 this.</li><li>$listeners：包含父作用域里 .native 除外的监听事件集合。如果还要继续传给子组件内部的其他组件，就可以通过 v-on&#x3D;”$linteners”</li></ol></li><li><strong>$children&#x2F;$parent</strong> 父子相互获取</li><li><strong>provide&#x2F;inject</strong> 父传孙</li><li><strong>EventBus</strong> 跨组件</li><li><strong>Vuex</strong> 跨组件</li><li><strong>$root</strong> <code>$root</code>可以拿到 App.vue 里的数据和方法</li><li><strong>slot</strong><ol><li>就是把子组件的数据通过插槽的方式传给父组件使用，然后再插回来<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// Child.vue<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>export <span class="hljs-keyword">default</span>&#123;<br>    data()&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            user:&#123;<span class="hljs-built_in"> name</span>:<span class="hljs-string">&quot;沐华&quot;</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>// Parent.vue<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="language-xml">            </span><span class="language-xquery">&#123;&#123; slotProps.user<span class="hljs-built_in">.name</span> &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><a id="props"><strong>props</strong> </a>父组件-&gt;子组件<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// Parent.vue 传送</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">:msg2</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref, reactive &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg2 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;这是传给子组件的信息2&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 或者复杂类型</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg2 = <span class="hljs-title function_">reactive</span>([<span class="hljs-string">&quot;这是传级子组件的信息2&quot;</span>])</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// Child.vue 接收</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 不需要引入 直接使用</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// import </span></span></span><span class="hljs-template-variable">&#123; defineProps &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        // 写法一</span><br><span class="hljs-template-variable">        msg2: String</span><br><span class="hljs-template-variable">        // 写法二</span><br><span class="hljs-template-variable">        msg2:&#123;</span><br><span class="hljs-template-variable">            type:String,</span><br><span class="hljs-template-variable">            <span class="hljs-keyword">default</span>:&quot;&quot;</span><br><span class="hljs-template-variable">        &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props) <span class="hljs-comment">// </span></span></span><span class="hljs-template-variable">&#123; msg2:&quot;这是传级子组件的信息2&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><a id="emit"><strong>$emit</strong> </a>子组件-&gt;父组件<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// Child.vue 派发</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    // 写法一</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;emit(&#x27;myClick&#x27;)&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">buttom</span>&gt;</span></span><br><span class="language-xml">    // 写法二</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">buttom</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法一 适用于Vue3.2版本 不需要引入</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// import </span></span></span><span class="hljs-template-variable">&#123; defineEmits &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 对应写法一</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;myClick&quot;</span>,<span class="hljs-string">&quot;myClick2&quot;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 对应写法二</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>)=&gt;</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        emit(&quot;myClick&quot;, &quot;这是发送给父组件的信息&quot;)</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法二 不适用于 Vue3.2版本，该版本 useContext()已废弃</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useContext &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> </span></span><span class="hljs-template-variable">&#123; emit &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="hljs-title function_">useContext</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>)=&gt;</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        emit(&quot;myClick&quot;, &quot;这是发送给父组件的信息&quot;)</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// Parent.vue 响应</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">child</span> @<span class="hljs-attr">myClick</span>=<span class="hljs-string">&quot;onMyClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onMyClick</span> = (<span class="hljs-params">msg</span>) =&gt; </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        console.log(msg) // 这是父组件收到的信息</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><a id="expose/ref"><strong>expose &#x2F; ref</strong></a> 父组件获取子组件的属性或者调用子组件方法<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml">// Child.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法一 不适用于Vue3.2版本，该版本 useContext()已废弃</span></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> ctx = <span class="hljs-title function_">useContext</span>()</span><br><span class="language-javascript">    <span class="hljs-comment">// 对外暴露属性方法等都可以</span></span><br><span class="language-javascript">    ctx.<span class="hljs-title function_">expose</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">childName</span>: <span class="hljs-string">&quot;这是子组件的属性&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">someMethod</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是子组件的方法&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 方法二 适用于Vue3.2版本, 不需要引入</span></span><br><span class="language-javascript">    <span class="hljs-comment">// import &#123; defineExpose &#125; from &quot;vue&quot;</span></span><br><span class="language-javascript">    <span class="hljs-title function_">defineExpose</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">childName</span>: <span class="hljs-string">&quot;这是子组件的属性&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">someMethod</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是子组件的方法&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br>// Parent.vue  注意 ref=&quot;comp&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;comp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handlerClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> comp = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handlerClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(comp.<span class="hljs-property">value</span>.<span class="hljs-property">childName</span>) <span class="hljs-comment">// 获取子组件对外暴露的属性</span></span><br><span class="language-javascript">        comp.<span class="hljs-property">value</span>.<span class="hljs-title function_">someMethod</span>() <span class="hljs-comment">// 调用子组件对外暴露的方法</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><a id="attrs"><strong>attrs</strong></a> 包含父作用域里除 class 和 style 除外的非 props 属性集合<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// Parent.vue 传送</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">:msg1</span>=<span class="hljs-string">&quot;msg1&quot;</span> <span class="hljs-attr">:msg2</span>=<span class="hljs-string">&quot;msg2&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;3333&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref, reactive &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg1 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;1111&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg2 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;2222&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// Child.vue 接收</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; defineProps, useContext, useAttrs &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 3.2版本不需要引入 defineProps，直接用</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        msg1: String</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"><span class="language-javascript">)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法一 不适用于 Vue3.2版本，该版本 useContext()已废弃</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ctx = <span class="hljs-title function_">useContext</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 如果没有用 props 接收 msg1 的话就是 </span></span></span><span class="hljs-template-variable">&#123; msg1: &quot;1111&quot;, msg2:&quot;2222&quot;, title: &quot;3333&quot; &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx.<span class="hljs-property">attrs</span>) <span class="hljs-comment">// </span></span></span><span class="hljs-template-variable">&#123; msg2:&quot;2222&quot;, title: &quot;3333&quot; &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法二 适用于 Vue3.2版本</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> attrs = <span class="hljs-title function_">useAttrs</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attrs) <span class="hljs-comment">// </span></span></span><span class="hljs-template-variable">&#123; msg2:&quot;2222&quot;, title: &quot;3333&quot; &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><a id="v-model">v-model</a>可以支持多个数据双向绑定<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// Parent.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">v-model:key</span>=<span class="hljs-string">&quot;key&quot;</span> <span class="hljs-attr">v-model:value</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref, reactive &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> key = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;1111&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;2222&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// Child.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handlerClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法一  不适用于 Vue3.2版本，该版本 useContext()已废弃</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useContext &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> </span></span><span class="hljs-template-variable">&#123; emit &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="hljs-title function_">useContext</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法二 适用于 Vue3.2版本，不需要引入</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// import </span></span></span><span class="hljs-template-variable">&#123; defineEmits &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 用法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handlerClick</span> = (<span class="hljs-params"></span>) =&gt; </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        emit(&quot;update:key&quot;, &quot;新的key&quot;)</span><br><span class="hljs-template-variable">        emit(&quot;update:value&quot;, &quot;新的value&quot;)</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><a id="provide/inject"><strong>provide&#x2F;inject</strong></a>依赖注入<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// Parent.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; provide &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;沐华&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// Child.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; inject &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> name = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&quot;name&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name) <span class="hljs-comment">// 沐华</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">复制代码</span><br></code></pre></td></tr></table></figure></li><li><a id="Vuex">Vuex</a><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pf">// store/index.js<br>import &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br>export <span class="hljs-keyword">default</span> createStore(&#123;<br>    <span class="hljs-keyword">state</span>:&#123; count: <span class="hljs-number">1</span> &#125;,<br>    getters:&#123;<br>        getCount: <span class="hljs-keyword">state</span> =&gt; <span class="hljs-keyword">state</span>.count<br>    &#125;,<br>    mutations:&#123;<br>        add(<span class="hljs-keyword">state</span>)&#123;<br>            <span class="hljs-keyword">state</span>.count++<br>        &#125;<br>    &#125;<br>&#125;)<br> <br>// main.js<br>import &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br>import App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span><br>import store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span><br>createApp(App).use(store).mount(<span class="hljs-string">&quot;#app&quot;</span>)<br> <br>// Page.vue<br>// 方法一 直接使用<br><span class="hljs-variable">&lt;template&gt;</span><br>    <span class="hljs-variable">&lt;div&gt;</span>&#123;&#123; <span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.count &#125;&#125;&lt;/div&gt;<br>    <span class="hljs-variable">&lt;button @click=&quot;$store.commit(&#x27;add&#x27;)&quot;&gt;</span>按钮&lt;/button&gt;<br>&lt;/template&gt;<br> <br>// 方法二 获取<br><span class="hljs-variable">&lt;script setup&gt;</span><br>    import &#123; useStore, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br>    <span class="hljs-keyword">const</span> store = useStore()<br>    console.<span class="hljs-keyword">log</span>(store.<span class="hljs-keyword">state</span>.count) // <span class="hljs-number">1</span><br> <br>    <span class="hljs-keyword">const</span> count = computed(()=&gt;store.<span class="hljs-keyword">state</span>.count) // 响应式，会随着vuex数据改变而改变<br>    console.<span class="hljs-keyword">log</span>(count) // <span class="hljs-number">1</span> <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><a id="mitt"><strong>mitt</strong></a><ol><li>Vue3 中没有了 EventBus 跨组件通信，但是现在有了一个替代的方案 mitt.js，原理还是 EventBus</li><li>先安装 <code>npm i mitt -S</code></li><li>封装  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mitt.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span><br><span class="hljs-keyword">const</span> mitt = <span class="hljs-title function_">mitt</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> mitt<br></code></pre></td></tr></table></figure></li><li>通信 <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// 组件 A</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mitt&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    mitt.emit(&#x27;handleChange&#x27;)</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">// 组件 B </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mitt&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; onUnmounted &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">someMethed</span> = (<span class="hljs-params"></span>) =&gt; </span></span><span class="hljs-template-variable">&#123; ... &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">mitt.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;handleChange&#x27;</span>,someMethed)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span></span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    mitt.off(&#x27;handleChange&#x27;,someMethed)</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>React-个人学习归纳</title>
    <link href="/2024/01/23/Front-end/React/ReactStart/"/>
    <url>/2024/01/23/Front-end/React/ReactStart/</url>
    
    <content type="html"><![CDATA[<ol><li><h4 id="项目创建及目录结构"><a href="#项目创建及目录结构" class="headerlink" title="项目创建及目录结构"></a>项目创建及目录结构</h4><ol><li>使用官方的脚手架<ol><li>通过npx create-react-app <projectname>能创建一个最基本的react项目)</li><li><strong>只做了react基本的搭建和构建，没有配上任何路由和状态管理。项目使用webpack构建</strong></li><li>上面安装如果失败，尝试下方方法：<ol><li>全局安装create-react-app <code>npm install -g create-react-app</code></li><li>创建一个名为 my-react的项目<code>create-react-app my-react</code></li><li><a href="https://blog.csdn.net/m0_47670683/article/details/124413133">create-react-app报错的解决方法</a></li></ol></li></ol></li><li>使用市场上集成脚手架<ol><li>官方脚手架提供的项目模板非常简单，因此也有很多集成的脚手架</li><li>典型的比如umi。这一类脚手架创建出来的项目会集成好很多功能，比如路由，mock</li></ol></li><li>两个核心库<ol><li>react react核心库，提供react的各个功能</li><li>React-dom 提供一些dom操作方法 用于把react创建出来的react对象挂载到真正的htmldom中，或者从htmldom中卸载。核心作用类似于vue中的mount。</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><br><span class="hljs-comment">// React.StrictMode 开启严格模式</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br><br><span class="hljs-comment">// 卸载(2s后页面清除)</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  root.<span class="hljs-title function_">unmount</span>();<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="组件中的jsx"><a href="#组件中的jsx" class="headerlink" title="组件中的jsx"></a>组件中的jsx</h4><ol><li>组件<ol><li>组件化开发，定义一个基本组件的必要条件：<ol><li><strong>组件html模板</strong></li><li><strong>数据和方法</strong></li></ol></li><li>react实现(函数组件及class组件)；由此思考为什么可以在js中直接如此返回？由此引申出jsx。<strong>组件首字母一定要大写</strong>，这是因为当React解析JSX代码时，如果遇到以小写字母开头的标签，它将被视为HTML标签或React内置组件。而如果遇到以大写字母开头的标签，React将其视为自定义组件。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 函数组件-新版本写法 </span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">FnHello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-comment">// class组件-老版本写法</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>      <span class="hljs-variable language_">super</span>(props)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>helloClass<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">FnHello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">FnHello</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HelloClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloClass</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure></li></ol></li><li>jsx的特点<ol><li>直接js中混用（js文件后缀直接修改为jsx也是可以的）<ol><li>react项目利用babel做了对js的编译，所以是可以在js里写jsx的</li></ol></li><li>写法接近js，jsx几乎和js一样，不同点在于，可以更方便的写html在js里，写在js里的html最后会被编译成一个js对象，也可以用react自带createElement创建这个对象</li><li><strong>jsx和react是相互独立的。react可以用自带createElement创建这个对象，和jsx创建的dom是一模一样的</strong>。 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fnreactdom</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">&#x27;div&#x27;</span>,[],<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-comment">// 元素，属性，内容</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>jsx里面渲染不同内容的区别<table><thead><tr><th>内容</th><th>渲染</th></tr></thead><tbody><tr><td>字符串、数字</td><td>直接渲染</td></tr><tr><td>方法</td><td>无法渲染</td></tr><tr><td>对象</td><td>只能渲染element对象</td></tr><tr><td>布尔值</td><td>不渲染任何内容</td></tr><tr><td>数组</td><td>把数组里的每一项单独渲染</td></tr><tr><td>Undefine、null</td><td>不渲染任何内容</td></tr><tr><td>表达式</td><td>运行表达式</td></tr></tbody></table> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FnHello</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">FnHello</span>();<br><span class="hljs-keyword">let</span> com1 = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FnHello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">FnHello</span>&gt;</span></span>;<br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;obj&#125;</span><br><span class="language-xml">    &#123;com1&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">FnHello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">FnHello</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloClass</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ol><li>规则模式<ol><li>类似于原生 on+方法名（首字母大写）</li><li>一定要赋值给事件一个方法 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;App&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        console.log(1);</span><br><span class="language-xml">      &#125;&#125;&gt;匿名函数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn1&#125;</span>&gt;</span>dianji<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>特别注意问题：<ol><li>不做处理的情况下，this会指向undefined<ol><li>改变this指向：<ol><li>bind</li><li>匿名箭头函数</li><li>方法本身写成箭头函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// 正常：为undefined；bind修改this指向：指向App对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>  &#125;<br>  fn2=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//App对象</span><br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;App&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        console.log(1);</span><br><span class="language-xml">      &#125;&#125;&gt;匿名函数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn1&#125;</span>&gt;</span>正常<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn1.bind(this)&#125;</span>&gt;</span>bind修改this指向<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;</span><br><span class="language-xml">        console.log(this);//App对象</span><br><span class="language-xml">      &#125;&#125;&gt;匿名指向<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn2&#125;</span>&gt;</span>方法写成匿名函数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li>给到事件绑定的一定得是一个方法，不要直接调用方法，调用方法只会在页面初次渲染指向方法。</li><li>事件绑定其他操作<ol><li>传递参数</li><li>获取事件对象<ol><li>并不是原生事件对象，而是合成的事件对象</li></ol></li><li>阻止默认行为，冒泡等</li></ol></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  fn3=<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);<br>  &#125;<br>  fn4=<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//事件对象</span><br>  &#125;<br>  fn5=<span class="hljs-function">(<span class="hljs-params">a,b,c</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">//事件对象</span><br>    <span class="hljs-comment">// 阻止冒泡,和原生js是一致的</span><br>    c.<span class="hljs-title function_">stopPropagation</span>();<br>    c.<span class="hljs-title function_">preventDefault</span>();<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;App&#x27;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 传递参数 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn3.bind(this,1,2)&#125;</span>&gt;</span>传递参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 获取事件对象;不传参数默认接收的第一个，传参数则为最后一个 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn4&#125;</span>&gt;</span>不传参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn5.bind(this,1,2)&#125;</span>&gt;</span>传参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><h4 id="组件的响应式数据"><a href="#组件的响应式数据" class="headerlink" title="组件的响应式数据"></a>组件的响应式数据</h4><ol><li>类组件响应式数据的定义<ol><li>响应式数据定义在类的state属性中 <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-comment">// constructor(props)&#123;</span><br>  <span class="hljs-comment">//   super(props)</span><br>  <span class="hljs-comment">//   this.state = &#123;</span><br>      <br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">//</span><br>  state = &#123;<br>    a:<span class="hljs-number">0</span><br>  &#125;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> &lt;div className=&#x27;<span class="hljs-type">App</span>&#x27;&gt;<br>      &#123;<span class="hljs-keyword">this</span>.state.a&#125;<br>    &lt;/div&gt;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>react响应式体系的原理<ol><li>react不能像vue一样直接修改触发更新</li><li>react修改能改值，但无法触发更新，因为react没有像vue一样监听get和set，而是在调用setState的时候调用react的更新操作 <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pf">class App extends React.Component &#123;<br>  <span class="hljs-keyword">state</span> = &#123;<br>    a:<span class="hljs-number">0</span><br>  &#125;<br>  addA=()=&gt;&#123;<br>    this.<span class="hljs-built_in">set</span>State(&#123;<br>      a:++this.<span class="hljs-keyword">state</span>.a<br>    &#125;)<br>  &#125;<br>  addB=()=&gt;&#123;<br>    this.<span class="hljs-keyword">state</span>.a+=<span class="hljs-number">1</span>;<br>    this.<span class="hljs-built_in">set</span>State(&#123;&#125;)<br>  &#125;<br>  addC=()=&gt;&#123;<br>    this.<span class="hljs-built_in">set</span>State((<span class="hljs-keyword">state</span>)=&gt;&#123;<br>      return &#123;<br>        a: ++<span class="hljs-keyword">state</span>.a<br>      &#125;<br>    &#125;)<br>  &#125;<br>  render() &#123;<br>    return <span class="hljs-variable">&lt;div className=&#x27;App&#x27;&gt;</span><br>      &#123;this.<span class="hljs-keyword">state</span>.a&#125;<br>      <span class="hljs-variable">&lt;button onClick=&#123;this.addA&#125;&gt;</span>a加一第一种写法&lt;/button&gt;<br>      <span class="hljs-variable">&lt;button onClick=&#123;this.addB&#125;&gt;</span>a加一第二种写法&lt;/button&gt;<br>      <span class="hljs-variable">&lt;button onClick=&#123;this.addC&#125;&gt;</span>a加一第三种写法&lt;/button&gt;<br>    &lt;/div&gt;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>setState流程<ol><li>调用setState</li><li>给入一个对象</li><li>给入的对象和state对象进行浅合并</li><li>合并后调用更新方法进行更新</li><li>关键点：<ol><li><strong>通过浅合并来修改数据object.assign(),由此修改对象数据要注意展开原state,否则原对象属性会丢失</strong> <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pf">class App extends React.Component &#123;<br>  <span class="hljs-keyword">state</span> = &#123;<br>    a:<span class="hljs-number">0</span>,<br>    c:&#123;<br>      c1:<span class="hljs-number">1</span>,<br>      c2:<span class="hljs-number">2</span>,<br>      c9:<span class="hljs-number">9</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">set</span>C=()=&gt;&#123;<br>    this.<span class="hljs-built_in">set</span>State(&#123;<br>      a:<span class="hljs-number">1</span>,<br>      c:&#123;<br>        ...this.<span class="hljs-keyword">state</span>.c,<br>        c1:<span class="hljs-number">2</span><br>      &#125;<br>    &#125;)<br>  &#125;<br>  render() &#123;<br>    return <span class="hljs-variable">&lt;div className=&#x27;App&#x27;&gt;</span><br>      <span class="hljs-variable">&lt;div&gt;</span><br>        &#123;this.<span class="hljs-keyword">state</span>.a&#125; <br>        <span class="hljs-variable">&lt;br/&gt;</span><br>        &#123;this.<span class="hljs-keyword">state</span>.c.c1&#125; <br>        <span class="hljs-variable">&lt;button onClick=&#123;this.setC&#125;&gt;</span><span class="hljs-built_in">set</span>C&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>调用setState方法会触发更新，修改state并不会触发更新</li></ol></li></ol></li><li>setState方法的修改是异步的<ol><li>所以如果我们要获取修改后的值，需要在setState的第二个参数里获取 <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span> = &#123;<br>  a:<span class="hljs-number">0</span>,<br>  c:&#123;<br>    c1:<span class="hljs-number">1</span>,<br>    c2:<span class="hljs-number">2</span>,<br>    c9:<span class="hljs-number">9</span><br>  &#125;<br>&#125;<br><span class="hljs-built_in">set</span>C=()=&gt;&#123;<br>  this.<span class="hljs-built_in">set</span>State(&#123;<br>    a:<span class="hljs-number">1</span>,<br>    c:&#123;<br>      ...this.<span class="hljs-keyword">state</span>.c,<br>      c1:<span class="hljs-number">2</span><br>    &#125;<br>  &#125;,()=&gt;&#123;<br>    // 在这里才能获取到更新后的值<br>    console.<span class="hljs-keyword">log</span>(this.<span class="hljs-keyword">state</span>.a);//<span class="hljs-number">1</span><br>  &#125;)<br>  console.<span class="hljs-keyword">log</span>(this.<span class="hljs-keyword">state</span>.a);//<span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>setState的一些特性<ol><li>setState方法多次修改，会合并为一次，统一更新</li><li>setState返回会触发更新，不管你是否有修改，这造成一个问题：重复修改为相同的值也会让组件更新<ol><li>解决方法：<ol><li><code>class App extends React.PureComponent </code>,PureComponent是优化后的Component，解决了一些性能问题，其中包括上述问题的优化</li><li>PureComponent会根据state是否改变来决定是否更新，而对于对象数组这样的引用类型判断他是否改变的原理是看他的内存地址，而不是内容，所以在PureComponent下修改对象和数组，需要赋予一个新对象，一般先拷贝一份在进行操作  <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pf">let _arr = [...this.<span class="hljs-keyword">state</span>.arr];<br>_arr.push(<span class="hljs-number">4</span>);<br>this.<span class="hljs-built_in">set</span>State(&#123;<br>    arr: _arr<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li>一定不要在render里直接setState，会造成死循环。</li></ol></li></ol></li></ol></li><li><h4 id="条件渲染和列表循环"><a href="#条件渲染和列表循环" class="headerlink" title="条件渲染和列表循环"></a>条件渲染和列表循环</h4><ol><li>react没有vue一样的指令，一切操作本质都是通过运算生成不同的内容，渲染得到不同的页面</li><li>条件渲染的本质：react渲染undefined，null，空字符串，false不会渲染成任何内容 <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pf">    class App extends React.Component &#123;<br>  <span class="hljs-keyword">state</span> = &#123;<br>    show: true,<br>  &#125;;<br>  f1() &#123;<br>    if (this.<span class="hljs-keyword">state</span>.show) &#123;<br>      return <span class="hljs-variable">&lt;div&gt;</span><span class="hljs-number">1</span>&lt;/div&gt;;<br>    &#125; else &#123;<br>      return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-variable">&lt;div className=&quot;App&quot;&gt;</span><br>        <span class="hljs-variable">&lt;div&gt;</span>条件渲染&lt;/div&gt;<br>        &#123;this.<span class="hljs-keyword">state</span>.show ? <span class="hljs-variable">&lt;div&gt;</span><span class="hljs-number">123</span>&lt;/div&gt; : <span class="hljs-string">&quot;&quot;</span>&#125;<br>        &#123;this.f1()&#125;<br>        <span class="hljs-variable">&lt;button</span><br><span class="hljs-variable">          onClick=&#123;() =&gt;</span> &#123;<br>            this.<span class="hljs-built_in">set</span>State(&#123;<br>              show: !this.<span class="hljs-keyword">state</span>.show,<br>            &#125;);<br>          &#125;&#125;<br>        &gt;<br>          切换显隐<br>        &lt;/button&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>列表循环的本质<ol><li>渲染一个数组会把数组里的每一项单独取出渲染</li><li>那么编写一个里面存放的都是html结构的数组，就会渲染成列表</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>      <span class="hljs-attr">originArr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    &#125;;<br>  <br>    <span class="hljs-title function_">getArr</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> newAry = [];<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">originArr</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        newAry.<span class="hljs-title function_">push</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);<br>      &#125;);<br>      <span class="hljs-keyword">return</span> newAry;<br>    &#125;<br>  <br>    addData = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> newArr = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">originArr</span>];<br>      newArr.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">originArr</span>: newArr,<br>      &#125;);<br>    &#125;;<br>  <br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;/* [1,2,3]转化为[<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>] */&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表渲染<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.originArr&#125;</span><br><span class="language-xml">          &#123;/* &#123;this.getArr()&#125; */&#125;</span><br><span class="language-xml">          &#123;/* map会直接返回数组 */&#125;</span><br><span class="language-xml">          &#123;this.state.originArr.map((item) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;</span><br><span class="language-xml">          &#125;)&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.addData&#125;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      );<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="6"><li><h4 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h4><ol><li>react表单操作和原生js操作一致<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-title">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> &#123;<br>  state = &#123;<br>    inputValue: <span class="hljs-string">&quot;&quot;</span>,<br>    checkedArr: [<span class="hljs-string">&quot;c1&quot;</span>],<br>  &#125;;<br><br>  checkChangeOption = (e) =&gt; &#123;<br>    let _arr = [...<span class="hljs-keyword">this</span>.state.checkedArr];<br>    <span class="hljs-keyword">if</span> (e.target.checked) &#123;<br>      _arr.push(e.target.value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      _arr.splice(_arr.indexOf(e.target.value), <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>.setState(<br>      &#123;<br>        checkedArr: _arr,<br>      &#125;,<br>      () =&gt; &#123;<br>        console.log(<span class="hljs-keyword">this</span>.state.checkedArr, <span class="hljs-string">&quot;this.state.checkedArr&quot;</span>);<br>      &#125;<br>    );<br>  &#125;;<br><br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;App&quot;</span>&gt;<br>        &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;&lt;/div&gt;<br>        &#123;<span class="hljs-comment">/* input输入框 */</span>&#125;<br>        &lt;input<br>          value=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;<br>          onInput=&#123;(e) =&gt; &#123;<br>            <span class="hljs-keyword">this</span>.setState(&#123;<br>              inputValue: e.target.value,<br>            &#125;);<br>            console.log(e.target.value);<br>          &#125;&#125;<br>        /&gt;<br>        &lt;br /&gt;<br>        &#123;<span class="hljs-comment">/* checkbox 设置value获取check状态 */</span>&#125;<br>        &lt;input<br>          checked=&#123;<span class="hljs-keyword">this</span>.state.checkedArr.indexOf(<span class="hljs-string">&quot;c1&quot;</span>) !== -<span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-keyword">this</span>.checkChangeOption&#125;<br>          type=<span class="hljs-string">&quot;checkbox&quot;</span><br>          name=<span class="hljs-string">&quot;choose&quot;</span><br>          value=<span class="hljs-string">&quot;c1&quot;</span><br>        /&gt;<br>        选项一<br>        &lt;input<br>          checked=&#123;<span class="hljs-keyword">this</span>.state.checkedArr.indexOf(<span class="hljs-string">&quot;c2&quot;</span>) !== -<span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-keyword">this</span>.checkChangeOption&#125;<br>          type=<span class="hljs-string">&quot;checkbox&quot;</span><br>          name=<span class="hljs-string">&quot;choose&quot;</span><br>          value=<span class="hljs-string">&quot;c2&quot;</span><br>        /&gt;<br>        选项二<br>        &lt;input<br>          checked=&#123;<span class="hljs-keyword">this</span>.state.checkedArr.indexOf(<span class="hljs-string">&quot;c3&quot;</span>) !== -<span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-keyword">this</span>.checkChangeOption&#125;<br>          type=<span class="hljs-string">&quot;checkbox&quot;</span><br>          name=<span class="hljs-string">&quot;choose&quot;</span><br>          value=<span class="hljs-string">&quot;c3&quot;</span><br>        /&gt;<br>        选项三<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="Props和组件间传值，插槽"><a href="#Props和组件间传值，插槽" class="headerlink" title="Props和组件间传值，插槽"></a>Props和组件间传值，插槽</h4><ol><li>props是react中的核心</li><li>在react中，一切写在组件上的属性和子节点都被规划为了props。</li></ol></li></ol><p class="note note-info">欲知后事如何，且听下回分解</p>    ]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>跨域</title>
    <link href="/2024/01/02/Front-end/JavaScript/WebKuayu/"/>
    <url>/2024/01/02/Front-end/JavaScript/WebKuayu/</url>
    
    <content type="html"><![CDATA[<!-- [借鉴文章](https://juejin.cn/post/7285576848237412387) --><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ol><li>什么是跨域<ol><li>导致<strong>跨域</strong>问题产生的根本原因是来自浏览器的<strong>同源策略</strong></li><li>同源策略是浏览器的重要安全策略，用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互，其中origin指Web文档的来源，Web内容的来源取决于访问的URL的<strong>方案（协议），主机（域名）和端口定义</strong></li><li>在浏览器同源策略限制下，向不同源（不同协议、不同域名或者不同端口）发送XHR请求时，浏览器认为该请求不受信任，可能存在安全隐患，禁止该请求，并作出不正常的响应。</li></ol></li><li>跨域解决方案<ol><li><h4 id="一、关闭浏览器的同源策略"><a href="#一、关闭浏览器的同源策略" class="headerlink" title="一、关闭浏览器的同源策略"></a>一、关闭浏览器的同源策略</h4><ol><li>IE浏览器：进入ie的网际网路选项设置，然后选择安全性，再选择自订等级，然后下拉，找到「存取跨网络的资料来源」，选择启用即可</li><li>chrome浏览器：首先需要关闭所有打开的浏览器窗口，在命令行窗口输入chrome –disable-web-security</li><li>FireFox浏览器：在地址栏输入about:config，然后下拉找到security.fileuri.strict_origin_policy，然后设置为false即可</li><li>这样的做法确实从根本上解决了跨域问题，但禁用同源策略会导致安全风险，所有并不推荐这样做</li></ol></li><li><h4 id="二、JSONP"><a href="#二、JSONP" class="headerlink" title="二、JSONP"></a>二、JSONP</h4><ol><li>在项目开发中常常会引入外链的图片、样式文件、插件等资源，但这些请求没有跨域，因为这些属于http请求并不是会引发跨域问题的Xhr请求</li><li><strong>script标签没有跨域限制，src改成需要跨域请求的url，就能实现跨域获取资源，且不触发浏览器的同源策略，这就是JSONP的原理</strong>。</li><li>问题：<ol><li><strong>CSRF攻击</strong> 当前端发起一个伪造的恶意JSONP请求时，服务端的敏感信息，如用户的个人信息，密码等存在泄露的风险，需要通过验证JSONP的调用来源（Referer），服务端判断 Referer 是否是白名单，或者部署随机 Token 来防御攻击</li><li><strong>XSS漏洞</strong> <ol><li>不严谨的content-type类型会导致的 XSS 漏洞，如果没有严格定义好 Content-Type，例如 Content-Type: application&#x2F;json，或者对请求url的query参数没有进行过滤，导致请求参数是一段恶意JavaScript代码，并被服务端接收执行并返回，那么前端就会执行这段恶意代码 </li><li>通过严格定义 Content-Type: application&#x2F;json，然后严格过滤 callback 后的参数并且限制长度（进行字符转义，例如&lt;换成&amp;lt，&gt;换成&amp;gt）等，这样返回的脚本内容会变成文本格式，脚本将不会执行</li></ol></li><li><strong>仅支持GET请求方式</strong> JSOP 仅支持GET方式的请求，对于POST等其他请求方式并不能使用JSONP</li></ol></li></ol></li><li><h4 id="三、CORS"><a href="#三、CORS" class="headerlink" title="三、CORS"></a>三、CORS</h4><ol><li>Cross-Origin Resource sharing（跨域资源共享），是一种基于HTTP头的机制，该机制允许服务器标示除了它自己以外其他origin（域名，协议和端口），既浏览器在跨域的情景下仍然能从目标服务器请求并获取资源可以说CORS才是跨域问题的正统解决方案</li><li>前端任何对服务端发起的可能产生副作用的XHR类型的请求方法都会都会触发CORS中的预检机制，CORS因此将请求划分为了预检请求和简单请求两种类型<ol><li>简单请求<ol><li>CORS简单请求的策略是在请求时在请求头增加一个Origin字段，服务器收到请求后，根据该字段判断是否允许该请求访问，如果允许，在响应头信息中添加Access-Contro-Allow&#x3D;Origin字段</li><li>简单请求需要满足以下规定:<ol><li>请求方法必须是 GET POST HEAD 中的一种</li><li>头部字段必须满足CORS的安全规范</li><li>请求头的Content-Type字段值为以下三种之一<ol><li>text&#x2F;plain</li><li>application&#x2F;x-www-form-urlencoded </li><li>multipart&#x2F;form-data</li></ol></li></ol></li></ol></li><li>预检请求<ol><li>对于预检请求CORS中通过预检机制(preflight request) 检查服务器是否允许浏览器发送真实请求，浏览器会先发送一个预检请求(option请求)，请求中会携带真实请求的请求信息：<ol><li>origin：请求的来源</li><li>Access-Control-Request-Method： 通知服务器在真正的请求中会采用哪种HTTP方法（GET,POST,DELETE…）</li><li>Access-Control-Request-Headers：通知服务器在真正的请求中会采用哪些请求头</li></ol></li><li>服务端在收到预检请求后，会根据以上的请求信息，判断是否预检通过，这体现在服务端对预检请求返回的响应头里</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso">res.<span class="hljs-keyword">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">//允许全部域名跨域，可以指定特点域名，逗号分隔</span><br><br>res.<span class="hljs-keyword">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>); <span class="hljs-comment">//允许携带cookie</span><br><br>res.<span class="hljs-keyword">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;X-Requested-With&quot;</span>); <span class="hljs-comment">//允许传输的请求头</span><br><br>res.<span class="hljs-keyword">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>); <span class="hljs-comment">//允许发送的xhr模式</span><br><br>res.<span class="hljs-keyword">header</span>(<span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>,t); <span class="hljs-comment">//预检结果的缓存时间，即t时间内的该请求都按照本次的响应结果执行              </span><br></code></pre></td></tr></table></figure><p>当浏览器从预检请求的响应头中查找到以上的内容时，就会跳过同源策略，并允许真正的请求发送到服务端</p><ol><li><h4 id="四、服务器代理（ProxyServer）"><a href="#四、服务器代理（ProxyServer）" class="headerlink" title="四、服务器代理（ProxyServer）"></a>四、服务器代理（ProxyServer）</h4><ol><li>同源策略主要是限制浏览器和服务器之间的请求，服务器与服务器之间并不存在跨域问题</li><li>前端将请求发送给同源或者设置好跨域的代理服务器，代理服务器收到代理请求后，将真正的请求转发到目标服务器，并接受其响应结果，再把接收到的结果响应给前端</li></ol></li></ol><p><img src="/img/js/17043461858819.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>javaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript</title>
    <link href="/2023/12/01/Front-end/JavaScript/TypeScriptBaseType/"/>
    <url>/2023/12/01/Front-end/JavaScript/TypeScriptBaseType/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.tslang.cn/docs/home.html">TypeScript官方中文文档地址</a></p><h1 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h1><ol><li><code>npm install -g typescript</code></li><li>使用.ts扩展名创建TypeScript文件 例<code>greeter.ts</code></li><li>编译代码 <code>tsc greeter.ts</code> 输出结果为一个 <code>greeter.js</code>文件</li></ol><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="1、布尔值（boolean）"><a href="#1、布尔值（boolean）" class="headerlink" title="1、布尔值（boolean）"></a>1、布尔值（boolean）</h2><ol><li><code>let isBoolean: boolean = false;</code></li></ol><h2 id="2、数字（number）"><a href="#2、数字（number）" class="headerlink" title="2、数字（number）"></a>2、数字（number）</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> decLiteral: number = <span class="hljs-number">6</span>;<br><span class="hljs-built_in">let</span> hexLiteral: number = <span class="hljs-number">0xf00d</span>;<br><span class="hljs-built_in">let</span> binaryLiteral: number = <span class="hljs-number">0b1010</span>;<br><span class="hljs-built_in">let</span> octalLiteral: number = <span class="hljs-number">0o744</span>;<br></code></pre></td></tr></table></figure><h2 id="3、字符串（string）"><a href="#3、字符串（string）" class="headerlink" title="3、字符串（string）"></a>3、字符串（string）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 双引号（ &quot;）或单引号（&#x27;）表示字符串</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;bob&quot;</span>;<br>name = <span class="hljs-string">&quot;smith&quot;</span>;<br><br><span class="hljs-comment">//使用模版字符串，它可以定义多行文本和内嵌表达式。 </span><br><span class="hljs-comment">//这种字符串是被反引号包围（ `），并且以$&#123; expr &#125;这种形式嵌入表达式</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Gene`</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;name&#125;</span>.I&#x27;ll be <span class="hljs-subst">$&#123;age + <span class="hljs-number">1</span>&#125;</span> years old next month.`</span>;<br><br><span class="hljs-comment">//这与下面定义sentence的方式效果相同：</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> =<br>  <span class="hljs-string">&quot;Hello, my name is &quot;</span> +<br>  name +<br>  <span class="hljs-string">&quot;.\n\n&quot;</span> +<br>  <span class="hljs-string">&quot;I&#x27;ll be &quot;</span> +<br>  (age + <span class="hljs-number">1</span>) +<br>  <span class="hljs-string">&quot; years old next month.&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="4、数组（-）"><a href="#4、数组（-）" class="headerlink" title="4、数组（[]）"></a>4、数组（[]）</h2><p>有两种方式可以定义数组</p><ol><li>在元素类型后面接上 []:<code>let list: number[] = [1, 2, 3];</code></li><li>使用数组泛型，Array&lt;元素类型&gt;:<code>let list: Array&lt;number&gt; = [1, 2, 3];</code></li></ol><h2 id="5、元组（-string-number-）"><a href="#5、元组（-string-number-）" class="headerlink" title="5、元组（[string, number]）"></a>5、元组（[string, number]）</h2><ol><li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Declare a tuple type</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br><span class="hljs-comment">// Initialize it</span><br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>]; <span class="hljs-comment">// OK</span><br><span class="hljs-comment">// Initialize it incorrectly</span><br>x = [<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]; <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure>当访问一个已知索引的元素，会得到正确的类型：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x[<span class="hljs-number">0</span>].substr(<span class="hljs-number">1</span>)); <span class="hljs-comment">// OK</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x[<span class="hljs-number">1</span>].substr(<span class="hljs-number">1</span>)); <span class="hljs-comment">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span><br></code></pre></td></tr></table></figure>当访问一个越界的元素，会使用联合类型替代：<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">x[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;world&#x27;</span>; // OK, 字符串可以赋值给<span class="hljs-built_in">(string</span> |<span class="hljs-built_in"> number</span>)类型<br><br>console.log(x[<span class="hljs-number">5</span>].toString()); // OK, <span class="hljs-string">&#x27;string&#x27;</span> 和 <span class="hljs-string">&#x27;number&#x27;</span> 都有 toString<br><br>x[<span class="hljs-number">6</span>] =<span class="hljs-built_in"> true</span>; // Error, 布尔不是<span class="hljs-built_in">(string</span> |<span class="hljs-built_in"> number</span>)类型<br></code></pre></td></tr></table></figure></li></ol><h2 id="6、枚举（enum）"><a href="#6、枚举（enum）" class="headerlink" title="6、枚举（enum）"></a>6、枚举（enum）</h2><p>enum类型是对JavaScript标准数据类型的一个补充<br>默认情况下，从0开始为元素编号.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-built_in">enum</span> <span class="hljs-keyword">colorEnum</span> &#123;<br>  red <span class="hljs-operator">=</span> <span class="hljs-number">3</span>,<br>  yellow <span class="hljs-operator">=</span> <span class="hljs-number">6</span>,<br>  blue <span class="hljs-operator">=</span> <span class="hljs-number">9</span><br>&#125;<br><span class="hljs-keyword">let</span> color<span class="hljs-operator">:</span> colorEnum <span class="hljs-operator">=</span> colorEnum.blue;<br><span class="hljs-keyword">let</span> color2<span class="hljs-operator">:</span> <span class="hljs-type">string</span> <span class="hljs-operator">=</span> colorEnum[<span class="hljs-number">6</span>]; <br>console.log(color,color2,colorEnum);<span class="hljs-comment">// 9 yellow</span><br></code></pre></td></tr></table></figure><h2 id="7、any（any）"><a href="#7、any（any）" class="headerlink" title="7、any（any）"></a>7、any（any）</h2><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">let</span> list: <span class="hljs-type">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;free&quot;</span>];<br><span class="hljs-keyword">let</span> notSure: <span class="hljs-type">any</span> = <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h2 id="8、void（void）"><a href="#8、void（void）" class="headerlink" title="8、void（void）"></a>8、void（void）</h2><ol><li>某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">warnUser</span>(<span class="hljs-params"></span>): <span class="hljs-title function_">void</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;This is my warning message&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：<code>let unusable: void = undefined;</code></li></ol><h2 id="9、undefined和null"><a href="#9、undefined和null" class="headerlink" title="9、undefined和null"></a>9、undefined和null</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Not much else we can assign to these variables!</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。</p><h2 id="10、never"><a href="#10、never" class="headerlink" title="10、never"></a>10、never</h2><ol><li>never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。</li><li>never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span><span class="hljs-params">(message: string)</span>: never &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(message);<br>&#125;<br><br><span class="hljs-comment">// 推断的返回值类型为never</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;Something failed&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">infiniteLoop</span><span class="hljs-params">()</span>: never &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="11、Object"><a href="#11、Object" class="headerlink" title="11、Object"></a>11、Object</h2><p>object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">o: <span class="hljs-built_in">object</span> | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">void</span>;<br><br><span class="hljs-title function_">create</span>(&#123; <span class="hljs-attr">prop</span>: <span class="hljs-number">0</span> &#125;); <span class="hljs-comment">// OK</span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// OK</span><br><br><span class="hljs-title function_">create</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// Error</span><br><span class="hljs-title function_">create</span>(<span class="hljs-string">&quot;string&quot;</span>); <span class="hljs-comment">// Error</span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">// Error</span><br><span class="hljs-title function_">create</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><p><a href="https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-declare.md">declare关键字详解</a></p><h2 id="12、类型断言"><a href="#12、类型断言" class="headerlink" title="12、类型断言"></a>12、类型断言</h2><p>类型断言有两种形式。 其一是“尖括号”语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><p>另一个为as语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="1-数组解构"><a href="#1-数组解构" class="headerlink" title="1. 数组解构"></a>1. 数组解构</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let input: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><br><span class="hljs-comment">//   创建了2个命名变量 first 和 second</span><br>let [<span class="hljs-built_in">first</span>, <span class="hljs-built_in">second</span>] = input;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;first`</span>, <span class="hljs-built_in">first</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;second`</span>, <span class="hljs-built_in">second</span>); <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">//   在数组里使用...语法创建剩余变量：</span><br>let [one, ...others] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;one`</span>, one); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;others`</span>, others); <span class="hljs-comment">// [2,3,4,5]</span><br><br><span class="hljs-comment">//   由于是JavaScript, 你可以忽略你不关心的尾随元素：</span><br>let [firstOne] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;firstOne`</span>, firstOne); <span class="hljs-comment">// 1</span><br><br>let [, two, , four] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;two`</span>, two); <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`output-&gt;four`</span>, four); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="2-对象解构"><a href="#2-对象解构" class="headerlink" title="2. 对象解构"></a>2. 对象解构</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> o = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;demo&quot;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><span class="hljs-comment">// 通过 o.a and o.b 创建了 a 和 b 。 注意，如果你不需要 c 你可以忽略它。</span><br><span class="hljs-keyword">let</span> &#123; a, b &#125; = o;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;a`</span>, a); <span class="hljs-comment">// demo</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;b`</span>, b); <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">// 就像数组解构，你可以用没有声明的赋值：</span><br><span class="hljs-comment">// 注意，我们需要用括号将它括起来，因为Javascript通常会将以 &#123; 起始的语句解析为一个块。</span><br>(&#123; a, b &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">10</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;one`</span>, a); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;two`</span>, b); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">//   可以在对象里使用...语法创建剩余变量：</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">a</span>: newA, ...other &#125; = o;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;other`</span>, other); <span class="hljs-comment">// &#123; b:11,c:true &#125;</span><br><br><span class="hljs-comment">//   属性重命名</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">a</span>: newNameA, <span class="hljs-attr">b</span>: newNameB &#125; = o;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;newNameA`</span>, newNameA); <span class="hljs-comment">// demo</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;newNameB`</span>, newNameB); <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//   指定类型</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">a</span>: new1, <span class="hljs-attr">b</span>: new2 &#125;: &#123; <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span> &#125; = o;<br><br><span class="hljs-comment">//   默认值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setDefault</span>(<span class="hljs-params">params: &#123; a: <span class="hljs-built_in">string</span>; b?: <span class="hljs-built_in">number</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; a, b &#125; = params;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;a`</span>, a);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;b`</span>, b);<br>&#125;<br><span class="hljs-title function_">setDefault</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;110&quot;</span> &#125;); <span class="hljs-comment">// 110 undefind</span><br><span class="hljs-title function_">setDefault</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;110&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">11</span> &#125;); <span class="hljs-comment">// 110  11</span><br></code></pre></td></tr></table></figure><h3 id="3-函数声明"><a href="#3-函数声明" class="headerlink" title="3.函数声明"></a>3.函数声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解构也能用于函数声明</span><br>type C = &#123;<br>  <span class="hljs-attr">a</span>: string;<br>  b?: number;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">&#123; a, b &#125;: C</span>): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;a`</span>, a);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;b`</span>, b);<br>&#125;<br><br><span class="hljs-title function_">f</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;); <span class="hljs-comment">// 11 1</span><br><br><span class="hljs-comment">// 通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">&#123; a = <span class="hljs-string">&quot;&quot;</span>, b = <span class="hljs-number">0</span> &#125; = &#123;&#125;</span>): <span class="hljs-keyword">void</span> &#123;&#125;<br><span class="hljs-comment">// 上面的代码是一个类型推断的例子</span><br><br><span class="hljs-comment">// 在解构属性上给予一个默认或可选的属性用来替换主初始化列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">&#123; a, b = <span class="hljs-number">0</span> &#125; = &#123; a: <span class="hljs-string">&quot;&quot;</span> &#125;</span>): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;a`</span>, a);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;b`</span>, b);<br>&#125;<br><br><span class="hljs-title function_">h</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;1&quot;</span> &#125;); <span class="hljs-comment">// 1 0</span><br><span class="hljs-title function_">h</span>(); <span class="hljs-comment">// &quot;&quot; 0</span><br><span class="hljs-comment">// h(&#123;&#125;); error &#x27;a&#x27; is required if you supply an argument</span><br></code></pre></td></tr></table></figure><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">first</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">second</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> both = [<span class="hljs-number">0</span>, ...first, ...second, <span class="hljs-number">5</span>];<br><span class="hljs-comment">// 浅拷贝</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;both`</span>, both); <span class="hljs-comment">//[0,1,2,3,4,5]</span><br><br><span class="hljs-comment">// 展开对象</span><br><span class="hljs-keyword">let</span> originObj = &#123; <span class="hljs-attr">person</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>, <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-attr">what</span>: <span class="hljs-string">&quot;rice&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> statusObj = &#123; ...originObj, <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;full&quot;</span>, <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;drink&quot;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;statusObj`</span>, statusObj); <span class="hljs-comment">//&#123;person: &#x27;xiaoming&#x27;, behavior: &#x27;drink&#x27;, what: &#x27;rice&#x27;, status: &#x27;full&#x27;&#125;</span><br><span class="hljs-comment">// 像数组展开一样，它是从左至右进行处理，但结果仍为对象。 这就意味着出现在展开对象后面的属性会覆盖前面的属性。</span><br><span class="hljs-keyword">let</span> fgstatusObj = &#123; <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;play&quot;</span>, ...originObj &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;fgstatusObj`</span>, fgstatusObj); <span class="hljs-comment">// &#123;behavior: &#x27;eat&#x27;, person: &#x27;xiaoming&#x27;, what: &#x27;rice&#x27;&#125;</span><br><br><span class="hljs-comment">// 对象展开仅包含对象自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CL</span> &#123;<br>  p = <span class="hljs-number">12</span>;<br>  <span class="hljs-title function_">m</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title function_">CL</span>();<br><span class="hljs-keyword">let</span> clone = &#123; ...c &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`output-&gt;clone.p`</span>, clone.<span class="hljs-property">p</span>); <span class="hljs-comment">// 12</span><br><span class="hljs-comment">// console.log(`output-&gt;clone.m`, clone.m); // error undefind</span><br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h2 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">getDataParams</span> &#123;<br>  keyWords: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-function">function <span class="hljs-title">getData</span>(<span class="hljs-params"><span class="hljs-keyword">params</span>: getDataParams</span>)</span> &#123;<br>  console.log(`output-&gt;<span class="hljs-keyword">params</span>`, <span class="hljs-keyword">params</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">params</span> = &#123; keyWords: <span class="hljs-string">&quot;111&quot;</span>, limit: <span class="hljs-number">10</span> &#125;;<br>getData(<span class="hljs-keyword">params</span>);<br></code></pre></td></tr></table></figure><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">getDataParams</span> &#123;<br>  keyWords: <span class="hljs-built_in">string</span>;<br>  limit?: number;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">p1</span>: <span class="hljs-title class_">Point</span> = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-comment">// p1.x = 5; error 无法为“x”赋值，因为它是只读属性</span><br><br><span class="hljs-comment">// TypeScript具有ReadonlyArray&lt;T&gt;类型，它与Array&lt;T&gt;相似，</span><br><span class="hljs-comment">// 只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">radonAry</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-comment">// radonAry[0] = 2; error 类型“readonly number[]”中的索引签名仅允许读取。</span><br></code></pre></td></tr></table></figure><p><strong>readonly</strong> vs <strong>const</strong><br>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p><h2 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h2><p>如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">interface SquareConfig &#123;<br>    <span class="hljs-attribute">color</span>?: string;<br>    <span class="hljs-attribute">width</span>?: number;<br>    <span class="hljs-selector-attr">[propName: string]</span>: any;<br>&#125;<br></code></pre></td></tr></table></figure><p>跳过这些检查的方式,将这个对象赋值给一个另一个变量:因为 squareOptions不会经过额外属性检查，所以编译器不会报错。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let squareOptions</span> = &#123; colour: <span class="hljs-string">&quot;red&quot;</span>, width: 100 &#125;;<br><span class="hljs-attribute">let mySquare</span> = createSquare(squareOptions);<br></code></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">interface SearchFunc &#123;<br>  (source: string, subString: string): boolean;<br>&#125;<br><br>let mySearch: SearchFunc;<br>mySearch = function(src: string, <span class="hljs-function"><span class="hljs-keyword">sub</span>: <span class="hljs-title">string</span>): <span class="hljs-title">boolean</span> </span>&#123;<br>  let result = src.search(<span class="hljs-function"><span class="hljs-keyword">sub</span>)</span>;<br>  <span class="hljs-keyword">return</span> result &gt; -<span class="hljs-number">1</span>;<br>&#125;<br><br>// 简写 TypeScript的类型系统会推断出参数类型<br>let mySearch: SearchFunc;<br>mySearch = function (src, <span class="hljs-function"><span class="hljs-keyword">sub</span>) </span>&#123;<br>  let result = src.search(<span class="hljs-function"><span class="hljs-keyword">sub</span>)</span>;<br>  <span class="hljs-keyword">return</span> result &gt; -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h2><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// 单</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Shape</span> &#123;<br>    color: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Square</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Shape</span> &#123;<br>    sideLength: number;<br>&#125;<br><br>let square = &lt;Square&gt;&#123;&#125;;<br>square.color = <span class="hljs-string">&quot;blue&quot;</span>;<br>square.sideLength = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 多</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Shape</span> &#123;<br>    color: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">PenStroke</span> &#123;<br>    penWidth: number;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Square</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Shape</span>, <span class="hljs-symbol">PenStroke</span> &#123;<br>    sideLength: number;<br>&#125;<br><br>let square = &lt;Square&gt;&#123;&#125;;<br>square.color = <span class="hljs-string">&quot;blue&quot;</span>;<br>square.sideLength = <span class="hljs-number">10</span>;<br>square.penWidth = <span class="hljs-number">5.0</span>;<br></code></pre></td></tr></table></figure><h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>在使用JavaScript第三方库的时候</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">interface Counter &#123;<br>    (<span class="hljs-keyword">start</span>: number): string;<br>    <span class="hljs-type">interval</span>: number;<br>    <span class="hljs-keyword">reset</span>(): <span class="hljs-type">void</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> getCounter(): Counter &#123;<br>    let counter = &lt;Counter&gt;<span class="hljs-keyword">function</span> (<span class="hljs-keyword">start</span>: number) &#123; &#125;;<br>    counter.interval = <span class="hljs-number">123</span>;<br>    counter.<span class="hljs-keyword">reset</span> = <span class="hljs-keyword">function</span> () &#123; &#125;;<br>    <span class="hljs-keyword">return</span> counter;<br>&#125;<br><br>let c = getCounter();<br>c(<span class="hljs-number">10</span>);<br>c.<span class="hljs-keyword">reset</span>();<br>c.interval = <span class="hljs-number">5.0</span>;<br></code></pre></td></tr></table></figure><!--## 接口继承类--><!--# 类--><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><h2 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">identity</span><span class="hljs-params">(arg: number)</span></span>: number &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">arg</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">identity</span>&lt;<span class="hljs-title">T</span>&gt;<span class="hljs-params">(arg: T)</span></span>: T &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">arg</span>;<br>&#125;<br><br>// 使用<br>// 第一种是，传入所有的参数，包含类型参数<br>let <span class="hljs-built_in">output</span> = identity&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;myString&quot;</span>);  // <span class="hljs-built_in">type</span> of <span class="hljs-built_in">output</span> will be <span class="hljs-string">&#x27;string&#x27;</span><br>// 第二种方法更普遍。利用了类型推论 <br>let <span class="hljs-built_in">output</span> = identity(<span class="hljs-string">&quot;myString&quot;</span>);  // <span class="hljs-built_in">type</span> of <span class="hljs-built_in">output</span> will be <span class="hljs-string">&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loggingIdentity</span>&lt;<span class="hljs-title function_">T</span>&gt;(<span class="hljs-params">arg: Array&lt;T&gt;</span>): <span class="hljs-title function_">Array</span>&lt;<span class="hljs-title function_">T</span>&gt; &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arg.<span class="hljs-built_in">length</span>);  <span class="hljs-comment">// Array has a .length, so no more error</span><br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loggingIdentity</span>&lt;<span class="hljs-title function_">T</span>&gt;(<span class="hljs-params">arg: Array&lt;T&gt;</span>): <span class="hljs-title function_">Array</span>&lt;<span class="hljs-title function_">T</span>&gt; &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arg.<span class="hljs-built_in">length</span>);  <span class="hljs-comment">// Array has a .length, so no more error</span><br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><!--## 泛型类型--><p class="note note-info">欲知后事如何，且听下回分解</p>]]></content>
    
    
    <categories>
      
      <category>typeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typeScript</tag>
      
      <tag>ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React官方文档初解</title>
    <link href="/2023/11/23/Front-end/React/React/"/>
    <url>/2023/11/23/Front-end/React/React/</url>
    
    <content type="html"><![CDATA[<p><a href="https://react.docschina.org/">官方中文文档</a></p><h3 id="1、不安装体验"><a href="#1、不安装体验" class="headerlink" title="1、不安装体验"></a>1、不安装体验</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- This setup is not suitable for production. --&gt;</span><br><span class="hljs-comment">&lt;!-- Only use it in development! --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ga.jspm.io/npm:es-module-shims@1.7.0/dist/es-module-shims.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">  <span class="hljs-string">&quot;imports&quot;</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react?dev&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-string">&quot;react-dom/client&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react-dom/client?dev&quot;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">StrictMode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Greeting</span>(<span class="hljs-params">&#123; name &#125;</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">App</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Greeting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;world&quot;</span> /&gt;</span></span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));</span><br><span class="language-javascript">root.<span class="hljs-title function_">render</span>(</span><br><span class="language-javascript">  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StrictMode</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">  <span class="hljs-tag">&lt;/<span class="hljs-name">StrictMode</span>&gt;</span></span></span><br><span class="language-javascript">);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: sans-serif;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、编辑器设置"><a href="#2、编辑器设置" class="headerlink" title="2、编辑器设置"></a>2、编辑器设置</h3><ol><li>主流编辑器<ol><li><strong>VS Code</strong>(下面配置基于此编辑器)<ol><li>现如今最流行的编辑器之一。它拥有庞大的扩展市场，同时可以与 GitHub 等流行服务完美集成。</li></ol></li><li>WebStorm<ol><li>专为 JavaScript 设计的集成开发环境。</li></ol></li><li>Sublime Text<ol><li>支持 JSX 和 TypeScript，内置语法高亮和代码自动补全功能。</li></ol></li><li>Vim<ol><li>高度可配置的文本编辑器，可以非常高效地创建和更改任何类型的文本。它作为 “vi” 包含在大多数 UNIX 系统和 Apple OS X 中。</li></ol></li></ol></li><li><h4 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h4><ol><li><h5 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h5></li><li>官方文档中建议：<strong>请确保你已经为你的项目启用了 <code>eslint-plugin-react-hooks</code> 规则</strong>。这在 React 项目中是必备的，同时能帮助你及早的捕获较为严重的 bug。我们推荐的 <code>eslint-config-react-app</code> preset 中已经集成了该规则。</li></ol></li><li><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><ol><li><h5 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h5><ol><li>安装步骤<ol><li>启动vscode</li><li>使用快速打开（使用快捷键 Ctrl&#x2F;Cmd + P）</li><li>粘贴 <code>ext install esbenp.prettier-vscode</code></li><li>按回车键</li></ol></li></ol></li><li><h5 id="保存并自动格式化"><a href="#保存并自动格式化" class="headerlink" title="保存并自动格式化"></a>保存并自动格式化</h5><ol><li>在 VS Code, 按快捷键 <code>Ctrl/Cmd + Shift + P</code>.</li><li>输入 “settings”</li><li>按回车键</li><li>在搜索栏, 输入 “format on save”</li><li>确保勾选 “format on save” 选项！</li></ol></li></ol></li></ol><h3 id="3、react开发者工具"><a href="#3、react开发者工具" class="headerlink" title="3、react开发者工具"></a>3、react开发者工具</h3><ol><li>浏览器扩展<ol><li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">chrome扩展</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/react-devtools/">firefox</a></li><li><a href="https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil">edge</a></li><li>现在，如果你访问一个用 React 构建 的网站，你将看到 Components 和 Profiler 面板。<ol><li><img src="/img/article/react-1.jpg"></li></ol></li></ol></li></ol><h3 id="4、初始组件体验"><a href="#4、初始组件体验" class="headerlink" title="4、初始组件体验"></a>4、<a id="useZJ">初始组件体验</a></h3><ol><li>React 应用是由被称为 组件 的独立 UI 片段构建而成。React 组件本质上是可以任意添加标签的 JavaScript 函数。组件可以小到一个按钮，也可以大到是整个页面。这是一个 Gallery 组件，用于渲染三个 Profile 组件：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">StrictMode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">App</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Amazing scientists<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure></li><li><h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><ol><li>React 组件是一段可以 使用标签进行扩展 的 JavaScript 函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3Am.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="第一步：导出组件"><a href="#第一步：导出组件" class="headerlink" title="第一步：导出组件"></a>第一步：导出组件</h5><ol><li>export default 前缀是一种 JavaScript 标准语法（非 React 的特性）。它允许你标签一个文件中的主要函数以便你以后可以从其他文件引入它。</li></ol></li><li><h5 id="第二步：定义函数"><a href="#第二步：定义函数" class="headerlink" title="第二步：定义函数"></a>第二步：定义函数</h5><ol><li>使用 function Profile() { } 定义名为 Profile 的 JavaScript 函数。</li><li>React 组件是常规的 JavaScript 函数，但 <strong>组件的名称必须以大写字母开头</strong>，否则它们将无法运行！</li></ol></li><li><h5 id="第三步：添加标签"><a href="#第三步：添加标签" class="headerlink" title="第三步：添加标签"></a>第三步：添加标签</h5><ol><li>这个组件返回一个带有 src 和 alt 属性的 <img /> 标签。<img /> 写得像 HTML，但实际上是 JavaScript！这种语法被称为 <strong>JSX</strong>，它允许你在 JavaScript 中嵌入使用标签。</li><li>返回语句可以全写在一行上，如下面组件中所示：  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">return &lt;img src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>但是，如果你的标签和 return 关键字不在同一行，则<strong>必须把它包裹在一对括号中</strong>，如下所示： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br></code></pre></td></tr></table></figure><ol><li><strong>没有括号包裹的话，任何在 return 下一行的代码都 将被忽略！</strong></li></ol></li></ol></li><li><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><ol><li>定义了 Profile 组件，你可以在其他组件中使用它。例如，你可以导出一个内部使用了多个 Profile 组件的 Gallery 组件：<a href="#useZJ">LINK</a> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li>注意：<ol><li><section> 是小写的，所以 React 知道我们指的是 HTML 标签。</li><li><Profile /> 以大写 P 开头，所以 React 知道我们想要使用名为 Profile 的组件。</li></ol></li><li>嵌套和组织组件 <ol><li><p>组件是常规的 JavaScript 函数，所以你可以将多个组件保存在同一份文件中。当组件相对较小或彼此紧密相关时，这是一种省事的处理方式。如果这个文件变得臃肿，你也可以随时将 Profile 移动到单独的文件中</p></li><li><p>因为 Profile 组件在 Gallery 组件中渲染——甚至好几次！——我们可以认为 Gallery 是一个 父组件，将每个 Profile 渲染为一个“孩子”。这是 React 的神奇之处：你可以只定义组件一次，然后按需多处和多次使用。</p></li><li><p><strong>组件可以渲染其他组件，但是 请不要嵌套他们的定义</strong>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 🔴 永远不要在组件中定义组件</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 上面这段代码 非常慢，并且会导致 bug 产生。因此，你应该在顶层定义每个组件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// ✅ 在顶层声明组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 当子组件需要使用父组件的数据时，你需要 通过 props 的形式进行传递，而不是嵌套定义。</p></li></ol></li></ol></li></ol></li></ol><h3 id="5、组件的导入与导出"><a href="#5、组件的导入与导出" class="headerlink" title="5、组件的导入与导出"></a>5、组件的导入与导出</h3><ol><li><h4 id="根组件文件"><a href="#根组件文件" class="headerlink" title="根组件文件"></a>根组件文件</h4></li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">app.js<br> <span class="hljs-keyword">function</span> <span class="hljs-title">···</span><br></code></pre></td></tr></table></figure><p>在此示例中，所有组件目前都定义在 根组件 App.js 文件中。具体还需根据项目配置决定，有些根组件可能会声明在其他文件中。如果你使用的框架基于文件进行路由，如 Next.js，那你每个页面的根组件都会不一样</p><ol><li><h4 id="导出和导入一个组件"><a href="#导出和导入一个组件" class="headerlink" title="导出和导入一个组件"></a>导出和导入一个组件</h4><ol><li>创建 一个新的 JS 文件来存放该组件。</li><li>导出 该文件中的函数组件（可以使用 默认导出 或 具名导出） <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[filename]<span class="hljs-title class_">Gallery</span>.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/QIrZWGIs.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Alan L. Hart&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家们<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在需要使用该组件的文件中 导入（可以根据相应的导出方式使用 默认导入 或 具名导入）。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[filename]<span class="hljs-title class_">App</span>.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Gallery</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Gallery.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Gallery</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="默认-具名-导出导入"><a href="#默认-具名-导出导入" class="headerlink" title="默认&#x2F;具名 导出导入"></a>默认&#x2F;具名 导出导入</h5></li></ol><table><thead><tr><th>语法</th><th>导出语句</th><th>导入语句</th></tr></thead><tbody><tr><td>默认</td><td><code>export default function Button() &#123;&#125;</code></td><td><code>import Button from &#39;./Button.js&#39;;</code></td></tr><tr><td>具名</td><td><code>export function Button() &#123;&#125;</code></td><td><code>import &#123; Button &#125; from &#39;./Button.js&#39;;</code></td></tr></tbody></table></li></ol><h3 id="6、JSX"><a href="#6、JSX" class="headerlink" title="6、JSX"></a>6、JSX</h3><ol><li>JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。</li><li>JSX规则<ol><li><h5 id="只能返回一个根元素"><a href="#只能返回一个根元素" class="headerlink" title="只能返回一个根元素"></a>只能返回一个根元素</h5></li><li><h5 id="标签必须闭合"><a href="#标签必须闭合" class="headerlink" title="标签必须闭合"></a>标签必须闭合</h5><ol><li><img> 这样的自闭合标签必须书写成 <img /> </li><li><li>oranges 这样只有开始标签的元素必须带有闭合标签，需要改为 <li>oranges</li>。</li></ol></li><li><h5 id="驼峰式命名法"><a href="#驼峰式命名法" class="headerlink" title="驼峰式命名法"></a>驼峰式命名法</h5><ol><li>变量名称不能包含 - 符号或者像 class 这样的保留字。</li><li>使用名称className而不是class作为属性名，是因为”class” 在 JavaScript 中是个保留字。</li><li>由于历史原因，aria-* 和 data-* 属性是以带 - 符号的 HTML 格式书写的。</li></ol></li><li>高级提示：使用 JSX 转化器 </li><li><h5 id="大括号使用"><a href="#大括号使用" class="headerlink" title="大括号使用"></a>大括号使用</h5><ol><li>JSX 允许你在 JavaScript 中编写类似 HTML 的标签，从而使渲染的逻辑和内容可以写在一起。有时候，你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。</li><li>用 { 和 } 替代 “ 和 “ 以使用 JavaScript 变量 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> avatar = <span class="hljs-string">&#x27;https://i.imgur.com/7vQD0fPs.jpg&#x27;</span>;<br>  <span class="hljs-keyword">const</span> description = <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;description&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用大括号<ol><li><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;name&#125;&#x27;s To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h6 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h6> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">person=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name:</span> <span class="hljs-string">&quot;Hedy Lamarr&quot;</span>, inventions: <span class="hljs-number">5</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><h6 id="css"><a href="#css" class="headerlink" title="css"></a>css</h6> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">  <span class="hljs-name">backgroundColor:</span> <span class="hljs-string">&#x27;black&#x27;</span>,</span><br><span class="hljs-template-variable">  color: <span class="hljs-string">&#x27;pink&#x27;</span></span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&gt;</span></span><br></code></pre></td></tr></table></figure> 1.<strong>内联 style 属性 使用驼峰命名法编写</strong>。例如，HTML <code>&lt;ul style=&quot;background-color: black&quot;&gt;</code> 在你的组件里应该写成 <code>&lt;ul style=&#123;&#123; backgroundColor: 'black' &#125;&#125;&gt;</code>。</li><li><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<br>    <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>    &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&#x27;long&#x27;</span> &#125;<br>  ).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol><h3 id="7、将-Props-传递给组件"><a href="#7、将-Props-传递给组件" class="headerlink" title="7、将 Props 传递给组件"></a>7、将 Props 传递给组件</h3><ol><li>React 组件使用 props 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。Props 可能会让你想起 HTML 属性，但你可以通过它们传递任何 JavaScript 值，包括对象、数组和函数。</li><li>向组件传递 props<ol><li><h4 id="将-props-传递给子组件"><a href="#将-props-传递给子组件" class="headerlink" title="将 props 传递给子组件"></a>将 props 传递给子组件</h4></li></ol> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">export default function Profile() &#123;</span><br><span class="language-xml">  return (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">person</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name:</span> <span class="hljs-string">&#x27;Lin Lanying&#x27;</span>, imageId: <span class="hljs-string">&#x27;1bX5QH6&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">  );</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="在子组件中读取-props"><a href="#在子组件中读取-props" class="headerlink" title="在子组件中读取 props"></a>在子组件中读取 props</h4><ol><li>在声明 props 时， 不要忘记 ( 和 ) 之间的一对花括号 { 和 } ; 这种语法被称为 “解构”，等价于于从函数参数中读取属性： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br>等价于<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">let</span> person = props.<span class="hljs-property">person</span>;<br>  <span class="hljs-keyword">let</span> size = props.<span class="hljs-property">size</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="给-prop-指定一个默认值"><a href="#给-prop-指定一个默认值" class="headerlink" title="给 prop 指定一个默认值"></a>给 prop 指定一个默认值</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size = <span class="hljs-number">100</span> &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="使用-JSX-展开语法传递-props"><a href="#使用-JSX-展开语法传递-props" class="headerlink" title="使用 JSX 展开语法传递 props"></a>使用 JSX 展开语法传递 props</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">&#123; person, size, isSepia, thickBorder &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;person&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isSepia</span>=<span class="hljs-string">&#123;isSepia&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">thickBorder</span>=<span class="hljs-string">&#123;thickBorder&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br>简化：<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="将-JSX-作为子组件传递"><a href="#将-JSX-作为子组件传递" class="headerlink" title="将 JSX 作为子组件传递"></a>将 JSX 作为子组件传递</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Avatar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Avatar.js&#x27;</span>;<br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Katsuko</span> <span class="hljs-attr">Saruhashi</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">YfeOqp2</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h4 id="Props-如何随时间变化"><a href="#Props-如何随时间变化" class="headerlink" title="Props 如何随时间变化"></a>Props 如何随时间变化</h4><ol><li><a href="">State: 一个组件的内存;hook</a></li></ol></li></ol></li></ol><h3 id="8、条件渲染"><a href="#8、条件渲染" class="headerlink" title="8、条件渲染"></a>8、条件渲染</h3><ol><li>在 React 中，你可以通过使用 JavaScript 的 if 语句、&amp;&amp; 和 ? : 运算符来选择性地渲染 JSX。</li><li><h4 id="if-条件返回-JSX"><a href="#if-条件返回-JSX" class="headerlink" title="(if)条件返回 JSX"></a>(if)条件返回 JSX</h4></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; name, isPacked &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125; ✔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">PackingList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Sally Ride 的行李清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;宇航服&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;带金箔的头盔&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;false&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Tam 的照片&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; name, isPacked &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三目运算符（-）"><a href="#三目运算符（-）" class="headerlink" title="三目运算符（? :）"></a>三目运算符（? :）</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> Item(&#123;<span class="hljs-built_in"> name</span>, isPacked &#125;) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xquery">&#123;isPacked ? (</span><br><span class="language-xquery">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xquery">          </span><span class="language-xquery"><span class="hljs-built_in">&#123;name</span> + <span class="hljs-string">&#x27; ✔&#x27;</span>&#125;</span></span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span></span><br>      ) : (<br>       <span class="hljs-built_in"> name</span><br>      )&#125;<br>    &lt;/li&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="与运算符（-）"><a href="#与运算符（-）" class="headerlink" title="与运算符（&amp;&amp;）"></a>与运算符（&amp;&amp;）</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> Item(&#123;<span class="hljs-built_in"> name</span>, isPacked &#125;) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xquery"><span class="hljs-built_in">&#123;name</span>&#125;</span><span class="language-xml"> </span><span class="language-xquery">&#123;isPacked &amp;&amp; <span class="hljs-string">&#x27;✔&#x27;</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>切勿将数字放在 &amp;&amp; 左侧</strong><ol><li>JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，<strong>如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染</strong>。</li><li>例如，一个常见的错误是 <code>messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。</li><li>为了更正，可以将左侧的值改成布尔类型：<code>messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。</li></ol></li></ol><h4 id="选择性地将-JSX-赋值给变量"><a href="#选择性地将-JSX-赋值给变量" class="headerlink" title="选择性地将 JSX 赋值给变量"></a>选择性地将 JSX 赋值给变量</h4><ol><li>当这些快捷方式妨碍写普通代码时，可以考虑使用 if 语句和变量。因为你可以使用 let 进行重复赋值，所以一开始你可以将你想展示的（这里指的是物品的名字）作为默认值赋予给该变量。<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> Item(&#123;<span class="hljs-built_in"> name</span>, isPacked &#125;) &#123;<br>  <span class="hljs-keyword">let</span> itemContent =<span class="hljs-built_in"> name</span>;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    itemContent =<span class="hljs-built_in"> name</span> + <span class="hljs-string">&quot; ✔&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xquery">&#123;itemContent&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> Item(&#123;<span class="hljs-built_in"> name</span>, isPacked &#125;) &#123;<br>  <span class="hljs-keyword">let</span> itemContent =<span class="hljs-built_in"> name</span>;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    itemContent = (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xquery"><span class="hljs-built_in">&#123;name</span> + <span class="hljs-string">&quot; ✔&quot;</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xquery">&#123;itemContent&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="9、渲染列表"><a href="#9、渲染列表" class="headerlink" title="9、渲染列表"></a>9、渲染列表</h3><ol><li>React 中使用 <strong>filter()</strong> 筛选需要渲染的组件和使用 <strong>map()</strong> 把数组转换成组件数组。</li><li>demo<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; people &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getImageUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listItems = people.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;person.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;getImageUrl(person)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;person.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">          &#123;&#x27; &#x27; + person.profession + &#x27; &#x27;&#125;</span><br><span class="language-xml">          因&#123;person.accomplishment&#125;而闻名世界</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><ol><li>直接放在 map() 方法里的 JSX 元素一般都需要指定 key 值！</li><li>如何设定 key 值 <ol><li>来自数据库的数据： 如果你的数据是从数据库中获取的，那你可以直接使用数据表中的主键，因为它们天然具有唯一性。</li><li>本地产生数据： 如果你数据的产生和保存都在本地（例如笔记软件里的笔记），那么你可以使用一个自增计数器或者一个类似 uuid 的库来生成 key。</li></ol></li><li>key 需要满足的条件<ol><li>key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。</li><li>key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。</li></ol></li><li>React 中为什么需要 key？<ol><li>设想一下，假如你桌面上的文件都没有文件名，取而代之的是，你需要通过文件的位置顺序来区分它们———第一个文件，第二个文件，以此类推。也许你也不是不能接受这种方式，可是一旦你删除了其中的一个文件，这种组织方式就会变得混乱无比。原来的第二个文件可能会变成第一个文件，第三个文件会成为第二个文件……</li><li>React 里需要 key 和文件夹里的文件需要有文件名的道理是类似的。它们（key 和文件名）都让我们可以从众多的兄弟元素中唯一标识出某一项（JSX 节点或文件）。而一个精心选择的 key 值所能提供的信息远远不止于这个元素在数组中的位置。即使元素的位置在渲染的过程中发生了改变，它提供的 key 值也能让 React 在整个生命周期中一直认得它。</li></ol></li></ol></li></ol><h3 id="10、保持组件纯粹-纯函数）"><a href="#10、保持组件纯粹-纯函数）" class="headerlink" title="10、保持组件纯粹(纯函数）"></a>10、保持组件纯粹(纯函数）</h3><ol><li><h4 id="纯函数：组件作为公式"><a href="#纯函数：组件作为公式" class="headerlink" title="纯函数：组件作为公式"></a>纯函数：组件作为公式</h4></li><li><p>纯函数特征</p><ol><li>只负责自己的任务。它不会更改在该函数调用前就已存在的对象或变量。</li><li>输入相同，则输出相同。给定相同的输入，纯函数应总是返回相同的结果。 <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">举个你非常熟悉的纯函数示例：数学中的公式。<br><br>考虑如下数学公式：y <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-keyword">x</span>。<br><br>若 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> 则 y <span class="hljs-operator">=</span> <span class="hljs-number">4</span>。永远如此。<br><br>若 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> 则 y <span class="hljs-operator">=</span> <span class="hljs-number">6</span>。永远如此。<br><br>若 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>，那么 y 并不会因为时间或股市的影响，而有时等于 <span class="hljs-number">9</span> 、 –<span class="hljs-number">1</span> 或 <span class="hljs-number">2.5</span>。<br><br>若 y <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-keyword">x</span> 且 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> 那么 y 永远 等于 <span class="hljs-number">6</span>.<br><br>我们使用 JavaScript 的函数实现，看起来将会是这样：<br><br>function <span class="hljs-keyword">double</span>(number) &#123;<br>  return <span class="hljs-number">2</span> * number<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>React 便围绕着这个概念进行设计。<strong>React 假设你编写的所有组件都是纯函数</strong>。也就是说，对于相同的输入，你所编写的 React 组件必须总是返回相同的 JSX。</li></ol></li><li><h4 id="副作用-不符合-预期的后果"><a href="#副作用-不符合-预期的后果" class="headerlink" title="副作用:(不符合)预期的后果"></a>副作用:(不符合)预期的后果</h4><ol><li>React 的渲染过程必须自始至终是纯粹的。组件应该只 返回 它们的 JSX，而不 改变 在渲染前，就已存在的任何对象或变量 — 这将会使它们变得不纯粹！</li><li>错误示例:该组件正在读写其外部声明的 guest 变量。这意味着 <strong>多次调用这个组件会产生不同的 JSX</strong>！并且，如果 其他 组件读取 guest ，它们也会产生不同的 JSX，其结果取决于它们何时被渲染！这是无法预测的。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> guest = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Bad: changing a preexisting variable!</span><br>  guest = guest + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br>修复：<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;1&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;2&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="局部mutation：组件的小秘密"><a href="#局部mutation：组件的小秘密" class="headerlink" title="局部mutation：组件的小秘密"></a>局部mutation：组件的小秘密</h4><ol><li>上述示例的问题出在渲染过程中，组件改变了 预先存在的 变量的值。为了让它听起来更可怕一点，我们将这种现象称为 <strong>突变（mutation）</strong> 。纯函数不会改变函数作用域外的变量、或在函数调用前创建的对象——这会使函数变得不纯粹！</li><li>但是，<strong>你完全可以在渲染时更改你 刚刚 创建的变量和对象</strong>。在本示例中，你创建一个 [] 数组，将其分配给一个 cups 变量，然后 push 一打 cup 进去：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaGathering</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> cups = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>    cups.<span class="hljs-title function_">push</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;i&#125;</span> /&gt;</span></span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> cups;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>解析：<ol><li>如果 cups 变量或 [] 数组是在 TeaGathering 函数之外创建的，这将是一个很大的问题！因为如果那样的话，当你调用数组的 push 方法时，就会更改 <strong>预先存在的</strong> 对象。</li><li>但是，这里不会有影响，因为每次渲染时，你都是在 TeaGathering 函数内部创建的它们。TeaGathering 之外的代码并不会知道发生了什么。这就被称为 <strong>“局部 mutation”</strong> — 如同藏在组件里的小秘密。</li></ol></li></ol><h4 id="哪些地方可能引发副作用"><a href="#哪些地方可能引发副作用" class="headerlink" title="哪些地方可能引发副作用"></a>哪些地方可能引发副作用</h4><p>函数式编程在很大程度上依赖于纯函数，但 某些事物 在特定情况下不得不发生改变。这是编程的要义！这些变动包括更新屏幕、启动动画、更改数据等，它们被称为 副作用。它们是 “额外” 发生的事情，与渲染过程无关。</p><p>在 React 中，<strong>副作用通常属于 事件处理程序</strong>。事件处理程序是 React 在你执行某些操作（如单击按钮）时运行的函数。即使事件处理程序是在你的组件 内部 定义的，它们也不会在渲染期间运行！ 因此事件处理程序无需是纯函数。</p><p>如果你用尽一切办法，仍无法为副作用找到合适的事件处理程序，你还可以调用组件中的 <strong><code>useEffect</code></strong> 方法将其附加到返回的 JSX 中。这会告诉 React 在渲染结束后执行它。然而，<strong>这种方法应该是你最后的手段</strong>。</p><h3 id="11、将-UI-视为树"><a href="#11、将-UI-视为树" class="headerlink" title="11、将 UI 视为树"></a>11、将 UI 视为树</h3><ol><li>树是表示实体之间关系的常见方式，它们经常用于建模 UI。</li><li>渲染树表示单次渲染中 React 组件之间的嵌套关系。</li><li>使用条件渲染，渲染树可能会在不同的渲染过程中发生变化。使用不同的属性值，组件可能会渲染不同的子组件。</li><li>渲染树有助于识别顶级组件和叶子组件。顶级组件会影响其下所有组件的渲染性能，而叶子组件通常会频繁重新渲染。识别它们有助于理解和调试渲染性能问题。</li><li>依赖树表示 React 应用程序中的模块依赖关系。</li><li>构建工具使用依赖树来捆绑必要的代码以部署应用程序。</li><li>依赖树有助于调试大型捆绑包带来的渲染速度过慢的问题，以及发现哪些捆绑代码可以被优化。</li></ol><h3 id="12、响应事件"><a href="#12、响应事件" class="headerlink" title="12、响应事件"></a>12、响应事件</h3><ol><li>React 允许你向 JSX 中添加事件处理程序。事件处理程序是你自己的函数，它将在用户交互时被触发，如点击、悬停、焦点在表单输入框上等等。</li><li><code>&lt;button&gt;</code> 等内置组件只支持内置浏览器事件，如 <code>onClick</code>。但是，你也可以创建你自己的组件，并给它们的事件处理程序 <code>props</code> 指定你喜欢的任何特定于应用的名称。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Toolbar</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPlayMovie</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;Playing!&#x27;)&#125;</span><br><span class="language-xml">      onUploadImage=&#123;() =&gt; alert(&#x27;Uploading!&#x27;)&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params">&#123; onPlayMovie, onUploadImage &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onPlayMovie&#125;</span>&gt;</span></span><br><span class="language-xml">        Play Movie</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onUploadImage&#125;</span>&gt;</span></span><br><span class="language-xml">        Upload Image</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="13、State-组件的记忆"><a href="#13、State-组件的记忆" class="headerlink" title="13、State: 组件的记忆"></a>13、State: 组件的记忆</h3><p>组件通常需要根据交互改变屏幕上的内容。在表单中键入更新输入栏，在轮播图上点击“下一个”改变显示的图片，点击“购买”将产品放入购物车。组件需要“记住”一些东西：当前的输入值、当前的图片、购物车。在 React 中，这种特定于组件的记忆被称为状态。</p><p>你可以用 useState Hook 为组件添加状态。Hook 是能让你的组件使用 React 功能的特殊函数（状态是这些功能之一）。useState Hook 让你声明一个状态变量。它接收初始状态并返回一对值：当前状态，以及一个让你更新状态的设置函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [showMore, setShowMore] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> hasNext = index &lt; sculptureList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (hasNext) &#123;<br>      <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setIndex</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleMoreClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setShowMore</span>(!showMore);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleNextClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleMoreClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;showMore ? &#x27;Hide&#x27; : &#x27;Show&#x27;&#125; details</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;showMore &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;sculpture.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14、渲染和提交"><a href="#14、渲染和提交" class="headerlink" title="14、渲染和提交"></a>14、渲染和提交</h3><p>在你的组件显示在屏幕上之前，它们必须由 React 进行渲染。理解这个过程中的步骤有助于你思考你的代码如何执行并解释其行为。</p><ol><li><strong>触发</strong>渲染（将食客的订单送到厨房）</li><li><strong>渲染</strong>组件（在厨房准备订单）</li><li><strong>提交</strong>到 DOM（将订单送到桌前）</li></ol><h3 id="15、作为快照的状态"><a href="#15、作为快照的状态" class="headerlink" title="15、作为快照的状态"></a>15、作为快照的状态</h3><p>与普通 JavaScript 变量不同，React 状态的行为更像一个快照。设置它并不改变你已有的状态变量，而是触发一次重新渲染。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span>);  <span class="hljs-comment">// 0</span><br>setCount(<span class="hljs-built_in">count</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 请求用 1 重新渲染</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span>);  <span class="hljs-comment">// 仍然是 0！</span><br></code></pre></td></tr></table></figure><h3 id="16、把一系列-state-更新加入队列"><a href="#16、把一系列-state-更新加入队列" class="headerlink" title="16、把一系列 state 更新加入队列"></a>16、把一系列 state 更新加入队列</h3><ol><li>如下有问题的组件，点击“+3”只能增加一次分数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setScore</span>(score + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> increment()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Score: &#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure>作为快照的状态 解释了为什么会出现这种情况。设置状态会请求一个新的重新渲染，但不会在已运行的代码中更改它。所以在你调用 setScore(score + 1) 后，score 仍然是 0。<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">score</span>);  <span class="hljs-comment">// 0</span><br>setScore(<span class="hljs-keyword">score</span> + 1); <span class="hljs-comment">// setScore(0 + 1);</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">score</span>);  <span class="hljs-comment">// 0</span><br>setScore(<span class="hljs-keyword">score</span> + 1); <span class="hljs-comment">// setScore(0 + 1);</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">score</span>);  <span class="hljs-comment">// 0</span><br>setScore(<span class="hljs-keyword">score</span> + 1); <span class="hljs-comment">// setScore(0 + 1);</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">score</span>);  <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure>你可以通过在设置状态时传递一个 更新器函数 来解决这个问题。注意用 setScore(s &#x3D;&gt; s + 1) 替换 setScore(score + 1) 是如何修复“+3”按钮的。如果你需要排队进行多次状态更新，那么这非常方便。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setScore</span>(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> increment()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">        increment();</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Score: &#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="17、更新状态中的对象"><a href="#17、更新状态中的对象" class="headerlink" title="17、更新状态中的对象"></a>17、更新状态中的对象</h3><p>状态可以持有任何类型的 JavaScript 值，包括对象。但你不应该直接改变你在 React 状态中持有的对象和数组。相反，当你想更新一个对象和数组时，你需要创建一个新的对象（或复制现有的对象），然后用这个副本来更新状态。</p><p>通常情况下，你会使用 … 展开语法来复制你想改变的对象和数组。例如，更新一个嵌套对象可以是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>    <span class="hljs-attr">artwork</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">name</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTitleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCityChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">city</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleImageChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">image</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Title:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTitleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        City:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.city&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleCityChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Image:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleImageChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;person.artwork.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        &#123;&#x27; by &#x27;&#125;</span><br><span class="language-xml">        &#123;person.name&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        (located in &#123;person.artwork.city&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在代码中复制对象感觉乏味，可以使用 Immer 之类的库来减少重复代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;immer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.7.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;react-dom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;react-scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;use-immer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts start&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts test --env=jsdom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eject&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts eject&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="18、更新状态中的数组"><a href="#18、更新状态中的数组" class="headerlink" title="18、更新状态中的数组"></a>18、更新状态中的数组</h3><p>数组是另一种可以存在状态中的可变 JavaScript 对象，应将其视为只读。就像对象一样，当你想更新存在状态中的数组时，你需要创建一个新数组（或者复制现有数组），然后用新数组来更新状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BucketList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>(<br>    initialList<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggle</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-title function_">setList</span>(list.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">artwork</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (artwork.<span class="hljs-property">id</span> === artworkId) &#123;<br>        <span class="hljs-keyword">return</span> &#123; ...artwork, <span class="hljs-attr">seen</span>: nextSeen &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> artwork;<br>      &#125;<br>    &#125;));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Art Bucket List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>My list of art to see:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;list&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggle&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ItemList</span>(<span class="hljs-params">&#123; artworks, onToggle &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;artworks.map(artwork =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;artwork.seen&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                onToggle(</span><br><span class="language-xml">                  artwork.id,</span><br><span class="language-xml">                  e.target.checked</span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;artwork.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19、使用状态响应输入"><a href="#19、使用状态响应输入" class="headerlink" title="19、使用状态响应输入"></a>19、使用状态响应输入</h3><p>使用 React，你不用直接从代码层面修改 UI。例如，不用编写诸如“禁用按钮”、“启用按钮”、“显示成功消息”等命令。相反，你只需要描述组件在不同状态（“初始状态”、“输入状态”、“成功状态”）下希望展现的 UI，然后根据用户输入触发状态更改。这和设计师对 UI 的理解很相似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>答对了！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;submitting&#x27;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">submitForm</span>(answer);<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br>      <span class="hljs-title function_">setError</span>(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTextareaChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setAnswer</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>城市测验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        哪个城市有把空气变成饮用水的广告牌？</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTextareaChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">answer.length</span> === <span class="hljs-string">0</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&gt;</span></span><br><span class="language-xml">          提交</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;error !== null &amp;&amp;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;error.message&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">answer</span>) &#123;<br>  <span class="hljs-comment">// 模拟接口请求</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> shouldError = answer.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;lima&#x27;</span><br>      <span class="hljs-keyword">if</span> (shouldError) &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;猜的不错，但答案不对。再试试看吧！&#x27;</span>));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20、选择状态结构"><a href="#20、选择状态结构" class="headerlink" title="20、选择状态结构"></a>20、选择状态结构</h3><p>状态不应包含冗余或重复的信息。如果包含一些多余的状态，我们会很容易忘记去更新它，从而导致问题产生！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> fullName = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFirstNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setFirstName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLastNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setLastName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>让我们帮你登记<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        名：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;firstName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleFirstNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        姓：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;lastName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleLastNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        你的票将发给：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21、在组件间共享状态"><a href="#21、在组件间共享状态" class="headerlink" title="21、在组件间共享状态"></a>21、在组件间共享状态</h3><ol><li>有时候你希望两个组件的状态始终同步更改。要实现这一点，可以将相关状态从这两个组件上移除，并把这些状态移到最近的父级组件，然后通过 props 将状态传递给这两个组件。这被称为“状态提升”，这是编写 React 代码时常做的事。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [activeIndex, setActiveIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Almaty, Kazakhstan<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">0&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(0)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。在1929年至1997年之间，它是该国首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(1)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        这个名字源于哈萨克语 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>，是“苹果”的意思，通常被翻译成“满是苹果”。事实上，阿拉木图周围的地区被认为是苹果的祖籍，<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是目前本土苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  title,</span><br><span class="hljs-params">  children,</span><br><span class="hljs-params">  isActive,</span><br><span class="hljs-params">  onShow</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onShow&#125;</span>&gt;</span></span><br><span class="language-xml">          显示</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="22、保留和重置状态"><a href="#22、保留和重置状态" class="headerlink" title="22、保留和重置状态"></a>22、保留和重置状态</h3><ol><li>你重新渲染一个组件时， React 需要决定组件树中的哪些部分要保留和更新，以及丢弃或重新创建。在大多数情况下， React 的自动处理机制已经做得足够好了。默认情况下，React 会保留树中与先前渲染的组件树“匹配”的部分。</li><li>React 允许你覆盖默认行为，可通过向组件传递一个唯一 key（如 <Chat key={email}/> 来 强制 重置其状态。这会告诉 React ，如果收件人不同，应将其作为一个 不同的 Chat 组件，需要使用新数据和 UI（比如输入框）来重新创建它。现在，在接收者之间切换时就会重置输入框——即使渲染的是同一个组件。</li></ol><h3 id="23、提取状态逻辑到-reducer-中"><a href="#23、提取状态逻辑到-reducer-中" class="headerlink" title="23、提取状态逻辑到 reducer 中"></a>23、提取状态逻辑到 reducer 中</h3><ol><li>对于那些需要更新多个状态的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以在组件外部将所有状态更新逻辑合并到一个称为 “reducer” 的函数中。这样，事件处理程序就会变得简洁，因为它们只需要指定用户的 “actions”。在文件的底部，reducer 函数指定状态应该如何更新以响应每个 action！<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(<br>    tasksReducer,<br>    initialTasks<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>      <span class="hljs-attr">task</span>: task<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格行程<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [...tasks, &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>      &#125;];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知操作：&#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;参观卡夫卡博物馆&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;看木偶戏&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;列侬墙图片&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>];<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="24、使用-Context-进行深层数据传递"><a href="#24、使用-Context-进行深层数据传递" class="headerlink" title="24、使用 Context 进行深层数据传递"></a>24、使用 Context 进行深层数据传递</h3><ol><li>通常，你会通过 props 将信息从父组件传递给子组件。但是，如果要在组件树中深入传递一些 prop，或者树里的许多组件需要使用相同的 prop，那么传递 prop 可能会变得很麻烦。Context 允许父组件将一些信息提供给它下层的任何组件，不管该组件多深层也无需通过 props 逐层透传。<!--2. 这里的 Heading 组件通过“询问”最近的 Section 来确定其标题级别。每个 Section 的级别是通过给父 Section 添加的级别来确定的。每个 Section 都向它下层的所有组件提供信息，不需要逐层传递 props，而是通过 Context 来实现。--></li></ol><h3 id="25、使用-Reducer-和-Context-进行状态扩展"><a href="#25、使用-Reducer-和-Context-进行状态扩展" class="headerlink" title="25、使用 Reducer 和 Context 进行状态扩展"></a>25、使用 Reducer 和 Context 进行状态扩展</h3><ol><li>Reducer 帮助你合并组件的状态更新逻辑。Context 帮助你将信息深入传递给其他组件。你可以将 reducers 和 context 组合在一起使用，以管理复杂应用的状态。</li><li>基于这种想法，使用 reducer 来管理一个具有复杂状态的父组件。组件树中任何深度的其他组件都可以通过 context 读取其状态。还可以 dispatch 一些 action 来更新状态。</li></ol><h3 id="26、使用-ref-引用值"><a href="#26、使用-ref-引用值" class="headerlink" title="26、使用 ref 引用值"></a>26、使用 ref 引用值</h3><ol><li>当你希望组件“记住”某些信息，但又不想让这些信息 触发新的渲染 时，你可以使用 ref：<code>const ref = useRef(0);</code></li><li>与 state 一样，ref 在重新渲染之间由 React 保留。但是，设置 state 会重新渲染组件，而更改 ref 不会！你可以通过 <code>ref.current</code> 属性访问该 ref 的当前值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    ref.<span class="hljs-property">current</span> = ref.<span class="hljs-property">current</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了 &#x27;</span> + ref.<span class="hljs-property">current</span> + <span class="hljs-string">&#x27; 次!&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      点我！</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li><li>ref 就像组件的一个不被 React 追踪的秘密口袋。例如，可以使用 ref 来存储 timeout ID、DOM 元素 和其他不影响组件渲染输出的对象。</li></ol><h3 id="27、使用-ref-操作-DOM"><a href="#27、使用-ref-操作-DOM" class="headerlink" title="27、使用 ref 操作 DOM"></a>27、使用 ref 操作 DOM</h3><ol><li>由于 React 会自动更新 DOM 以匹配渲染输出，因此组件通常不需要操作 DOM。但是，有时可能需要访问由 React 管理的 DOM 元素——例如聚焦节点、滚动到此节点，以及测量它的尺寸和位置。React 没有内置的方法来执行此类操作，所以需要一个指向 DOM 节点的 ref 来实现。例如，点击按钮将使用 ref 聚焦输入框：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        聚焦输入框</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="28、使用-Effect-实现同步"><a href="#28、使用-Effect-实现同步" class="headerlink" title="28、使用 Effect 实现同步"></a>28、使用 Effect 实现同步</h3><ol><li>有些组件需要与外部系统同步。例如，可能需要根据 React 状态控制非 React 组件、设置服务器连接或在组件出现在屏幕上时发送分析日志。与处理特定事件的事件处理程序不同，Effect 在渲染后运行一些代码。使用它将组件与 React 之外的系统同步。</li><li>多按几次播放&#x2F;暂停，观察视频播放器如何与 isPlaying 属性值保持同步：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &#x27;暂停&#x27; : &#x27;播放&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><!--许多 Effect 也会自行“清理”。例如，与聊天服务器建立连接的 Effect 应该返回一个 cleanup 函数，告诉 React 如何断开组件与该服务器的连接：--></li></ol><h3 id="29、你可能不需要-Effect"><a href="#29、你可能不需要-Effect" class="headerlink" title="29、你可能不需要 Effect"></a>29、你可能不需要 Effect</h3><ol><li>Effect 是 React 范式中的一个逃脱方案。它们可以“逃出” React 并使组件和一些外部系统同步。如果没有涉及到外部系统（例如，需要根据一些 props 或 state 的变化来更新一个组件的 state），不应该使用 Effect。移除不必要的 Effect 可以让代码更容易理解，运行得更快，并且更少出错。</li><li>有两种常见的不必使用 Effect 的情况：<ol><li>不必为了渲染而使用 Effect 来转换数据。</li><li>不必使用 Effect 来处理用户事件。</li></ol></li><li>例如，不需要 Effect 来根据其他状态调整某些状态：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;泰勒&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;斯威夫特&#x27;</span>);<br><br>  <span class="hljs-comment">// 🔴 避免：多余的 state 和不必要的 Effect</span><br>  <span class="hljs-keyword">const</span> [fullName, setFullName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setFullName</span>(firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName);<br>  &#125;, [firstName, lastName]);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>相反，在渲染时进行尽可能多地计算：<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = useState(<span class="hljs-string">&#x27;泰勒&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = useState(<span class="hljs-string">&#x27;斯威夫特&#x27;</span>);<br>  <span class="hljs-comment">// ✅ 非常好：在渲染期间进行计算</span><br>  <span class="hljs-keyword">const</span> fullName = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="30、响应式-Effect-的生命周期"><a href="#30、响应式-Effect-的生命周期" class="headerlink" title="30、响应式 Effect 的生命周期"></a>30、响应式 Effect 的生命周期</h3><ol><li>Effect 的生命周期不同于组件。组件可以挂载、更新或卸载。Effect 只能做两件事：开始同步某些东西，然后停止同步它。如果 Effect 依赖于随时间变化的 props 和 state，这个循环可能会发生多次。</li></ol><h3 id="使用自定义-Hook-复用逻辑"><a href="#使用自定义-Hook-复用逻辑" class="headerlink" title="使用自定义 Hook 复用逻辑"></a>使用自定义 Hook 复用逻辑</h3><ol><li>React 有一些内置 Hook，例如 useState，useContext 和 useEffect。有时需要用途更特殊的 Hook：例如获取数据，记录用户是否在线或者连接聊天室。为了实现效果，可以根据应用需求创建自己的 Hook。</li><li>你可以创建自定义 Hooks，将它们组合在一起，在它们之间传递数据，并在组件之间重用它们。随着应用不断变大，你将减少手动编写的 Effect，因为你将能够重用已经编写的自定义 Hooks。React 社区也维护了许多优秀的自定义 Hooks。</li></ol>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac常用命令</title>
    <link href="/2023/11/22/Resources/macCommandUsed/"/>
    <url>/2023/11/22/Resources/macCommandUsed/</url>
    
    <content type="html"><![CDATA[<h3 id="1、修改文件权限"><a href="#1、修改文件权限" class="headerlink" title="1、修改文件权限"></a>1、修改文件权限</h3><p><code>sudo chmod -R 777 文件名称</code></p><h3 id="2、修改hosts"><a href="#2、修改hosts" class="headerlink" title="2、修改hosts"></a>2、修改hosts</h3><p><code>sudo vim /private/etc/hosts</code><br><code>sudo vi /etc/hosts</code></p><ol><li>sudo vi &#x2F;etc&#x2F;hosts</li><li>提示输入个人电脑密码</li><li>此时输入E，点击enter</li><li>看到hosts，此时输入i，看到命令行下面显示insert，输入自己需要修改的host</li><li>点击esc退出编辑</li><li>按住shift 和 :，输入wq保存退出</li></ol><h3 id="3、显示“隐藏文件”"><a href="#3、显示“隐藏文件”" class="headerlink" title="3、显示“隐藏文件”"></a>3、显示“隐藏文件”</h3><ol><li>局部：<br>操作快捷键 <code>command+shift+.</code></li><li>全局：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool true</code><br> Mac关闭“显示隐藏文件”命令：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool false</code></li></ol><h3 id="4、查看8080端口占用情况"><a href="#4、查看8080端口占用情况" class="headerlink" title="4、查看8080端口占用情况"></a>4、查看8080端口占用情况</h3><p><code>sudo lsof -i tcp:8080 </code></p><h3 id="5、80端口转向8080"><a href="#5、80端口转向8080" class="headerlink" title="5、80端口转向8080"></a>5、80端口转向8080</h3><p><strong>（以下34配置在mac重启后需重新加载）</strong></p><ol><li><code>sudo vim /etc/pf.conf</code></li><li>在<code>rdr-anchor “com.apple/* </code>后面加上如下这一行（代表将发到80端口的数据转发到8080上,8080可以更改成自己的端口）<br><code>rdr on lo0 inet proto tcp from any to 127.0.0.1 port 80 -&gt; 127.0.0.1 port 8080</code></li><li>重新加载配置<br><code>sudo pfctl -f /etc/pf.conf</code></li><li>启动<br><code>sudo pfctl -e</code></li></ol><h3 id="6、查看nginx运行状态"><a href="#6、查看nginx运行状态" class="headerlink" title="6、查看nginx运行状态"></a>6、查看nginx运行状态</h3><p><code>ps -ef | grep nginx</code></p><h3 id="7、查看java占用-清理占用"><a href="#7、查看java占用-清理占用" class="headerlink" title="7、查看java占用-清理占用"></a>7、查看java占用-清理占用</h3><p><code>ps -ef|grep java</code><br><code>kill -9 1234</code></p><h3 id="8、打开强制退出程序窗口"><a href="#8、打开强制退出程序窗口" class="headerlink" title="8、打开强制退出程序窗口"></a>8、打开强制退出程序窗口</h3><p><code>Command+Option+Esc</code></p><h3 id="9-终端基础命令"><a href="#9-终端基础命令" class="headerlink" title="9.终端基础命令"></a>9.终端基础命令</h3><ol><li><code>pwd</code> 显示当前所在目录</li><li><code>ls</code> 文件内部列表展示</li><li><code>cd</code> 进入内部某个对象 可按tab健自动补全</li></ol>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速查询-数组常用函数</title>
    <link href="/2023/11/20/Front-end/JavaScript/JsArray/"/>
    <url>/2023/11/20/Front-end/JavaScript/JsArray/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h2><table><thead><tr><th>函数</th><th>锚点</th></tr></thead><tbody><tr><td><code>var arr = new Array()</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = new Array(10)</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = Array(7)</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = Array.of(7)</code></td><td><a href="#create">LINK</a></td></tr></tbody></table><h2 id="2、增加"><a href="#2、增加" class="headerlink" title="2、增加"></a>2、增加</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>concat()</code></td><td>合并</td><td><a href="#concat">LINK</a></td></tr><tr><td><code>unshift()</code></td><td>向开头添加</td><td><a href="#unshift">LINK</a></td></tr><tr><td><code>push()</code></td><td>向末尾添加</td><td><a href="#push">LINK</a></td></tr><tr><td><code>splice()</code></td><td>可选参数用于添加</td><td><a href="#splice">LINK</a></td></tr><tr><td><code>...</code></td><td>扩展运算符合并</td><td><a href="#spreadOperator">LINK</a></td></tr></tbody></table><h2 id="3、分割"><a href="#3、分割" class="headerlink" title="3、分割"></a>3、分割</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>slice()</code></td><td>返回数组的一个浅拷贝,切割</td><td><a href="#slice">LINK</a></td></tr><tr><td><code>splice()</code></td><td>通过删除元素，可以分割数组</td><td><a href="#splice">LINK</a></td></tr></tbody></table><h2 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>splice()</code></td><td>删除指定位置的元素，并修改原数组</td><td><a href="#splice">LINK</a></td></tr><tr><td><code>pop()</code></td><td>删除数组的最后一个元素，并返回被删除的元素</td><td><a href="#pop">LINK</a></td></tr><tr><td><code>shift()</code></td><td>删除数组的第一个元素，并返回该元素</td><td><a href="#shift">LINK</a></td></tr><tr><td><code>filter()</code></td><td>不会直接修改原数组，而是返回一个新的数组，包含满足条件的元素</td><td><a href="#filter">LINK</a></td></tr><tr><td><code>delete</code></td><td>删除数组中的元素，但不会改变数组的长度，被删除的位置会变为 undefined <strong>(不建议使用)</strong></td><td><a href="#delete">LINK</a></td></tr><tr><td><code>length</code></td><td>修改数组的 length 属性来删除数组末尾的元素</td><td><a href="#lengthDelete">LINK</a></td></tr></tbody></table><h2 id="5、修改"><a href="#5、修改" class="headerlink" title="5、修改"></a>5、修改</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>constructor</code></td><td></td><td><a href="#constructor">LINK</a></td></tr><tr><td><code>prototype</code></td><td></td><td><a href="#prototype">LINK</a></td></tr><tr><td><code>length</code></td><td></td><td><a href="#length">LINK</a></td></tr><tr><td><code>valueOf()</code></td><td></td><td><a href="#valueOf">LINK</a></td></tr><tr><td><code>toString()</code></td><td></td><td><a href="#toString">LINK</a></td></tr></tbody></table><h2 id="6、查询"><a href="#6、查询" class="headerlink" title="6、查询"></a>6、查询</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>indexOf()</code></td><td>查找指定元素在数组中的索引，返回该元素的第一个匹配项的索引。如果找不到，返回 -1</td><td><a href="#indexOf">LINK</a></td></tr><tr><td><code>lastIndexOf()</code></td><td>从数组的末尾开始查找元素，返回最后一个匹配项的索引</td><td><a href="#lastIndexOf">LINK</a></td></tr><tr><td><code>find()</code></td><td>查找数组中第一个满足条件的元素，返回该元素。如果没有找到满足条件的元素，返回 undefined。</td><td><a href="#find">LINK</a></td></tr><tr><td><code>findIndex()</code></td><td>查找数组中第一个满足条件的元素的索引。如果没有找到满足条件的元素，返回 -1。</td><td><a href="#findIndex">LINK</a></td></tr><tr><td><code>includes()</code></td><td>检查数组中是否包含某个元素，返回 true 或 false。</td><td><a href="#includes">LINK</a></td></tr><tr><td><code>some()</code></td><td>检查数组中是否至少有一个元素满足条件，返回 true 或 false。</td><td><a href="#some">LINK</a></td></tr><tr><td><code>every()</code></td><td>检查数组中的所有元素是否都满足指定条件，返回 true 或 false。</td><td><a href="#every">LINK</a></td></tr><tr><td><code>filter()</code></td><td>不会直接修改原数组，而是返回一个新的数组，包含满足条件的元素</td><td><a href="#filter">LINK</a></td></tr><tr><td><code>reduce()</code></td><td>遍历数组并进行累积计算，可以根据需要进行自定义查询逻辑</td><td><a href="#reduce">LINK</a></td></tr></tbody></table><h2 id="7、循环"><a href="#7、循环" class="headerlink" title="7、循环"></a>7、循环</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>for</code></td><td>最基础的循环方式</td><td><a href="#for">LINK</a></td></tr><tr><td><code>for...of</code></td><td>ES6 引入的循环方式，它可以直接遍历数组的元素</td><td><a href="#forOf">LINK</a></td></tr><tr><td><code>while</code></td><td>while 循环是一个常规的循环结构，当需要手动控制循环终止条件时可以使用</td><td><a href="#while">LINK</a></td></tr><tr><td><code>do...while</code></td><td>do…while 与 while 类似，但它会先执行循环体再检查条件</td><td><a href="#doWhile">LINK</a></td></tr><tr><td><code>forEach()</code></td><td>对数组的每个元素执行一次提供的回调函数,不能中途跳出循环</td><td><a href="#forEach">LINK</a></td></tr><tr><td><code>map()</code></td><td>会遍历数组的每个元素，并返回一个新的数组，其中每个元素都是通过回调函数处理后的结果</td><td><a href="#map">LINK</a></td></tr><tr><td><code>filter()</code></td><td>遍历数组的每个元素，返回一个新的数组，包含所有满足条件的元素</td><td><a href="#filter">LINK</a></td></tr><tr><td><code>every()</code></td><td>检查数组中的所有元素是否都满足指定条件，返回 true 或 false。</td><td><a href="#every">LINK</a></td></tr><tr><td><code>some()</code></td><td>检查数组中是否至少有一个元素满足条件，返回 true 或 false。</td><td><a href="#some">LINK</a></td></tr><tr><td><code>reduce()</code></td><td>遍历数组并进行累积计算，可以根据需要进行自定义查询逻辑</td><td><a href="#reduce">LINK</a></td></tr><tr><td><code>reduceRight()</code></td><td>从数组的末尾向前将数组中的数组项做累加</td><td><a href="#reduceRight">LINK</a></td></tr></tbody></table><h2 id="8、排序"><a href="#8、排序" class="headerlink" title="8、排序"></a>8、排序</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>sort()</code></td><td></td><td><a href="#sort">LINK</a></td></tr></tbody></table><h2 id="9、去重"><a href="#9、去重" class="headerlink" title="9、去重"></a>9、去重</h2><ol><li><h3 id="使用-Set"><a href="#使用-Set" class="headerlink" title="使用 Set"></a>使用 Set</h3><ol><li>Set 是 JavaScript 中的一个数据结构，它只允许存储唯一的值。因此，使用 Set 可以轻松去除数组中的重复项。</li><li>示例 <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">const<span class="hljs-built_in"> array </span>= [1, 2, 3, 4, 4, 3, 5];<span class="hljs-built_in"></span><br><span class="hljs-built_in">const </span>uniqueArray = [...new Set(array)];<br><br>console.log(uniqueArray); // [1, 2, 3, 4, 5]<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="filter-indexOf"><a href="#filter-indexOf" class="headerlink" title="filter() + indexOf()"></a>filter() + indexOf()</h3><ol><li>通过 filter() 方法配合 indexOf() 来判断元素的首次出现位置，去除后续重复的元素。</li><li>示例 <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">const<span class="hljs-built_in"> array </span>= [1, 2, 3, 4, 4, 3, 5];<span class="hljs-built_in"></span><br><span class="hljs-built_in">const </span>uniqueArray = array.filter((item, index) =&gt; array.indexOf(item) === index);<br><br>console.log(uniqueArray); // [1, 2, 3, 4, 5]<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="使用-reduce"><a href="#使用-reduce" class="headerlink" title="使用 reduce()"></a>使用 reduce()</h3><ol><li>reduce() 方法可以通过累加器来逐步构建一个新的数组，并通过判断是否已经存在元素来实现去重。</li><li>示例 <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">const<span class="hljs-built_in"> array </span>= [1, 2, 3, 4, 4, 3, 5];<span class="hljs-built_in"></span><br><span class="hljs-built_in">const </span>uniqueArray = array.reduce((acc, item) =&gt; &#123;<br> <span class="hljs-built_in"> if </span>(!acc.includes(item)) &#123;<br>    acc.push(item);<br>  &#125;<br> <span class="hljs-built_in"> return </span>acc;<br>&#125;, []);<br><br>console.log(uniqueArray); // [1, 2, 3, 4, 5]<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="forEach-和-includes"><a href="#forEach-和-includes" class="headerlink" title="forEach() 和 includes()"></a>forEach() 和 includes()</h3><ol><li>可以手动遍历数组，并将不重复的元素添加到新的数组中。</li><li>示例 <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">const<span class="hljs-built_in"> array </span>= [1, 2, 3, 4, 4, 3, 5];<span class="hljs-built_in"></span><br><span class="hljs-built_in">const </span>uniqueArray = [];<br>array.forEach(item =&gt; &#123;<br> <span class="hljs-built_in"> if </span>(!uniqueArray.includes(item)) &#123;<br>    uniqueArray.push(item);<br>  &#125;<br>&#125;);<br><br>console.log(uniqueArray); // [1, 2, 3, 4, 5]<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="使用-Map"><a href="#使用-Map" class="headerlink" title="使用 Map"></a>使用 Map</h3><ol><li>可以使用 Map 数据结构来检测每个元素是否已存在，从而实现数组去重。</li><li>示例 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">array</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>];<br>const <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>const uniqueArray = <span class="hljs-built_in">array</span>.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !<span class="hljs-built_in">map</span>.has(item) &amp;&amp; <span class="hljs-built_in">map</span>.set(item, <span class="hljs-number">1</span>));<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(uniqueArray); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="支持深度去重的方案（针对对象数组）"><a href="#支持深度去重的方案（针对对象数组）" class="headerlink" title="支持深度去重的方案（针对对象数组）"></a>支持深度去重的方案（针对对象数组）</h3><ol><li>如果数组元素是对象类型，通过比较对象的特性进行深度去重。</li><li>示例 <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const <span class="hljs-keyword">array</span> = [&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;];<br>const uniqueArray = <span class="hljs-keyword">array</span><span class="hljs-built_in">.filter</span>((<span class="hljs-type">item</span>, index, self) =&gt;<br>  index === self.findIndex((t) =&gt; t<span class="hljs-built_in">.id</span> === <span class="hljs-type">item</span><span class="hljs-built_in">.id</span>)<br>);<br><br>console.log(uniqueArray); // [&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;]<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><ol><li><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a><a id="create">创建数组</a></h3><ol><li><h4 id="var-arr-new-Array"><a href="#var-arr-new-Array" class="headerlink" title="var arr &#x3D; new Array()"></a>var arr &#x3D; new Array()</h4><ol><li>创建一个空数组</li></ol></li><li><h4 id="var-arr-new-Array-10"><a href="#var-arr-new-Array-10" class="headerlink" title="var arr &#x3D; new Array(10)"></a>var arr &#x3D; new Array(10)</h4><ol><li>创建一个包含10项的数组</li></ol></li><li><h4 id="var-arr-Array-7"><a href="#var-arr-Array-7" class="headerlink" title="var arr &#x3D; Array(7)"></a>var arr &#x3D; Array(7)</h4><ol><li>创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）</li></ol></li><li><h4 id="var-arr-Array-of-7"><a href="#var-arr-Array-of-7" class="headerlink" title="var arr &#x3D; Array.of(7)"></a>var arr &#x3D; Array.of(7)</h4><ol><li>创建一个包含1个字符串7的数组</li></ol></li></ol></li><li><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ol><li>语法： <code>array.length</code></li><li>作用： 设置或返回数组中元素的数目</li></ol></li><li><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ol><li><ol><li>向对象添加属性和方法</li></ol></li></ol></li><li><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ol><li>返回对创建此对象的数组函数的引用</li></ol></li><li><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><ol><li>语法：<code>array.valueOf()</code></li><li>解析：返回 Array 对象的原始值。该原始值由 Array 对象派生的所有对象继承。valueOf() 方法通常由 JavaScript 在后台自动调用，并不显式地出现在代码中。</li><li>是否改变原数组：N</li></ol></li><li><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><ol><li>语法：<code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>let <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = arr.concat([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]); <span class="hljs-comment">// 合并数组</span><br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>); <span class="hljs-comment">// 输出: [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析：连接两个或多个数组</li><li>是否改变原数组: N</li></ol></li><li><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ol><li>语法：<code>arrayObject.join(separator) /*separator-分隔符*/</code></li><li>解析：把数组中的所有元素放入一个字符串</li><li>是否改变原数组: N</li></ol></li><li><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><ol><li>语法：<code>arrayObject.reverse()</code></li><li>解析：颠倒数组中元素的顺序</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><ol><li><p>语法：<code>arrayObject.sort(sortby) sortby 可选。规定排序顺序。必须是函数。</code></p></li><li><p>解析：sort() 方法用于对数组的元素进行排序,并返回数组。默认排序顺序是根据字符串Unicode码点。</p></li><li><p>是否改变原数组: Y</p></li><li><p>不传参数，将不会按照数值大小排序，按照字符编码的顺序进行排序；</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;General&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Army&#x27;</span>];<br><span class="hljs-keyword">var</span> resArr = arr.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resArr);<span class="hljs-comment">//输出   [&quot;Army&quot;, &quot;Bob&quot;, &quot;General&quot;, &quot;John&quot;,&quot;Tom&quot;]</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br><span class="hljs-keyword">var</span> resArr2 = arr2.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resArr2);<span class="hljs-comment">//输出   [10, 111, 1899, 30, 35, 45, 50]</span><br></code></pre></td></tr></table></figure></li><li><p>传入参数，实现升序，降序；</p> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br>arr3.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a - b;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr3);<span class="hljs-comment">//输出  [10, 30, 35, 45, 50, 111, 1899]</span><br><br><span class="hljs-keyword">var</span> arr4 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br>arr4.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> b - a;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr4);<span class="hljs-comment">//输出 [1899, 111, 50, 45, 35, 30, 10]</span><br><br></code></pre></td></tr></table></figure></li><li><p>根据数组中的对象的某个属性值排序；</p> <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs qml">  <span class="hljs-keyword">var</span> arr5 = [&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10&#125;,&#123;id</span>:<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">6&#125;,&#123;id</span>:<span class="hljs-number">9</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">2&#125;,&#123;id</span>:<span class="hljs-number">3</span>&#125;];<br>arr5.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a.id - b.id<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr5);<br><span class="hljs-comment">//输出新的排序</span><br><span class="hljs-comment">//&#123;id: 2&#125;</span><br><span class="hljs-comment">//&#123;id: 3&#125;</span><br><span class="hljs-comment">//&#123;id: 5&#125;</span><br><span class="hljs-comment">//&#123;id: 6&#125;</span><br><span class="hljs-comment">//&#123;id: 9&#125;</span><br><span class="hljs-comment">//&#123;id: 10&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>根据数组中的对象的多个属性值排序，多条件排序；</p> <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs qml">      <span class="hljs-keyword">var</span> arr6 = [&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10,age</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">5,age</span>:<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">6,age</span>:<span class="hljs-number">10</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">9,age</span>:<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">2,age</span>:<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10,age</span>:<span class="hljs-number">9</span>&#125;];<br>arr6.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(a.id === b.id)&#123;<span class="hljs-comment">//如果id相同，按照age的降序</span><br><span class="hljs-keyword">return</span> b.age - a.age<br>&#125;<span class="hljs-title">else</span>&#123;<br><span class="hljs-keyword">return</span> a.id - b.id<br>&#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr6);<br><span class="hljs-comment">//输出新的排序</span><br><span class="hljs-comment">//&#123;id: 2, age: 8&#125;</span><br><span class="hljs-comment">//&#123;id: 5, age: 4&#125;</span><br><span class="hljs-comment">//&#123;id: 6, age: 10&#125;</span><br><span class="hljs-comment">//&#123;id: 9, age: 6&#125;</span><br><span class="hljs-comment">//&#123;id: 10, age: 9&#125;</span><br><span class="hljs-comment">//&#123;id: 10, age: 2&#125;</span><br><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><ol><li>语法：<code>arrayObject.pop()</code></li><li>解析：删除并返回数组的最后一个元素。删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><ol><li>语法：<code>arrayObject.shift()</code></li><li>解析：把数组的第一个元素从其中删除，并返回第一个元素的值。如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 arrayObject。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><ol><li>语法：<code>arrayObject.unshift(newelement1,newelement2,....,newelementX)</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.unshift(<span class="hljs-number">0</span>); <span class="hljs-comment">// 在数组开头添加元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出: [0, 1, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li>解析：向数组的开头添加一个或更多元素，并返回新的长度</li><li>返回值：arrayObject 的新长度。</li><li>是否改变原数组:</li></ol></li><li><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><ol><li>语法：<code>arrayObject.push(newelement1,newelement2,....,newelementX)</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 添加多个元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出: [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析：向数组的末尾添加一个或多个元素，并返回新的长度。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><ol><li>语法：<code>arrayObject.slice(start,end)   /*-1 指最后一个元素*/</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let subArray = arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 从索引 1 开始，到索引 4 结束（不包括 4）</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(subArray); <span class="hljs-comment">// 输出: [2, 3, 4]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 原数组未变，输出: [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析：从已有的数组中返回选定的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素</li><li>是否改变原数组: N</li></ol></li><li><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><ol><li>语法：<code>arrayObject.splice(index,howmany,item1,.....,itemX)/* ary.splice(下标，删除数量，可选参数用于添加新项目)</code><ol><li>添加 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.<span class="hljs-built_in">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1.5</span>); <span class="hljs-comment">// 在索引1处插入1.5</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出: [1, 1.5, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li>删除 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let removedElements = arr.<span class="hljs-built_in">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从索引 1 开始删除 3 个元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(removedElements); <span class="hljs-comment">// 输出: [2, 3, 4]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 原数组被修改，输出: [1, 5]</span><br></code></pre></td></tr></table></figure></li></ol></li><li>解析：向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="spreadOperator"><a href="#spreadOperator" class="headerlink" title="spreadOperator"></a>spreadOperator</h3><ol><li>语法 <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>let <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [...arr, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]; <span class="hljs-comment">// 在末尾添加</span><br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>); <span class="hljs-comment">// 输出: [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析: 扩展运算符 … 可以用于合并数组，创建新数组。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><ol><li>语法 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let filteredArr = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> element !== <span class="hljs-number">3</span>); <span class="hljs-comment">// 删除等于3的元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(filteredArr); <span class="hljs-comment">// 输出: [1, 2, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析: filter() 方法不会直接修改原数组，而是返回一个新的数组，包含满足条件的元素。可以利用它来排除某些元素。不会对空数组进行检测,没有符合条件的元素则返回空数组.</li><li>是否改变原数组: N</li></ol></li><li><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ol><li>语法 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">delete</span> arr[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 删除索引为2的元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// 输出: [1, 2, undefined, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li>解析: 使用 delete 只是将元素从数组中删除，但并不会改变数组长度，因此可能会出现空洞。</li></ol></li><li><h3 id="lengthDelete"><a href="#lengthDelete" class="headerlink" title="lengthDelete"></a>lengthDelete</h3><ol><li>语法 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-built_in">length</span> = <span class="hljs-number">3</span>; <span class="hljs-comment">// 将数组长度设置为3</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出: [1, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li>解析: 可以通过修改数组的 length 属性来删除数组末尾的元素。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><ol><li>语法：<code>array.indexOf(item,start)/* indexOf(查找的元素，可选参数规定开始检索得位置取值范围 [0-stringObject.length -1 ] )</code></li><li>解析：返回数组中某个指定的元素位置 从头到尾地检索数组</li><li>返回值：元素在数组中的位置，如果没有搜索到则返回-1</li><li>是否改变原数组: N</li></ol></li><li><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><ol><li>语法：<code>stringObject.lastIndexOf(searchvalue,fromindex)</code></li><li>解析：返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索</li><li>返回值：如果要检索的字符串值没有出现，则该方法返回 -1</li><li>是否改变原数组: N</li></ol></li><li><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><ol><li>语法： <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let found = arr.<span class="hljs-built_in">find</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> element &gt; <span class="hljs-number">3</span>); <span class="hljs-comment">// 查找第一个大于3的元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(found); <span class="hljs-comment">// 输出: 4</span><br></code></pre></td></tr></table></figure></li><li>解析：find() 方法用于查找数组中第一个满足条件的元素，返回该元素。如果没有找到满足条件的元素，返回 undefined。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><ol><li>语法： <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let index = arr.findIndex(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> element &gt; <span class="hljs-number">3</span>); <span class="hljs-comment">// 查找第一个大于3的元素的索引</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(index); <span class="hljs-comment">// 输出: 3</span><br></code></pre></td></tr></table></figure></li><li>解析：findIndex() 方法用于查找数组中第一个满足条件的元素的索引。如果没有找到满足条件的元素，返回 -1。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><ol><li>语法： <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let hasElement = arr.<span class="hljs-built_in">includes</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 检查是否包含元素3</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(hasElement); <span class="hljs-comment">// 输出: true</span><br></code></pre></td></tr></table></figure></li><li>解析：includes() 方法检查数组中是否包含某个元素，返回 true 或 false。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ol><li>语法：<code>array.toString()</code></li><li>解析：直接转为字符串，并返回</li><li>是否改变原数组:</li></ol></li><li><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><ol><li>语法：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">array</span>.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(currentValue, <span class="hljs-keyword">index</span>, arr), thisValue)<br>currentValue 当前元素<br><span class="hljs-keyword">index</span> 当前元素的索引值<br>arr 当前元素所属的数组对象<br>thisValue 可选。传递给函数的值一般用 &quot;this&quot; 值。<br>如果这个参数为空， &quot;undefined&quot; 会传递给 &quot;this&quot; 值<br></code></pre></td></tr></table></figure></li><li>解析：调用数组的每个元素，并将元素传递给回调函数。对于空数组是不会执行回调函数的。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><ol><li>语法：<code>array.map(function(currentValue,index,arr), thisValue)同上</code></li><li>解析：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。按照原始数组元素顺序依次处理元素。不会对空数组进行检测。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><ol><li>语法：<code>array.every(function(currentValue,index,arr), thisValue)</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let allLessThanSix = arr.every(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> element &lt; <span class="hljs-number">6</span>); <span class="hljs-comment">// 检查所有元素是否都小于6</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(allLessThanSix); <span class="hljs-comment">// 输出: true</span><br></code></pre></td></tr></table></figure></li><li>解析：用于检测数组所有元素是否都符合指定条件。如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true。不会对空数组进行检测</li><li>是否改变原数组: N</li></ol></li><li><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><ol><li>语法：<code>array.some(function(currentValue,index,arr),thisValue)</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let hasLargeNumber = arr.some(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> element &gt; <span class="hljs-number">4</span>); <span class="hljs-comment">// 检查是否有大于4的元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(hasLargeNumber); <span class="hljs-comment">// 输出: true</span><br></code></pre></td></tr></table></figure></li><li>解析：用于检测数组中的元素是否满足指定条件；会依次执行数组的每个元素；如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测；如果没有满足条件的元素，则返回false；不会对空数组进行检测</li><li>是否改变原数组: N</li></ol></li><li><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ol><li>语法 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]); <span class="hljs-comment">// 输出每个元素</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>解析: for 循环是最基础的循环方式，可以手动控制索引，适用于任何循环场景。</li></ol></li><li><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ol><li>语法 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; arr.<span class="hljs-built_in">length</span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]); <span class="hljs-comment">// 输出每个元素</span><br>  i++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>解析: while 循环是一个常规的循环结构，当需要手动控制循环终止条件时可以使用。</li></ol></li><li><h3 id="doWhile"><a href="#doWhile" class="headerlink" title="doWhile"></a>doWhile</h3><ol><li>语法 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]); <span class="hljs-comment">// 输出每个元素</span><br>  i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; arr.<span class="hljs-built_in">length</span>);<br></code></pre></td></tr></table></figure></li><li>解析: do…while 与 while 类似，但它会先执行循环体再检查条件。</li></ol></li><li><h3 id="forOf"><a href="#forOf" class="headerlink" title="forOf"></a>forOf</h3><ol><li>语法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> element <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(element); <span class="hljs-comment">// 输出每个元素</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>解析: for…of 是 ES6 引入的循环方式，它可以直接遍历数组的元素，语法简洁且适合大多数遍历场景。</li></ol></li><li><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><ol><li>语法：<code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue) /initialValue 可选，传递给函数的初始值</code> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>let <span class="hljs-built_in">sum</span> = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue, <span class="hljs-number">0</span>); <span class="hljs-comment">// 计算数组元素之和</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>); <span class="hljs-comment">// 输出: 15</span><br></code></pre></td></tr></table></figure></li><li>解析：接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。可以作为一个高阶函数，用于函数的 compose。对于空数组是不会执行回调函数。</li><li>是否改变原数组:</li></ol></li><li><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h3><ol><li>语法：<code>array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)</code></li><li>解析：功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</li><li>是否改变原数组:</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>javaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速复用-CSS常用样式模版</title>
    <link href="/2023/11/20/Front-end/CSS/CSSofCommonlyUsed/"/>
    <url>/2023/11/20/Front-end/CSS/CSSofCommonlyUsed/</url>
    
    <content type="html"><![CDATA[<h3 id="文字超出隐藏并显示省略号"><a href="#文字超出隐藏并显示省略号" class="headerlink" title="文字超出隐藏并显示省略号"></a>文字超出隐藏并显示省略号</h3><ol><li>单行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">white-space</span>: nowrap;      <span class="hljs-comment">/*超出的空白区域不换行*/</span><br><span class="hljs-attribute">overflow</span>: hidden;         <span class="hljs-comment">/*超出隐藏*/</span><br><span class="hljs-attribute">text-overflow</span>: ellipsis;  <span class="hljs-comment">/*文本超出显示省略号*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>两行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>: -webkit-box;             <span class="hljs-comment">/*将对象转为弹性盒模型展示*/</span><br>    -webkit-box-orient: vertical;     <span class="hljs-comment">/*设置弹性盒模型子元素的排列方式*/</span><br>    -webkit-line-clamp: <span class="hljs-number">2</span>;            <span class="hljs-comment">/*限制文本行数*/</span><br>    <span class="hljs-attribute">overflow</span>: hidden;                 <span class="hljs-comment">/*超出隐藏*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>多行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4em</span>;        <span class="hljs-comment">/*行高和height成倍数，这里以三行文本超出隐藏举例*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">4.2em</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>&#123;         <span class="hljs-comment">/*若要兼容IE8需用:after*/</span><br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;...&quot;</span>;          <span class="hljs-comment">/*替换内容比较灵活*/</span><br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>;         <span class="hljs-comment">/*颜色和文字背景保持一致*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">#fff</span>;  <span class="hljs-comment">/*边缘处理*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="滚动条样式设置"><a href="#滚动条样式设置" class="headerlink" title="滚动条样式设置"></a>滚动条样式设置</h3><ol><li>属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar    //滚动条整体部分<br>::-webkit-scrollbar-button   //滚动条两端的按钮<br>::-webkit-scrollbar-track   // 外层轨道<br>::-webkit-scrollbar-track-piece    //内层轨道，滚动条中间部分（除去）<br>::-webkit-scrollbar-thumb //滚动条里面可以拖动的那个<br>::-webkit-scrollbar-corner   //边角<br>::-webkit-resizer   ///定义右下角拖动块的样式<br></code></pre></td></tr></table></figure></li><li>示例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">//  定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸<br>&amp;::-webkit-scrollbar &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0.16rem</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0.16rem</span>;<br>    // <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><br>// 定义滚动条轨道 内阴影+圆角<br>&amp;::-webkit-scrollbar-track &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#011822</span>;<br>&#125;<br><br>// 定义滑块  内阴影+圆角<br>&amp;::-webkit-scrollbar-thumb &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0.16rem</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.08rem</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#023548</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="文字向两侧对齐"><a href="#文字向两侧对齐" class="headerlink" title="文字向两侧对齐"></a>文字向两侧对齐</h3><p><code>text-align: justify;</code></p><table><thead><tr><th>text-align</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td></td><td>start</td><td>如果内容方向是左至右，则等于 left，反之则为 right。</td></tr><tr><td></td><td>end</td><td>如果内容方向是左至右，则等于 right，反之则为 left。</td></tr><tr><td></td><td>left</td><td>行内内容向左侧边对齐。</td></tr><tr><td></td><td>right</td><td>行内内容向右侧边对齐。</td></tr><tr><td></td><td>center</td><td>行内内容居中。</td></tr><tr><td></td><td>justify</td><td>文字向两侧对齐，对最后一行无效。</td></tr><tr><td></td><td>justify-all</td><td>和 justify 一致，但是强制使最后一行两端对齐。</td></tr><tr><td></td><td>match-parent</td><td>和 inherit 类似，区别在于 start 和 end 的值根据父元素的 direction 确定，并被替换为恰当的 left 或 right 值。</td></tr></tbody></table><!--|   | <string> | 应用在单元格时，指定单元格内容相对于哪个字符对齐。|--><h3 id="样式初始化"><a href="#样式初始化" class="headerlink" title="样式初始化"></a>样式初始化</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h5</span>,<br><span class="hljs-selector-tag">h6</span>,<br>hr,<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">blockquote</span>,<br><span class="hljs-selector-tag">dl</span>,<br><span class="hljs-selector-tag">dt</span>,<br><span class="hljs-selector-tag">dd</span>,<br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span>,<br><span class="hljs-selector-tag">li</span>,<br>pre,<br><span class="hljs-selector-tag">form</span>,<br><span class="hljs-selector-tag">fieldset</span>,<br><span class="hljs-selector-tag">legend</span>,<br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-tag">textarea</span>,<br><span class="hljs-selector-tag">section</span>,<br><span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">td</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br>//   移动端点击高亮，根据情况适配<br>//   * &#123;<br>//       <span class="hljs-attribute">box-sizing</span>: border-box;<br>//       -webkit-tap-highlight-<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>//       -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br>//   &#125;<br><br><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">address</span>,<br><span class="hljs-selector-tag">cite</span>,<br><span class="hljs-selector-tag">dfn</span>,<br><span class="hljs-selector-tag">em</span>,<br><span class="hljs-selector-tag">var</span> &#123;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><br><span class="hljs-selector-tag">code</span>,<br><span class="hljs-selector-tag">kbd</span>,<br>pre,<br><span class="hljs-selector-tag">samp</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: couriernew, courier, monospace;<br>&#125;<br><br>// small&#123; <span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>; &#125; <br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><br><span class="hljs-selector-tag">sup</span> &#123;<br>    <span class="hljs-attribute">vertical-align</span>: text-top;<br>&#125;<br><br>sub &#123;<br>    <span class="hljs-attribute">vertical-align</span>: text-bottom;<br>&#125;<br><br><span class="hljs-selector-tag">legend</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><br><span class="hljs-selector-tag">fieldset</span>,<br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* button, input, select, textarea &#123; font-size:100%; &#125;  */</span><br><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border-collapse</span>: collapse;<br>    <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错/难题本</title>
    <link href="/2023/11/20/Resources/errorRecord/"/>
    <url>/2023/11/20/Resources/errorRecord/</url>
    
    <content type="html"><![CDATA[<h3 id="字体文件较大解决方案"><a href="#字体文件较大解决方案" class="headerlink" title="字体文件较大解决方案"></a>字体文件较大解决方案</h3><p>字体过大的话，会导致页面加载的时候，文字显示不出来，不过可以试试CSS的这个属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-display</span>: swap;<br></code></pre></td></tr></table></figure><p>放的方式是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">// OPPOSans<br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;OPPOSans&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>    <span class="hljs-attribute">font-display</span>: swap;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;OPPOSans&#x27;</span>),<br>            <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://************/fonts/OPPOSans-L.woff&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>            <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://************/fonts/OPPOSans-L.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;ttf&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>设置字体顺序的地方需要把新字体放在第一位：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;OPPOSans&#x27;</span>,Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的加载方式是，页面加载中的时候，用默认字体进行显示，等字体加载完成后，页面字体会自动更新，并且不会阻塞页面渲染和操作，所以第二位的字体尽量找比较接近的系统字体做替代显示</p><h3 id="微信分享无图无文字情况"><a href="#微信分享无图无文字情况" class="headerlink" title="微信分享无图无文字情况"></a>微信分享无图无文字情况</h3><ol><li>已遇到情况最终问题解决方案：微信白名单ip限制 需手动配置</li></ol><h3 id="html-body设置宽高100-间距0仍有底部留白"><a href="#html-body设置宽高100-间距0仍有底部留白" class="headerlink" title="html,body设置宽高100%间距0仍有底部留白"></a>html,body设置宽高100%间距0仍有底部留白</h3><ol><li>answer：img设置display:block;font-size:0;</li></ol><h3 id="git提交之后提交记录没有绿点处理"><a href="#git提交之后提交记录没有绿点处理" class="headerlink" title="git提交之后提交记录没有绿点处理"></a>git提交之后提交记录没有绿点处理</h3><ol><li>记录原因：本地git账号和邮箱与git上不一致导致</li><li>解决：设置一致 <ol><li>查询：<ol><li><code>git config user.name</code></li><li><code>git config user.email</code></li></ol></li><li>设置：<ol><li><code>git config --global user.name yourname</code></li><li><code>git config --global user.email youremail</code></li></ol></li></ol></li></ol><h3 id="certificate-has-expired"><a href="#certificate-has-expired" class="headerlink" title="certificate has expired"></a>certificate has expired</h3><ol><li>解决执行npm(或pnpm)时报：证书过期 certificate has expired问题<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1</span>、取消ssl验证：<br> <br>npm config set strict-ssl <span class="hljs-literal">false</span><br> <br>这个方法一般就可以解决了。<br> <br><span class="hljs-number">2</span>、更换npm镜像源：<br> <br>npm config set registry http:<span class="hljs-comment">//registry.cnpmjs.org</span><br>npm config set registry http:<span class="hljs-comment">//registry.npm.taobao.org</span><br> <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>错题</tag>
      
      <tag>日常记录</tag>
      
      <tag>bug</tag>
      
      <tag>难题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown基础语法</title>
    <link href="/2023/11/16/Resources/markdownGrammar/"/>
    <url>/2023/11/16/Resources/markdownGrammar/</url>
    
    <content type="html"><![CDATA[<p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p><!--* <a href="#preface">图片语法</a>--><ol><li><h3 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h3><ol><li>要创建标题，请在单词或短语前面添加井号 (<code>#</code>) 。<code>#</code> 的数量代表了标题的级别。例如，添加三个 <code>#</code> 表示创建一个三级标题 (<code>&lt;h3&gt;</code>)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># h1<br>######  h6<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h3><ol><li><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><ol><li>段落的换行是使用两个以上空格加上回车。也可以在段落后面使用一个空行来表示重新开始一个段落。</li></ol></li><li><h4 id="加粗倾斜"><a href="#加粗倾斜" class="headerlink" title="加粗倾斜"></a>加粗倾斜</h4></li></ol> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><p> <em>斜体文本</em><br> <em>斜体文本</em><br> <strong>粗体文本</strong><br> <strong>粗体文本</strong><br> <em><strong>粗斜体文本</strong></em><br> <em><strong>粗斜体文本</strong></em></p><ol start="3"><li><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4></li></ol> <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">***</span><br><span class="hljs-comment">* * *</span><br><span class="hljs-comment">*****</span><br>- - -<br>----------<br></code></pre></td></tr></table></figure><hr><hr><hr><hr><hr><ol start="4"><li><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4></li></ol> <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~删除线~~<br></code></pre></td></tr></table></figure><p> <del>删除线</del></p><ol start="5"><li><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4></li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <u>带下划线文本</u></p></li></ol><!--    6. #### 脚注    生成一个脚注1[^footnote].            [^footnote]: 这里是 **脚注** 的 *内容*.        生成一个脚注2[^foot].            [^foot]:这里是**脚注2**的*内容*.--><ol><li><h3 id="3、换行"><a href="#3、换行" class="headerlink" title="3、换行"></a>3、换行</h3><ol><li>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(<code>&lt;br&gt;</code>)</li></ol></li><li><h3 id="4、区块"><a href="#4、区块" class="headerlink" title="4、区块"></a>4、区块</h3><ol><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">同层引用</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">同层引用</span><br></code></pre></td></tr></table></figure><blockquote><p>区块引用<br>同层引用<br>同层引用</p></blockquote></li><li>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">最外层</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote></li><li>区块中使用列表 <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第三项</span><br></code></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote></li><li>列表中使用区块 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-quote">&gt; 学习</span><br><span class="hljs-quote">&gt; 学而时习之</span><br><span class="hljs-bullet">*</span> 第二项<br></code></pre></td></tr></table></figure></li></ol><ul><li>第一项<blockquote><p>学习<br>学而时习之</p></blockquote></li><li>第二项</li></ul></li><li><h3 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h3><ol><li><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li><li><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></li></ol></li><li><h3 id="6、代码"><a href="#6、代码" class="headerlink" title="6、代码"></a>6、代码</h3><ol><li>要将单词或短语表示为代码，请将其包裹在<strong>反引号 (&#96;&#96;)</strong> 中。<ol><li><code>code part</code></li></ol></li><li>转义反引号 <ol><li>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在 <strong>双反引号(&#96;&#96;)</strong> 中。<ol><li><code>Use `code` in your Markdown file.</code></li></ol></li></ol></li><li>代码块<ol><li><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符(<strong>Tab键</strong>)。 也可以用 <code>```</code> 包裹一段代码，并指定一种语言（也可以不指定）</p></li><li><p><strong>(<code>```内容```</code>)</strong><br> <img src="/img/js/17004620062132.jpg"></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;RUNOOB&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在使用该语法时开头之前必须要有一行空行，若要标记语言则在开头语法加一个空格然后声明语言类型(具体如图所示)，既然开头有要求自然结束也有要求的。结束时切忌不要在结束标签后加空格，否则该标签未关闭。<strong>关闭则直接回车换两行即可</strong>。</p></li></ol></li></ol></li><li><h3 id="7、分割线"><a href="#7、分割线" class="headerlink" title="7、分割线"></a>7、分割线</h3><ol><li>要创建分隔线，请在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。<ol><li><hr><ol><li><code>***</code></li></ol></li><li><hr><ol><li><code>---</code></li></ol></li><li><hr><ol><li><code>___</code></li></ol></li></ol></li></ol></li><li><h3 id="8、链接"><a href="#8、链接" class="headerlink" title="8、链接"></a>8、链接</h3><ol><li><strong>链接文本</strong>放在中括号内，链接地址放在后面的括号中，链接title可选。<ol><li><code> [Markdown语法](https://markdown.com.cn)。</code><br> <a href="https://markdown.com.cn/">Markdown语法</a>。</li></ol></li><li>链接title是当<strong>鼠标悬停在链接上时会出现的文字</strong>，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br> 1. <code>[Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</code><br> <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</li></ol></li><li><h3 id="9、图片"><a href="#9、图片" class="headerlink" title="9、图片"></a>9、<a id="preface">图片</a></h3><ol><li>要<strong>添加图像</strong>，请使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![这是图片](https:<span class="hljs-regexp">//m</span>arkdown.com.cn<span class="hljs-regexp">/assets/img</span>/philly-magic-garden.<span class="hljs-number">9</span>c0b4415.jpg <span class="hljs-string">&quot;Magic Gardens&quot;</span>) <br></code></pre></td></tr></table></figure> <img src="https://markdown.com.cn/assets/img/philly-magic-garden.9c0b4415.jpg" alt="这是图片" title="Magic Gardens"></li><li>给<strong>图片增加链接</strong>，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[![沙漠中的岩石图片]<span class="hljs-params">(https://tse3-mm.cn.bing.net/th/id/OIP-C.ECTYUcRzB9FMRqYOYvZnSQHaEK?<span class="hljs-attr">w</span>=308&amp;<span class="hljs-attr">h</span>=180&amp;<span class="hljs-attr">c</span>=7&amp;<span class="hljs-attr">r</span>=0&amp;<span class="hljs-attr">o</span>=5&amp;<span class="hljs-attr">dpr</span>=2&amp;<span class="hljs-attr">pid</span>=1.7 &quot;Shiprock&quot;)</span>]<span class="hljs-params">(https://markdown.com.cn)</span><br></code></pre></td></tr></table></figure> <a href="https://markdown.com.cn/"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.ECTYUcRzB9FMRqYOYvZnSQHaEK?w=308&h=180&c=7&r=0&o=5&dpr=2&pid=1.7" alt="沙漠中的岩石图片" title="Shiprock"></a></li></ol></li><li><h3 id="10、表格"><a href="#10、表格" class="headerlink" title="10、表格"></a>10、表格</h3></li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐示例</th><th align="right">右对齐示例</th><th align="center">居中对齐示例</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><pre><code class="hljs">用html代码处理    &lt;tr&gt;    &lt;th&gt;属性&lt;/th&gt;    &lt;th&gt;属性值&lt;/th&gt;    &lt;th&gt;描述&lt;/th&gt;  &lt;/tr &gt;&lt;tr &gt;    &lt;td rowspan=&quot;9&quot;&gt;type&lt;/td&gt;    &lt;td&gt;text&lt;/td&gt;    &lt;td&gt;单行文本输入框&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;password&lt;/td&gt;    &lt;td&gt;密码输入框&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;radio&lt;/td&gt;    &lt;td&gt;单选按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;CheckBox&lt;/td&gt;    &lt;td&gt;复选按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;button&lt;/td&gt;    &lt;td&gt;普通按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;submit&lt;/td&gt;    &lt;td&gt;提交按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;reset&lt;/td&gt;    &lt;td&gt;重置按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;image&lt;/td&gt;    &lt;td&gt;图像形式的提交按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;file&lt;/td&gt;    &lt;td&gt;文件域&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;name&lt;/td&gt;    &lt;td&gt;用户自定义&lt;/td&gt;    &lt;td&gt;控件名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;value&lt;/td&gt;    &lt;td &gt;用户自定义&lt;/td&gt;    &lt;td &gt;默认文本值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;size&lt;/td&gt;    &lt;td &gt;正整数&lt;/td&gt;    &lt;td &gt;控件在页面中的显示宽度&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;checked&lt;/td&gt;    &lt;td &gt;checked&lt;/td&gt;    &lt;td &gt;定义选择控件默认被选中项&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;maxlength&lt;/td&gt;    &lt;td &gt;正整数&lt;/td&gt;    &lt;td &gt;控件允许输入的最多字符&lt;/td&gt;&lt;/tr&gt;</code></pre></table><table>    <tr>        <th>属性</th>        <th>属性值</th>        <th>描述</th>      </tr >    <tr >        <td rowspan="9">type</td>        <td>text</td>        <td>单行文本输入框</td>    </tr>    <tr>        <td>password</td>        <td>密码输入框</td>    </tr>    <tr>        <td>radio</td>        <td>单选按钮</td>    </tr>    <tr>        <td>CheckBox</td>        <td>复选按钮</td>    </tr>    <tr><td>button</td>        <td>普通按钮</td>    </tr>    <tr>        <td>submit</td>        <td>提交按钮</td>    </tr>    <tr>        <td>reset</td>        <td>重置按钮</td>    </tr>    <tr>        <td>image</td>        <td>图像形式的提交按钮</td>    </tr>    <tr>        <td >file</td>        <td>文件域</td>    </tr>    <tr>        <td >name</td>        <td>用户自定义</td>        <td>控件名称</td>    </tr>    <tr>        <td >value</td>        <td >用户自定义</td>        <td >默认文本值</td>    </tr>    <tr>        <td >size</td>        <td >正整数</td>        <td >控件在页面中的显示宽度</td>    </tr>    <tr>        <td >checked</td>        <td >checked</td>        <td >定义选择控件默认被选中项</td>    </tr>    <tr>        <td >maxlength</td>        <td >正整数</td>        <td >控件允许输入的最多字符</td>    </tr></table><h3 id="11、锚点"><a href="#11、锚点" class="headerlink" title="11、锚点"></a>11、锚点</h3><ol><li>使用a标签 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">第一步：添加链接<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#preface&quot;</span>&gt;</span>前言<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>第二步：添加锚点<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;preface&quot;</span>&gt;</span>前言<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用md语法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">第一步：添加链接[测试2](<span class="hljs-comment">#test2)</span><br>第二步：添加锚点&lt;a <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;测试2&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="12、更改字体大小、颜色、更改字体"><a href="#12、更改字体大小、颜色、更改字体" class="headerlink" title="12、更改字体大小、颜色、更改字体"></a>12、更改字体大小、颜色、更改字体</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;font <span class="hljs-attribute">face</span>=<span class="hljs-string">&quot;逐浪立楷&quot;</span> <span class="hljs-attribute">color</span>=green <span class="hljs-attribute">size</span>=10&gt;我是逐浪立楷，绿色，尺寸为5&lt;/font&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>markDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>md</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的安装及git部署</title>
    <link href="/2023/11/15/Front-end/Hexo/hexoStall/"/>
    <url>/2023/11/15/Front-end/Hexo/hexoStall/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">Hexo Fluid用户手册</a></p><h3 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h3><ol><li>node</li><li>git</li></ol><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><ol><li>新建一个文件夹用来存放 Hexo 的程序文件</li><li><code>npm install -g hexo-cli</code><ol><li>mac需要管理员权限（sudo）</li></ol></li><li>初始化&amp;本地预览<ol><li><code>hexo init</code> #初始化</li><li><code>npm install</code> #安装组件</li><li><code>hexo g</code> #生成页面</li><li><code>hexo s</code> #启动预览</li></ol></li></ol><h3 id="部署至github"><a href="#部署至github" class="headerlink" title="部署至github"></a>部署至github</h3><ol><li><p>创建github page 仓库</p><ol><li>Repository name 中输入 用户名 <strong>.github.io</strong></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li><li>-创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io</li></ol></li><li><p>安装hexo-deployer-git</p><ol><li><code>npm install hexo-deployer-git --save</code></li></ol></li><li><p>修改 _config.yml 文件末尾的 Deployment 部分</p> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master <br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>用户名一致，都为git账户名称</strong></p></li><li><p><strong>branch为上传分支，git新建项目时默认为main需切换分支或改为main</strong></p><ol><li><img src="/img/hexo/hexo-changeGitBranch.jpg"></li></ol></li><li><p><strong>确认git发布分支是否为当前上传分支，不是则切换</strong></p><ol><li><img src="/img/hexo/hexo-sureGitBranch.jpg"></li></ol></li></ol></li><li><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages,访问 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io</p></li></ol><h3 id="hexo基础"><a href="#hexo基础" class="headerlink" title="hexo基础"></a>hexo基础</h3><ol><li>hexo基础命令<ol><li><code>hexo init [folder]</code> <ol><li>#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</li></ol></li><li><strong><code>hexo new [layout] &lt;title&gt;</code></strong><ol><li>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</li><li><code>hexo new &quot;post title with &quot;whitespace&quot;</code></li></ol></li><li><code>hexo generate</code><ol><li>生成静态文件。</li><li>简写 <strong><code>hexo g</code></strong></li></ol></li><li><code>hexo publish [layout] &lt;filename&gt;</code> <ol><li>#发表草稿</li></ol></li><li><code>hexo server</code><ol><li>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></li><li><code>-p, --port</code>重设端口</li><li><code>-s, --static</code>只使用静态文件</li><li><code>-l, --log</code>启动日记记录，使用覆盖记录格式</li><li>简写 <strong><code>hexo s</code></strong></li></ol></li><li><code>hexo deploy</code>  <ol><li>部署网站。简写 <strong><code>hexo d</code></strong></li><li><strong><code>hexo g -d</code></strong> 部署之前预先生成静态文件</li></ol></li><li><strong><code>hexo clean</code></strong> <ol><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</li></ol></li><li>hexo 更换网站小图标 <ol><li>配置文件中 <strong><code>favicon: /img/index/bk.png </code></strong></li></ol></li><li>hexo 指定子文件夹下创建文章<ol><li><code>hexo n post -p folder/articles</code><br>  <code>hexo n post -p 目录名/生成文件名</code></li></ol></li><li>使用便签<ol><li><code>&lt;p class=&quot;note note-primary&quot;&gt;标签&lt;/p&gt;</code><ol><li>类型：<ol><li>primary</li><li>secondary</li><li>success</li><li>danger</li><li>warning</li><li>info</li><li>light</li></ol></li><li>预览<ol><li><p class="note note-primary">primary</p></li><li><p class="note note-secondary">secondary</p></li><li><p class="note note-success">success</p></li><li><p class="note note-danger">danger</p></li><li><p class="note note-warning">warning</p></li><li><p class="note note-info">info</p></li><li><p class="note note-light">light</p></li></ol></li></ol></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
